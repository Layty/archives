From: =?utf-8?Q?=E7=94=B1_Windows_Internet_Explorer_8_=E4=BF=9D=E5=AD=98?=
Subject: GNU make
Date: Wed, 11 Mar 2015 01:19:28 +0800
MIME-Version: 1.0
Content-Type: text/html;
	charset="utf-8"
Content-Transfer-Encoding: quoted-printable
Content-Location: http://www.gnu.org/software/make/manual/make.html
X-MimeOLE: Produced By Microsoft MimeOLE V6.1.7601.17609

=EF=BB=BF<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" =
"http://www.w3c.org/TR/1999/REC-html401-19991224/loose.dtd">
<HTML><HEAD><TITLE>GNU make</TITLE><!-- This file documents the GNU make =
utility, which determines=0A=
automatically which pieces of a large program need to be recompiled,=0A=
and issues the commands to recompile them.=0A=
=0A=
This is Edition 0.73, last updated 30 September 2014,=0A=
of The GNU Make Manual, for GNU make version 4.1.=0A=
=0A=
Copyright (C) 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995,=0A=
1996, 1997, 1998, 1999, 2000, 2002, 2003, 2004, 2005, 2006, 2007,=0A=
2008, 2009, 2010, 2011, 2012, 2013, 2014 Free Software Foundation, Inc.=0A=
=0A=
Permission is granted to copy, distribute and/or modify this document=0A=
under the terms of the GNU Free Documentation License, Version 1.3 or=0A=
any later version published by the Free Software Foundation; with no=0A=
Invariant Sections, with the Front-Cover Texts being "A GNU Manual,"=0A=
and with the Back-Cover Texts as in (a) below.  A copy of the=0A=
license is included in the section entitled "GNU Free Documentation=0A=
License."=0A=
=0A=
(a) The FSF's Back-Cover Text is: "You have the freedom to copy and=0A=
modify this GNU manual.  Buying copies from the FSF supports it in=0A=
developing GNU and promoting software freedom." --><!-- Created by GNU =
Texinfo 5.2, http://www.gnu.org/software/texinfo/ -->
<META name=3Ddescription content=3D"GNU make">
<META name=3Dkeywords content=3D"GNU make">
<META name=3Dresource-type content=3Ddocument>
<META name=3Ddistribution content=3Dglobal>
<META name=3DGENERATOR content=3D"MSHTML 8.00.7601.18404">
<META content=3D"text/html; charset=3Dutf-8" =
http-equiv=3DContent-Type><LINK title=3DTop=20
rel=3Dstart href=3D"#Top"><LINK title=3D"Concept Index" rel=3Dindex=20
href=3D"#Concept-Index"><LINK title=3D"Table of Contents" rel=3Dcontents =

href=3D"#SEC_Contents"><LINK title=3D(dir) rel=3Dup =
href=3D"dir.html#Top">
<STYLE type=3Dtext/css>A.summary-letter {
	TEXT-DECORATION: none
}
BLOCKQUOTE.smallquotation {
	FONT-SIZE: smaller
}
DIV.display {
	MARGIN-LEFT: 3.2em
}
DIV.example {
	MARGIN-LEFT: 3.2em
}
DIV.indentedblock {
	MARGIN-LEFT: 3.2em
}
DIV.lisp {
	MARGIN-LEFT: 3.2em
}
DIV.smalldisplay {
	MARGIN-LEFT: 3.2em
}
DIV.smallexample {
	MARGIN-LEFT: 3.2em
}
DIV.smallindentedblock {
	MARGIN-LEFT: 3.2em; FONT-SIZE: smaller
}
DIV.smalllisp {
	MARGIN-LEFT: 3.2em
}
KBD {
	FONT-STYLE: oblique
}
PRE.display {
	FONT-FAMILY: inherit
}
PRE.format {
	FONT-FAMILY: inherit
}
PRE.menu-comment {
	FONT-FAMILY: serif
}
PRE.menu-preformatted {
	FONT-FAMILY: serif
}
PRE.smalldisplay {
	FONT-FAMILY: inherit; FONT-SIZE: smaller
}
PRE.smallexample {
	FONT-SIZE: smaller
}
PRE.smallformat {
	FONT-FAMILY: inherit; FONT-SIZE: smaller
}
PRE.smalllisp {
	FONT-SIZE: smaller
}
SPAN.nocodebreak {
	WHITE-SPACE: nowrap
}
SPAN.nolinebreak {
	WHITE-SPACE: nowrap
}
SPAN.roman {
	FONT-FAMILY: serif; FONT-WEIGHT: normal
}
SPAN.sansserif {
	FONT-FAMILY: sans-serif; FONT-WEIGHT: normal
}
UL.no-bullet {
	LIST-STYLE-TYPE: none; LIST-STYLE-IMAGE: none
}
</STYLE>
</HEAD>
<BODY lang=3Den aLink=3D#ff0000 link=3D#0000ff bgColor=3D#ffffff =
text=3D#000000=20
vLink=3D#800080>
<H1 class=3Dsettitle align=3Dcenter>GNU <CODE>make</CODE></H1><A=20
name=3DSEC_Overview></A>
<H2 class=3Dshortcontents-heading>Short Table of Contents</H2>
<DIV class=3Dshortcontents>
<UL class=3Dno-bullet>
  <LI><A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#toc-Overview-of=
-make"=20
  name=3Dstoc-Overview-of-make>1 Overview of <CODE>make</CODE></A></LI>
  <LI><A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#toc-An-Introduc=
tion-to-Makefiles"=20
  name=3Dstoc-An-Introduction-to-Makefiles>2 An Introduction to =
Makefiles</A></LI>
  <LI><A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#toc-Writing-Mak=
efiles"=20
  name=3Dstoc-Writing-Makefiles>3 Writing Makefiles</A></LI>
  <LI><A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#toc-Writing-Rul=
es"=20
  name=3Dstoc-Writing-Rules>4 Writing Rules</A></LI>
  <LI><A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#toc-Writing-Rec=
ipes-in-Rules"=20
  name=3Dstoc-Writing-Recipes-in-Rules>5 Writing Recipes in =
Rules</A></LI>
  <LI><A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#toc-How-to-Use-=
Variables"=20
  name=3Dstoc-How-to-Use-Variables>6 How to Use Variables</A></LI>
  <LI><A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#toc-Conditional=
-Parts-of-Makefiles"=20
  name=3Dstoc-Conditional-Parts-of-Makefiles>7 Conditional Parts of=20
  Makefiles</A></LI>
  <LI><A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#toc-Functions-f=
or-Transforming-Text"=20
  name=3Dstoc-Functions-for-Transforming-Text>8 Functions for =
Transforming=20
  Text</A></LI>
  <LI><A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#toc-How-to-Run-=
make"=20
  name=3Dstoc-How-to-Run-make>9 How to Run <CODE>make</CODE></A></LI>
  <LI><A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#toc-Using-Impli=
cit-Rules"=20
  name=3Dstoc-Using-Implicit-Rules>10 Using Implicit Rules</A></LI>
  <LI><A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#toc-Using-make-=
to-Update-Archive-Files"=20
  name=3Dstoc-Using-make-to-Update-Archive-Files>11 Using =
<CODE>make</CODE> to=20
  Update Archive Files</A></LI>
  <LI><A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#toc-Extending-G=
NU-make"=20
  name=3Dstoc-Extending-GNU-make>12 Extending GNU =
<CODE>make</CODE></A></LI>
  <LI><A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#toc-Features-of=
-GNU-make"=20
  name=3Dstoc-Features-of-GNU-make>13 Features of GNU =
<CODE>make</CODE></A></LI>
  <LI><A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#toc-Incompatibi=
lities-and-Missing-Features"=20
  name=3Dstoc-Incompatibilities-and-Missing-Features>14 =
Incompatibilities and=20
  Missing Features</A></LI>
  <LI><A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#toc-Makefile-Co=
nventions-1"=20
  name=3Dstoc-Makefile-Conventions-1>15 Makefile Conventions</A></LI>
  <LI><A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#toc-Quick-Refer=
ence-1"=20
  name=3Dstoc-Quick-Reference-1>Appendix A Quick Reference</A></LI>
  <LI><A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#toc-Errors-Gene=
rated-by-Make"=20
  name=3Dstoc-Errors-Generated-by-Make>Appendix B Errors Generated by=20
Make</A></LI>
  <LI><A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#toc-Complex-Mak=
efile-Example"=20
  name=3Dstoc-Complex-Makefile-Example>Appendix C Complex Makefile=20
Example</A></LI>
  <LI><A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#toc-Index-of-Co=
ncepts"=20
  name=3Dstoc-Index-of-Concepts>Index of Concepts</A></LI>
  <LI><A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#toc-Index-of-Fu=
nctions_002c-Variables_002c-_0026-Directives"=20
  =
name=3Dstoc-Index-of-Functions_002c-Variables_002c-_0026-Directives>Index=
 of=20
  Functions, Variables, &amp; Directives</A></LI></UL></DIV><A=20
name=3DSEC_Contents></A>
<H2 class=3Dcontents-heading>Table of Contents</H2>
<DIV class=3Dcontents>
<UL class=3Dno-bullet>
  <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Overview"=20
  name=3Dtoc-Overview-of-make>1 Overview of <CODE>make</CODE></A>=20
  <UL class=3Dno-bullet>
    <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Reading"=20
    name=3Dtoc-How-to-Read-This-Manual>1.1 How to Read This =
Manual</A></LI>
    <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Bugs"=20
    name=3Dtoc-Problems-and-Bugs>1.2 Problems and =
Bugs</A></LI></UL></LI>
  <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Introduction"=20
  name=3Dtoc-An-Introduction-to-Makefiles>2 An Introduction to =
Makefiles</A>=20
  <UL class=3Dno-bullet>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rule-Introducti=
on"=20
    name=3Dtoc-What-a-Rule-Looks-Like>2.1 What a Rule Looks =
Like</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Simple-Makefile=
"=20
    name=3Dtoc-A-Simple-Makefile>2.2 A Simple Makefile</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#How-Make-Works"=
=20
    name=3Dtoc-How-make-Processes-a-Makefile>2.3 How <CODE>make</CODE> =
Processes a=20
    Makefile</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables-Simpl=
ify"=20
    name=3Dtoc-Variables-Make-Makefiles-Simpler>2.4 Variables Make =
Makefiles=20
    Simpler</A></LI>
    <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#make-Deduces"=20
    name=3Dtoc-Letting-make-Deduce-the-Recipes>2.5 Letting =
<CODE>make</CODE>=20
    Deduce the Recipes</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Combine-By-Prer=
equisite"=20
    name=3Dtoc-Another-Style-of-Makefile>2.6 Another Style of =
Makefile</A></LI>
    <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Cleanup"=20
    name=3Dtoc-Rules-for-Cleaning-the-Directory>2.7 Rules for Cleaning =
the=20
    Directory</A></LI></UL></LI>
  <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefiles"=20
  name=3Dtoc-Writing-Makefiles>3 Writing Makefiles</A>=20
  <UL class=3Dno-bullet>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Conten=
ts"=20
    name=3Dtoc-What-Makefiles-Contain>3.1 What Makefiles Contain</A>=20
    <UL class=3Dno-bullet>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Splitting-Lines=
"=20
      name=3Dtoc-Splitting-Long-Lines>3.1.1 Splitting Long =
Lines</A></LI></UL></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Names"=
=20
    name=3Dtoc-What-Name-to-Give-Your-Makefile>3.2 What Name to Give =
Your=20
    Makefile</A></LI>
    <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Include"=20
    name=3Dtoc-Including-Other-Makefiles>3.3 Including Other =
Makefiles</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#MAKEFILES-Varia=
ble"=20
    name=3Dtoc-The-Variable-MAKEFILES>3.4 The Variable=20
    <CODE>MAKEFILES</CODE></A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Remaking-Makefi=
les"=20
    name=3Dtoc-How-Makefiles-Are-Remade>3.5 How Makefiles Are =
Remade</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Overriding-Make=
files"=20
    name=3Dtoc-Overriding-Part-of-Another-Makefile>3.6 Overriding Part =
of Another=20
    Makefile</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Reading-Makefil=
es"=20
    name=3Dtoc-How-make-Reads-a-Makefile>3.7 How <CODE>make</CODE> Reads =
a=20
    Makefile</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Secondary-Expan=
sion"=20
    name=3Dtoc-Secondary-Expansion-1>3.8 Secondary =
Expansion</A></LI></UL></LI>
  <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rules"=20
  name=3Dtoc-Writing-Rules>4 Writing Rules</A>=20
  <UL class=3Dno-bullet>
    <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rule-Example"=20
    name=3Dtoc-Rule-Example-1>4.1 Rule Example</A></LI>
    <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rule-Syntax"=20
    name=3Dtoc-Rule-Syntax-1>4.2 Rule Syntax</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Prerequisite-Ty=
pes"=20
    name=3Dtoc-Types-of-Prerequisites>4.3 Types of =
Prerequisites</A></LI>
    <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcards"=20
    name=3Dtoc-Using-Wildcard-Characters-in-File-Names>4.4 Using =
Wildcard=20
    Characters in File Names</A>=20
    <UL class=3Dno-bullet>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcard-Exampl=
es"=20
      name=3Dtoc-Wildcard-Examples-1>4.4.1 Wildcard Examples</A></LI>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcard-Pitfal=
l"=20
      name=3Dtoc-Pitfalls-of-Using-Wildcards>4.4.2 Pitfalls of Using=20
      Wildcards</A></LI>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcard-Functi=
on"=20
      name=3Dtoc-The-Function-wildcard>4.4.3 The Function=20
      <CODE>wildcard</CODE></A></LI></UL></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Directory-Searc=
h"=20
    name=3Dtoc-Searching-Directories-for-Prerequisites>4.5 Searching =
Directories=20
    for Prerequisites</A>=20
    <UL class=3Dno-bullet>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#General-Search"=
=20
      name=3Dtoc-VPATH_003a-Search-Path-for-All-Prerequisites>4.5.1=20
      <CODE>VPATH</CODE>: Search Path for All Prerequisites</A></LI>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Selective-Searc=
h"=20
      name=3Dtoc-The-vpath-Directive>4.5.2 The <CODE>vpath</CODE>=20
      Directive</A></LI>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Search-Algorith=
m"=20
      name=3Dtoc-How-Directory-Searches-are-Performed>4.5.3 How =
Directory Searches=20
      are Performed</A></LI>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipes_002fSea=
rch"=20
      name=3Dtoc-Writing-Recipes-with-Directory-Search>4.5.4 Writing =
Recipes with=20
      Directory Search</A></LI>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit_002fSe=
arch"=20
      name=3Dtoc-Directory-Search-and-Implicit-Rules>4.5.5 Directory =
Search and=20
      Implicit Rules</A></LI>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Libraries_002fS=
earch"=20
      name=3Dtoc-Directory-Search-for-Link-Libraries>4.5.6 Directory =
Search for=20
      Link Libraries</A></LI></UL></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Phony-Targets" =

    name=3Dtoc-Phony-Targets-1>4.6 Phony Targets</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Force-Targets" =

    name=3Dtoc-Rules-without-Recipes-or-Prerequisites>4.7 Rules without =
Recipes or=20
    Prerequisites</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Empty-Targets" =

    name=3Dtoc-Empty-Target-Files-to-Record-Events>4.8 Empty Target =
Files to=20
    Record Events</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
"=20
    name=3Dtoc-Special-Built_002din-Target-Names>4.9 Special Built-in =
Target=20
    Names</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Multiple-Target=
s"=20
    name=3Dtoc-Multiple-Targets-in-a-Rule>4.10 Multiple Targets in a =
Rule</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Multiple-Rules"=
=20
    name=3Dtoc-Multiple-Rules-for-One-Target>4.11 Multiple Rules for One =

    Target</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-Pattern"=
=20
    name=3Dtoc-Static-Pattern-Rules>4.12 Static Pattern Rules</A>=20
    <UL class=3Dno-bullet>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-Usage"=20
      name=3Dtoc-Syntax-of-Static-Pattern-Rules>4.12.1 Syntax of Static =
Pattern=20
      Rules</A></LI>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-versus-I=
mplicit"=20
      name=3Dtoc-Static-Pattern-Rules-versus-Implicit-Rules>4.12.2 =
Static Pattern=20
      Rules versus Implicit Rules</A></LI></UL></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Double_002dColo=
n"=20
    name=3Dtoc-Double_002dColon-Rules>4.13 Double-Colon Rules</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Prere=
quisites"=20
    name=3Dtoc-Generating-Prerequisites-Automatically>4.14 Generating=20
    Prerequisites Automatically</A></LI></UL></LI>
  <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipes"=20
  name=3Dtoc-Writing-Recipes-in-Rules>5 Writing Recipes in Rules</A>=20
  <UL class=3Dno-bullet>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipe-Syntax" =

    name=3Dtoc-Recipe-Syntax-1>5.1 Recipe Syntax</A>=20
    <UL class=3Dno-bullet>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Splitting-Recip=
e-Lines"=20
      name=3Dtoc-Splitting-Recipe-Lines-1>5.1.1 Splitting Recipe =
Lines</A></LI>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables-in-Re=
cipes"=20
      name=3Dtoc-Using-Variables-in-Recipes>5.1.2 Using Variables in=20
      Recipes</A></LI></UL></LI>
    <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Echoing"=20
    name=3Dtoc-Recipe-Echoing>5.2 Recipe Echoing</A></LI>
    <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Execution"=20
    name=3Dtoc-Recipe-Execution>5.3 Recipe Execution</A>=20
    <UL class=3Dno-bullet>
      <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#One-Shell"=20
      name=3Dtoc-Using-One-Shell>5.3.1 Using One Shell</A></LI>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Choosing-the-Sh=
ell"=20
      name=3Dtoc-Choosing-the-Shell-1>5.3.2 Choosing the =
Shell</A></LI></UL></LI>
    <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel"=20
    name=3Dtoc-Parallel-Execution>5.4 Parallel Execution</A>=20
    <UL class=3Dno-bullet>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel-Output=
"=20
      name=3Dtoc-Output-During-Parallel-Execution>5.4.1 Output During =
Parallel=20
      Execution</A></LI>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel-Input"=
=20
      name=3Dtoc-Input-During-Parallel-Execution>5.4.2 Input During =
Parallel=20
      Execution</A></LI></UL></LI>
    <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Errors"=20
    name=3Dtoc-Errors-in-Recipes>5.5 Errors in Recipes</A></LI>
    <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Interrupts"=20
    name=3Dtoc-Interrupting-or-Killing-make>5.6 Interrupting or Killing=20
    <CODE>make</CODE></A></LI>
    <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Recursion"=20
    name=3Dtoc-Recursive-Use-of-make>5.7 Recursive Use of =
<CODE>make</CODE></A>=20
    <UL class=3Dno-bullet>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#MAKE-Variable" =

      name=3Dtoc-How-the-MAKE-Variable-Works>5.7.1 How the =
<CODE>MAKE</CODE>=20
      Variable Works</A></LI>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables_002fR=
ecursion"=20
      name=3Dtoc-Communicating-Variables-to-a-Sub_002dmake>5.7.2 =
Communicating=20
      Variables to a Sub-<CODE>make</CODE></A></LI>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion"=20
      name=3Dtoc-Communicating-Options-to-a-Sub_002dmake>5.7.3 =
Communicating=20
      Options to a Sub-<CODE>make</CODE></A></LI>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#g_t_002dw-Optio=
n"=20
      name=3Dtoc-The-_002d_002dprint_002ddirectory-Option>5.7.4 The=20
      =E2=80=98<SAMP>--print-directory</SAMP>=E2=80=99 =
Option</A></LI></UL></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Canned-Recipes"=
=20
    name=3Dtoc-Defining-Canned-Recipes>5.8 Defining Canned =
Recipes</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Empty-Recipes" =

    name=3Dtoc-Using-Empty-Recipes>5.9 Using Empty =
Recipes</A></LI></UL></LI>
  <LI><A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Using-Variables=
"=20
  name=3Dtoc-How-to-Use-Variables>6 How to Use Variables</A>=20
  <UL class=3Dno-bullet>
    <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Reference"=20
    name=3Dtoc-Basics-of-Variable-References>6.1 Basics of Variable=20
    References</A></LI>
    <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavors"=20
    name=3Dtoc-The-Two-Flavors-of-Variables>6.2 The Two Flavors of=20
    Variables</A></LI>
    <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Advanced"=20
    name=3Dtoc-Advanced-Features-for-Reference-to-Variables>6.3 Advanced =
Features=20
    for Reference to Variables</A>=20
    <UL class=3Dno-bullet>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Substitution-Re=
fs"=20
      name=3Dtoc-Substitution-References>6.3.1 Substitution =
References</A></LI>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Computed-Names"=
=20
      name=3Dtoc-Computed-Variable-Names>6.3.2 Computed Variable=20
    Names</A></LI></UL></LI>
    <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Values"=20
    name=3Dtoc-How-Variables-Get-Their-Values>6.4 How Variables Get =
Their=20
    Values</A></LI>
    <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Setting"=20
    name=3Dtoc-Setting-Variables>6.5 Setting Variables</A></LI>
    <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Appending"=20
    name=3Dtoc-Appending-More-Text-to-Variables>6.6 Appending More Text =
to=20
    Variables</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Override-Direct=
ive"=20
    name=3Dtoc-The-override-Directive>6.7 The <CODE>override</CODE>=20
    Directive</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Multi_002dLine"=
=20
    name=3Dtoc-Defining-Multi_002dLine-Variables>6.8 Defining Multi-Line =

    Variables</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Undefine-Direct=
ive"=20
    name=3Dtoc-Undefining-Variables>6.9 Undefining Variables</A></LI>
    <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Environment"=20
    name=3Dtoc-Variables-from-the-Environment>6.10 Variables from the=20
    Environment</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Target_002dspec=
ific"=20
    name=3Dtoc-Target_002dspecific-Variable-Values>6.11 Target-specific =
Variable=20
    Values</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern_002dspe=
cific"=20
    name=3Dtoc-Pattern_002dspecific-Variable-Values>6.12 =
Pattern-specific Variable=20
    Values</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Suppressing-Inh=
eritance"=20
    name=3Dtoc-Suppressing-Inheritance-1>6.13 Suppressing =
Inheritance</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Variabl=
es"=20
    name=3Dtoc-Other-Special-Variables>6.14 Other Special=20
  Variables</A></LI></UL></LI>
  <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditionals"=20
  name=3Dtoc-Conditional-Parts-of-Makefiles>7 Conditional Parts of =
Makefiles</A>=20
  <UL class=3Dno-bullet>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditional-Exa=
mple"=20
    name=3Dtoc-Example-of-a-Conditional>7.1 Example of a =
Conditional</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditional-Syn=
tax"=20
    name=3Dtoc-Syntax-of-Conditionals>7.2 Syntax of =
Conditionals</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Testing-Flags" =

    name=3Dtoc-Conditionals-that-Test-Flags>7.3 Conditionals that Test=20
    Flags</A></LI></UL></LI>
  <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Functions"=20
  name=3Dtoc-Functions-for-Transforming-Text>8 Functions for =
Transforming Text</A>=20

  <UL class=3Dno-bullet>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Syntax-of-Funct=
ions"=20
    name=3Dtoc-Function-Call-Syntax>8.1 Function Call Syntax</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
=20
    name=3Dtoc-Functions-for-String-Substitution-and-Analysis>8.2 =
Functions for=20
    String Substitution and Analysis</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions"=20
    name=3Dtoc-Functions-for-File-Names>8.3 Functions for File =
Names</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditional-Fun=
ctions"=20
    name=3Dtoc-Functions-for-Conditionals>8.4 Functions for =
Conditionals</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Foreach-Functio=
n"=20
    name=3Dtoc-The-foreach-Function>8.5 The <CODE>foreach</CODE> =
Function</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Function" =

    name=3Dtoc-The-file-Function>8.6 The <CODE>file</CODE> =
Function</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Call-Function" =

    name=3Dtoc-The-call-Function>8.7 The <CODE>call</CODE> =
Function</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Value-Function"=
=20
    name=3Dtoc-The-value-Function>8.8 The <CODE>value</CODE> =
Function</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Eval-Function" =

    name=3Dtoc-The-eval-Function>8.9 The <CODE>eval</CODE> =
Function</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Origin-Function=
"=20
    name=3Dtoc-The-origin-Function>8.10 The <CODE>origin</CODE> =
Function</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavor-Function=
"=20
    name=3Dtoc-The-flavor-Function>8.11 The <CODE>flavor</CODE> =
Function</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Make-Control-Fu=
nctions"=20
    name=3Dtoc-Functions-That-Control-Make>8.12 Functions That Control=20
    Make</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Shell-Function"=
=20
    name=3Dtoc-The-shell-Function>8.13 The <CODE>shell</CODE> =
Function</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Function"=
=20
    name=3Dtoc-The-guile-Function>8.14 The <CODE>guile</CODE>=20
  Function</A></LI></UL></LI>
  <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Running"=20
  name=3Dtoc-How-to-Run-make>9 How to Run <CODE>make</CODE></A>=20
  <UL class=3Dno-bullet>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Argume=
nts"=20
    name=3Dtoc-Arguments-to-Specify-the-Makefile>9.1 Arguments to =
Specify the=20
    Makefile</A></LI>
    <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Goals"=20
    name=3Dtoc-Arguments-to-Specify-the-Goals>9.2 Arguments to Specify =
the=20
    Goals</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution"=20
    name=3Dtoc-Instead-of-Executing-Recipes>9.3 Instead of Executing=20
    Recipes</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Avoiding-Compil=
ation"=20
    name=3Dtoc-Avoiding-Recompilation-of-Some-Files>9.4 Avoiding =
Recompilation of=20
    Some Files</A></LI>
    <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Overriding"=20
    name=3Dtoc-Overriding-Variables>9.5 Overriding Variables</A></LI>
    <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Testing"=20
    name=3Dtoc-Testing-the-Compilation-of-a-Program>9.6 Testing the =
Compilation of=20
    a Program</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
"=20
    name=3Dtoc-Summary-of-Options>9.7 Summary of =
Options</A></LI></UL></LI>
  <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rules"=
=20
  name=3Dtoc-Using-Implicit-Rules>10 Using Implicit Rules</A>=20
  <UL class=3Dno-bullet>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Using-Implicit"=
=20
    name=3Dtoc-Using-Implicit-Rules-1>10.1 Using Implicit Rules</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les"=20
    name=3Dtoc-Catalogue-of-Built_002dIn-Rules>10.2 Catalogue of =
Built-In=20
    Rules</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les"=20
    name=3Dtoc-Variables-Used-by-Implicit-Rules>10.3 Variables Used by =
Implicit=20
    Rules</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Chained-Rules" =

    name=3Dtoc-Chains-of-Implicit-Rules>10.4 Chains of Implicit =
Rules</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Rules" =

    name=3Dtoc-Defining-and-Redefining-Pattern-Rules>10.5 Defining and =
Redefining=20
    Pattern Rules</A>=20
    <UL class=3Dno-bullet>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Intro" =

      name=3Dtoc-Introduction-to-Pattern-Rules>10.5.1 Introduction to =
Pattern=20
      Rules</A></LI>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Example=
s"=20
      name=3Dtoc-Pattern-Rule-Examples>10.5.2 Pattern Rule =
Examples</A></LI>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles"=20
      name=3Dtoc-Automatic-Variables-1>10.5.3 Automatic =
Variables</A></LI>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Match" =

      name=3Dtoc-How-Patterns-Match>10.5.4 How Patterns Match</A></LI>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Match_002dAnyth=
ing-Rules"=20
      name=3Dtoc-Match_002dAnything-Pattern-Rules>10.5.5 Match-Anything =
Pattern=20
      Rules</A></LI>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Canceling-Rules=
"=20
      name=3Dtoc-Canceling-Implicit-Rules>10.5.6 Canceling Implicit=20
    Rules</A></LI></UL></LI>
    <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Last-Resort"=20
    name=3Dtoc-Defining-Last_002dResort-Default-Rules>10.6 Defining =
Last-Resort=20
    Default Rules</A></LI>
    <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Suffix-Rules"=20
    name=3Dtoc-Old_002dFashioned-Suffix-Rules>10.7 Old-Fashioned Suffix=20
    Rules</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rule-S=
earch"=20
    name=3Dtoc-Implicit-Rule-Search-Algorithm>10.8 Implicit Rule Search=20
    Algorithm</A></LI></UL></LI>
  <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archives"=20
  name=3Dtoc-Using-make-to-Update-Archive-Files>11 Using =
<CODE>make</CODE> to=20
  Update Archive Files</A>=20
  <UL class=3Dno-bullet>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Members=
"=20
    name=3Dtoc-Archive-Members-as-Targets>11.1 Archive Members as =
Targets</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Update"=
=20
    name=3Dtoc-Implicit-Rule-for-Archive-Member-Targets>11.2 Implicit =
Rule for=20
    Archive Member Targets</A>=20
    <UL class=3Dno-bullet>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Symbols=
"=20
      name=3Dtoc-Updating-Archive-Symbol-Directories>11.2.1 Updating =
Archive=20
      Symbol Directories</A></LI></UL></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Pitfall=
s"=20
    name=3Dtoc-Dangers-When-Using-Archives>11.3 Dangers When Using=20
    Archives</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Suffix-=
Rules"=20
    name=3Dtoc-Suffix-Rules-for-Archive-Files>11.4 Suffix Rules for =
Archive=20
    Files</A></LI></UL></LI>
  <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Extending-make"=
=20
  name=3Dtoc-Extending-GNU-make>12 Extending GNU <CODE>make</CODE></A>=20
  <UL class=3Dno-bullet>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Integrati=
on"=20
    name=3Dtoc-GNU-Guile-Integration>12.1 GNU Guile Integration</A>=20
    <UL class=3Dno-bullet>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Types"=20
      name=3Dtoc-Conversion-of-Guile-Types>12.1.1 Conversion of Guile=20
      Types</A></LI>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Interface=
"=20
      name=3Dtoc-Interfaces-from-Guile-to-make>12.1.2 Interfaces from =
Guile to=20
      <CODE>make</CODE></A></LI>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Example" =

      name=3Dtoc-Example-Using-Guile-in-make>12.1.3 Example Using Guile =
in=20
      <CODE>make</CODE></A></LI></UL></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Loading-Objects=
"=20
    name=3Dtoc-Loading-Dynamic-Objects>12.2 Loading Dynamic Objects</A>=20
    <UL class=3Dno-bullet>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#load-Directive"=
=20
      name=3Dtoc-The-load-Directive>12.2.1 The <CODE>load</CODE>=20
Directive</A></LI>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Remaking-Loaded=
-Objects"=20
      name=3Dtoc-How-Loaded-Objects-Are-Remade>12.2.2 How Loaded Objects =
Are=20
      Remade</A></LI>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Loaded-Object-A=
PI"=20
      name=3Dtoc-Loaded-Object-Interface>12.2.3 Loaded Object =
Interface</A></LI>
      <LI><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Loaded-Object-E=
xample"=20
      name=3Dtoc-Example-Loaded-Object>12.2.4 Example Loaded=20
    Object</A></LI></UL></LI></UL></LI>
  <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Features"=20
  name=3Dtoc-Features-of-GNU-make>13 Features of GNU =
<CODE>make</CODE></A></LI>
  <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Missing"=20
  name=3Dtoc-Incompatibilities-and-Missing-Features>14 Incompatibilities =
and=20
  Missing Features</A></LI>
  <LI><A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Conven=
tions"=20
  name=3Dtoc-Makefile-Conventions-1>15 Makefile Conventions</A>=20
  <UL class=3Dno-bullet>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Basics=
"=20
    name=3Dtoc-General-Conventions-for-Makefiles>15.1 General =
Conventions for=20
    Makefiles</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Utilities-in-Ma=
kefiles"=20
    name=3Dtoc-Utilities-in-Makefiles-1>15.2 Utilities in =
Makefiles</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Command-Variabl=
es"=20
    name=3Dtoc-Variables-for-Specifying-Commands>15.3 Variables for =
Specifying=20
    Commands</A></LI>
    <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#DESTDIR"=20
    name=3Dtoc-DESTDIR_003a-Support-for-Staged-Installs>15.4 =
<CODE>DESTDIR</CODE>:=20
    Support for Staged Installs</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Directory-Varia=
bles"=20
    name=3Dtoc-Variables-for-Installation-Directories>15.5 Variables for =

    Installation Directories</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Standard-Target=
s"=20
    name=3Dtoc-Standard-Targets-for-Users>15.6 Standard Targets for =
Users</A></LI>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Install-Command=
-Categories"=20
    name=3Dtoc-Install-Command-Categories-1>15.7 Install Command=20
    Categories</A></LI></UL></LI>
  <LI><A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Quick-Reference=
"=20
  name=3Dtoc-Quick-Reference-1>Appendix A Quick Reference</A></LI>
  <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Error-Messages"=
=20
  name=3Dtoc-Errors-Generated-by-Make>Appendix B Errors Generated by =
Make</A></LI>
  <LI><A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Complex-Makefil=
e"=20
  name=3Dtoc-Complex-Makefile-Example>Appendix C Complex Makefile =
Example</A>=20
  <UL class=3Dno-bullet>
    <LI><A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#GNU-Free-Docume=
ntation-License"=20
    name=3Dtoc-GNU-Free-Documentation-License-1>C.1 GNU Free =
Documentation=20
    License</A></LI></UL></LI>
  <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

  name=3Dtoc-Index-of-Concepts>Index of Concepts</A></LI>
  <LI><A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index"=20
  =
name=3Dtoc-Index-of-Functions_002c-Variables_002c-_0026-Directives>Index =
of=20
  Functions, Variables, &amp; Directives</A></LI></UL></DIV><A =
name=3DTop></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Overview"=20
rel=3Dnext>Overview</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/dir.html#Top" =
rel=3Dprev>(dir)</A>,=20
Up: <A accessKey=3Du =
href=3D"http://www.gnu.org/software/make/manual/dir.html#Top"=20
rel=3Dup>(dir)</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DGNU-make></A>
<H1 class=3Dtop>GNU <CODE>make</CODE></H1>
<P>This file documents the GNU <CODE>make</CODE> utility, which =
determines=20
automatically which pieces of a large program need to be recompiled, and =
issues=20
the commands to recompile them. </P>
<P>This is Edition 0.73, last updated 30 September 2014, of <CITE>The =
GNU Make=20
Manual</CITE>, for GNU <CODE>make</CODE> version 4.1. </P>
<P>Copyright =C2=A9 1988, 1989, 1990, 1991, 1992, 1993, 1994, 1995, =
1996, 1997, 1998,=20
1999, 2000, 2002, 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011, =
2012,=20
2013, 2014 Free Software Foundation, Inc. </P>
<BLOCKQUOTE>
  <P>Permission is granted to copy, distribute and/or modify this =
document under=20
  the terms of the GNU Free Documentation License, Version 1.3 or any =
later=20
  version published by the Free Software Foundation; with no Invariant =
Sections,=20
  with the Front-Cover Texts being =E2=80=9CA GNU Manual,=E2=80=9D and =
with the Back-Cover Texts=20
  as in (a) below. A copy of the license is included in the section =
entitled=20
  =E2=80=9CGNU Free Documentation License.=E2=80=9D </P>
  <P>(a) The FSF=E2=80=99s Back-Cover Text is: =E2=80=9CYou have the =
freedom to copy and modify=20
  this GNU manual. Buying copies from the FSF supports it in developing =
GNU and=20
  promoting software freedom.=E2=80=9D </P></BLOCKQUOTE>
<TABLE class=3Dmenu border=3D0 cellSpacing=3D0>
  <TBODY>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D1=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Overview">Overv=
iew</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Overview of <CODE>make</CODE>. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D2=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Introduction">I=
ntroduction</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>An introduction to <CODE>make</CODE>. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D3=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefiles">Make=
files</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Makefiles tell <CODE>make</CODE> what =
to do.=20
  </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D4=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rules">Rules</A=
>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Rules describe when a file must be =
remade.=20
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D5=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipes">Recipe=
s</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Recipes say how to remake a file. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D6=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Using-Variables=
">Using=20
      Variables</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>You can use variables to avoid =
repetition.=20
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D7=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditionals">C=
onditionals</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Use or ignore parts of the makefile =
based on the=20
      values of variables. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D8=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Functions">Func=
tions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Many powerful ways to manipulate text. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D9=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Running">Invoki=
ng=20
      make</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to invoke <CODE>make</CODE> on the =
command=20
      line. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rules"=
>Implicit=20
      Rules</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Use implicit rules to treat many files =
alike,=20
      based on their file names. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archives">Archi=
ves</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How <CODE>make</CODE> can update =
library=20
      archives. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Extending-make"=
>Extending=20
      make</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Using extensions to <CODE>make</CODE>. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Features">Featu=
res</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Features GNU <CODE>make</CODE> has =
over other=20
      <CODE>make</CODE>s. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Missing">Missin=
g</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>What GNU <CODE>make</CODE> lacks from =
other=20
      <CODE>make</CODE>s. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Conven=
tions">Makefile=20
      Conventions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Conventions for writing makefiles for =
GNU=20
      programs. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Quick-Reference=
">Quick=20
      Reference</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>A quick reference for experienced =
users. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Error-Messages"=
>Error=20
      Messages</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>A list of common errors generated by=20
      <CODE>make</CODE>. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Complex-Makefil=
e">Complex=20
      Makefile</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>A real example of a straightforward, =
but=20
      nontrivial, makefile. </TD></TR>
  <TR>
    <TH vAlign=3Dtop colSpan=3D3 align=3Dleft><PRE =
class=3Dmenu-comment></PRE></TH></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#GNU-Free-Docume=
ntation-License">GNU=20
      Free Documentation License</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>License for copying this manual. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index">=
Concept=20
      Index</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Index of Concepts. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index">Nam=
e=20
      Index</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Index of Functions, Variables, &amp; =
Directives.=20
    </TD></TR>
  <TR>
    <TH vAlign=3Dtop colSpan=3D3 align=3Dleft><PRE =
class=3Dmenu-comment></PRE></TH></TR>
  <TR>
    <TH vAlign=3Dtop colSpan=3D3 align=3Dleft><PRE class=3Dmenu-comment> =
=E2=80=94 The Detailed Node Listing =E2=80=94

Overview of <CODE>make</CODE>

</PRE></TH></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Preparing">Prep=
aring</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Preparing and running =
<CODE>make</CODE>. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Reading">Readin=
g</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>On reading this text. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Bugs">Bugs</A>:=
</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Problems and bugs. </TD></TR>
  <TR>
    <TH vAlign=3Dtop colSpan=3D3 align=3Dleft><PRE =
class=3Dmenu-comment>An Introduction to Makefiles

</PRE></TH></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rule-Introducti=
on">Rule=20
      Introduction</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>What a rule looks like. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Simple-Makefile=
">Simple=20
      Makefile</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>A simple makefile. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#How-Make-Works"=
>How=20
      Make Works</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How <CODE>make</CODE> processes this =
makefile.=20
    </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables-Simpl=
ify">Variables=20
      Simplify</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Variables make makefiles simpler. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#make-Deduces">m=
ake=20
      Deduces</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Letting <CODE>make</CODE> deduce the =
recipes.=20
  </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Combine-By-Prer=
equisite">Combine=20
      By Prerequisite</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Another style of makefile. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Cleanup">Cleanu=
p</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Rules for cleaning the directory. =
</TD></TR>
  <TR>
    <TH vAlign=3Dtop colSpan=3D3 align=3Dleft><PRE =
class=3Dmenu-comment>Writing Makefiles

</PRE></TH></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Conten=
ts">Makefile=20
      Contents</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>What makefiles contain. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Names"=
>Makefile=20
      Names</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to name your makefile. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Include">Includ=
e</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How one makefile can use another =
makefile.=20
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#MAKEFILES-Varia=
ble">MAKEFILES=20
      Variable</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>The environment can specify extra =
makefiles.=20
  </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Remaking-Makefi=
les">Remaking=20
      Makefiles</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How makefiles get remade. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Overriding-Make=
files">Overriding=20
      Makefiles</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to override part of one makefile =
with=20
      another makefile. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Reading-Makefil=
es">Reading=20
      Makefiles</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How makefiles are parsed. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Secondary-Expan=
sion">Secondary=20
      Expansion</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How and when secondary expansion is =
performed.=20
    </TD></TR>
  <TR>
    <TH vAlign=3Dtop colSpan=3D3 align=3Dleft><PRE =
class=3Dmenu-comment>What Makefiles Contain

</PRE></TH></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Splitting-Lines=
">Splitting=20
      Lines</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Splitting long lines in makefiles =
</TD></TR>
  <TR>
    <TH vAlign=3Dtop colSpan=3D3 align=3Dleft><PRE =
class=3Dmenu-comment>Writing Rules

</PRE></TH></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rule-Example">R=
ule=20
      Example</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>An example explained. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rule-Syntax">Ru=
le=20
      Syntax</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>General syntax explained. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Prerequisite-Ty=
pes">Prerequisite=20
      Types</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>There are two types of prerequisites. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcards">Wild=
cards</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Using wildcard characters such as =
=E2=80=98*=E2=80=99. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Directory-Searc=
h">Directory=20
      Search</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Searching other directories for source =
files.=20
  </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Phony-Targets">=
Phony=20
      Targets</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Using a target that is not a real =
file=E2=80=99s name.=20
    </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Force-Targets">=
Force=20
      Targets</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>You can use a target without a recipe =
or=20
      prerequisites to mark other targets as phony. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Empty-Targets">=
Empty=20
      Targets</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>When only the date matters and the =
files are=20
      empty. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
">Special=20
      Targets</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Targets with special built-in =
meanings. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Multiple-Target=
s">Multiple=20
      Targets</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>When to make use of several targets in =
a rule.=20
    </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Multiple-Rules"=
>Multiple=20
      Rules</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to use several rules with the same =
target.=20
    </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-Pattern"=
>Static=20
      Pattern</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Static pattern rules apply to multiple =
targets=20
      and can vary the prerequisites according to the target name. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Double_002dColo=
n">Double-Colon</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to use a special kind of rule to =
allow=20
      several independent rules for one target. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Prere=
quisites">Automatic=20
      Prerequisites</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to automatically generate rules =
giving=20
      prerequisites from source files themselves. </TD></TR>
  <TR>
    <TH vAlign=3Dtop colSpan=3D3 align=3Dleft><PRE =
class=3Dmenu-comment>Using Wildcard Characters in File Names

</PRE></TH></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcard-Exampl=
es">Wildcard=20
      Examples</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Several examples. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcard-Pitfal=
l">Wildcard=20
      Pitfall</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Problems to avoid. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcard-Functi=
on">Wildcard=20
      Function</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to cause wildcard expansion where =
it does=20
      not normally take place. </TD></TR>
  <TR>
    <TH vAlign=3Dtop colSpan=3D3 align=3Dleft><PRE =
class=3Dmenu-comment>Searching Directories for Prerequisites

</PRE></TH></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#General-Search"=
>General=20
      Search</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Specifying a search path that applies =
to every=20
      prerequisite. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Selective-Searc=
h">Selective=20
      Search</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Specifying a search path for a =
specified class=20
      of names. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Search-Algorith=
m">Search=20
      Algorithm</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>When and how search paths are applied. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipes_002fSea=
rch">Recipes/Search</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to write recipes that work =
together with=20
      search paths. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit_002fSe=
arch">Implicit/Search</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How search paths affect implicit =
rules. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Libraries_002fS=
earch">Libraries/Search</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Directory search for link libraries. =
</TD></TR>
  <TR>
    <TH vAlign=3Dtop colSpan=3D3 align=3Dleft><PRE =
class=3Dmenu-comment>Static Pattern Rules

</PRE></TH></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-Usage">S=
tatic=20
      Usage</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>The syntax of static pattern rules. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-versus-I=
mplicit">Static=20
      versus Implicit</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>When are they better than implicit =
rules? </TD></TR>
  <TR>
    <TH vAlign=3Dtop colSpan=3D3 align=3Dleft><PRE =
class=3Dmenu-comment>Writing Recipes in Rules

</PRE></TH></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipe-Syntax">=
Recipe=20
      Syntax</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Recipe syntax features and pitfalls. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Echoing">Echoin=
g</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to control when recipes are =
echoed. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Execution">Exec=
ution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How recipes are executed. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel">Paral=
lel</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How recipes can be executed in =
parallel. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Errors">Errors<=
/A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>What happens after a recipe execution =
error.=20
  </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Interrupts">Int=
errupts</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>What happens when a recipe is =
interrupted.=20
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Recursion">Recu=
rsion</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Invoking <CODE>make</CODE> from =
makefiles.=20
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Canned-Recipes"=
>Canned=20
      Recipes</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Defining canned recipes. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Empty-Recipes">=
Empty=20
      Recipes</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Defining useful, do-nothing recipes. =
</TD></TR>
  <TR>
    <TH vAlign=3Dtop colSpan=3D3 align=3Dleft><PRE =
class=3Dmenu-comment>Recipe Syntax

</PRE></TH></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Splitting-Recip=
e-Lines">Splitting=20
      Recipe Lines</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Breaking long recipe lines for =
readability.=20
  </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables-in-Re=
cipes">Variables=20
      in Recipes</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Using <CODE>make</CODE> variables in =
recipes.=20
  </TD></TR>
  <TR>
    <TH vAlign=3Dtop colSpan=3D3 align=3Dleft><PRE =
class=3Dmenu-comment>Recipe Execution

</PRE></TH></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#One-Shell">One =

      Shell</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>One shell for all lines in a recipe. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Choosing-the-Sh=
ell">Choosing=20
      the Shell</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How <CODE>make</CODE> chooses the =
shell used to=20
      run recipes. </TD></TR>
  <TR>
    <TH vAlign=3Dtop colSpan=3D3 align=3Dleft><PRE =
class=3Dmenu-comment>Parallel Execution

</PRE></TH></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel-Output=
">Parallel=20
      Output</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Handling output during parallel =
execution </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel-Input"=
>Parallel=20
      Input</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Handling input during parallel =
execution </TD></TR>
  <TR>
    <TH vAlign=3Dtop colSpan=3D3 align=3Dleft><PRE =
class=3Dmenu-comment>Recursive Use of <CODE>make</CODE>

</PRE></TH></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#MAKE-Variable">=
MAKE=20
      Variable</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>The special effects of using=20
      =E2=80=98<SAMP>$(MAKE)</SAMP>=E2=80=99. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables_002fR=
ecursion">Variables/Recursion</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to communicate variables to a=20
      sub-<CODE>make</CODE>. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to communicate options to a=20
      sub-<CODE>make</CODE>. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#g_t_002dw-Optio=
n">-w=20
      Option</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How the =
=E2=80=98<SAMP>-w</SAMP>=E2=80=99 or=20
      =E2=80=98<SAMP>--print-directory</SAMP>=E2=80=99 option helps =
debug use of recursive=20
      <CODE>make</CODE> commands. </TD></TR>
  <TR>
    <TH vAlign=3Dtop colSpan=3D3 align=3Dleft><PRE =
class=3Dmenu-comment>How to Use Variables

</PRE></TH></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Reference">Refe=
rence</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to use the value of a variable. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavors">Flavor=
s</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Variables come in two flavors. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Advanced">Advan=
ced</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Advanced features for referencing a =
variable.=20
  </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Values">Values<=
/A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>All the ways variables get their =
values. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Setting">Settin=
g</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to set a variable in the makefile. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Appending">Appe=
nding</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to append more text to the old =
value of a=20
      variable. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Override-Direct=
ive">Override=20
      Directive</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to set a variable in the makefile =
even if=20
      the user has set it with a command argument. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Multi_002dLine"=
>Multi-Line</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>An alternate way to set a variable to =
a=20
      multi-line string. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Undefine-Direct=
ive">Undefine=20
      Directive</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to undefine a variable so that it =
appears as=20
      if it was never set. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Environment">En=
vironment</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Variable values can come from the =
environment.=20
    </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Target_002dspec=
ific">Target-specific</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Variable values can be defined on a =
per-target=20
      basis. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern_002dspe=
cific">Pattern-specific</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Target-specific variable values can be =
applied=20
      to a group of targets that match a pattern. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Suppressing-Inh=
eritance">Suppressing=20
      Inheritance</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Suppress inheritance of variables. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Variabl=
es">Special=20
      Variables</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Variables with special meaning or =
behavior.=20
  </TD></TR>
  <TR>
    <TH vAlign=3Dtop colSpan=3D3 align=3Dleft><PRE =
class=3Dmenu-comment>Advanced Features for Reference to Variables

</PRE></TH></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Substitution-Re=
fs">Substitution=20
      Refs</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Referencing a variable with =
substitutions on the=20
      value. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Computed-Names"=
>Computed=20
      Names</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Computing the name of the variable to =
refer to.=20
    </TD></TR>
  <TR>
    <TH vAlign=3Dtop colSpan=3D3 align=3Dleft><PRE =
class=3Dmenu-comment>Conditional Parts of Makefiles

</PRE></TH></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditional-Exa=
mple">Conditional=20
      Example</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Example of a conditional </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditional-Syn=
tax">Conditional=20
      Syntax</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>The syntax of conditionals. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Testing-Flags">=
Testing=20
      Flags</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Conditionals that test flags. =
</TD></TR>
  <TR>
    <TH vAlign=3Dtop colSpan=3D3 align=3Dleft><PRE =
class=3Dmenu-comment>Functions for Transforming Text

</PRE></TH></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Syntax-of-Funct=
ions">Syntax=20
      of Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to write a function call. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>General-purpose text manipulation =
functions.=20
  </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">File=20
      Name Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Functions for manipulating file names. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditional-Fun=
ctions">Conditional=20
      Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Functions that implement conditions. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Foreach-Functio=
n">Foreach=20
      Function</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Repeat some text with controlled =
variation.=20
  </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Function">=
File=20
      Function</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Write text to a file. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Call-Function">=
Call=20
      Function</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Expand a user-defined function. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Value-Function"=
>Value=20
      Function</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Return the un-expanded value of a =
variable.=20
  </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Eval-Function">=
Eval=20
      Function</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Evaluate the arguments as makefile =
syntax.=20
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Origin-Function=
">Origin=20
      Function</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Find where a variable got its value. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavor-Function=
">Flavor=20
      Function</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Find out the flavor of a variable. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Make-Control-Fu=
nctions">Make=20
      Control Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Functions that control how make runs. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Shell-Function"=
>Shell=20
      Function</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Substitute the output of a shell =
command. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Function"=
>Guile=20
      Function</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Use GNU Guile embedded scripting =
language.=20
</TD></TR>
  <TR>
    <TH vAlign=3Dtop colSpan=3D3 align=3Dleft><PRE =
class=3Dmenu-comment>How to Run <CODE>make</CODE>

</PRE></TH></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Argume=
nts">Makefile=20
      Arguments</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to specify which makefile to use. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Goals">Goals</A=
>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to use goal arguments to specify =
which parts=20
      of the makefile to use. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution">Instead=20
      of Execution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to use mode flags to specify what =
kind of=20
      thing to do with the recipes in the makefile other than simply =
execute=20
      them. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Avoiding-Compil=
ation">Avoiding=20
      Compilation</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to avoid recompiling certain =
files. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Overriding">Ove=
rriding</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to override a variable to specify =
an=20
      alternate compiler and other things. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Testing">Testin=
g</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to proceed past some errors, to =
test=20
      compilation. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Summary of Options </TD></TR>
  <TR>
    <TH vAlign=3Dtop colSpan=3D3 align=3Dleft><PRE =
class=3Dmenu-comment>Using Implicit Rules

</PRE></TH></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Using-Implicit"=
>Using=20
      Implicit</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to use an existing implicit rule =
to get the=20
      recipes for updating a file. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>A list of built-in rules. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to change what predefined rules =
do. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Chained-Rules">=
Chained=20
      Rules</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to use a chain of implicit rules. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Rules">=
Pattern=20
      Rules</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to define new implicit rules. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Last-Resort">La=
st=20
      Resort</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to define a recipe for rules which =
cannot=20
      find any. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Suffix-Rules">S=
uffix=20
      Rules</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>The old-fashioned style of implicit =
rule. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rule-S=
earch">Implicit=20
      Rule Search</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>The precise algorithm for applying =
implicit=20
      rules. </TD></TR>
  <TR>
    <TH vAlign=3Dtop colSpan=3D3 align=3Dleft><PRE =
class=3Dmenu-comment>Defining and Redefining Pattern Rules

</PRE></TH></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Intro">=
Pattern=20
      Intro</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>An introduction to pattern rules. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Example=
s">Pattern=20
      Examples</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Examples of pattern rules. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to use automatic variables in the =
recipe of=20
      implicit rules. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Match">=
Pattern=20
      Match</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How patterns match. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Match_002dAnyth=
ing-Rules">Match-Anything=20
      Rules</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Precautions you should take prior to =
defining=20
      rules that can match any target file whatever. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Canceling-Rules=
">Canceling=20
      Rules</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to override or cancel built-in =
rules. </TD></TR>
  <TR>
    <TH vAlign=3Dtop colSpan=3D3 align=3Dleft><PRE =
class=3Dmenu-comment>Using <CODE>make</CODE> to Update Archive Files

</PRE></TH></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Members=
">Archive=20
      Members</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Archive members as targets. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Update"=
>Archive=20
      Update</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>The implicit rule for archive member =
targets.=20
  </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Pitfall=
s">Archive=20
      Pitfalls</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Dangers to watch out for when using =
archives.=20
  </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Suffix-=
Rules">Archive=20
      Suffix Rules</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>You can write a special kind of suffix =
rule for=20
      updating archives. </TD></TR>
  <TR>
    <TH vAlign=3Dtop colSpan=3D3 align=3Dleft><PRE =
class=3Dmenu-comment>Implicit Rule for Archive Member Targets

</PRE></TH></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Symbols=
">Archive=20
      Symbols</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to update archive symbol =
directories. </TD></TR>
  <TR>
    <TH vAlign=3Dtop colSpan=3D3 align=3Dleft><PRE =
class=3Dmenu-comment>Extending GNU <CODE>make</CODE>

</PRE></TH></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Integrati=
on">Guile=20
      Integration</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Using Guile as an embedded scripting =
language.=20
    </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Loading-Objects=
">Loading=20
      Objects</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Loading dynamic objects as extensions. =
</TD></TR>
  <TR>
    <TH vAlign=3Dtop colSpan=3D3 align=3Dleft><PRE =
class=3Dmenu-comment>GNU Guile Integration

</PRE></TH></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Types">Gu=
ile=20
      Types</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Converting Guile types to =
<CODE>make</CODE>=20
      strings. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Interface=
">Guile=20
      Interface</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Invoking <CODE>make</CODE> functions =
from Guile.=20
    </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Example">=
Guile=20
      Example</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Example using Guile in =
<CODE>make</CODE>. </TD></TR>
  <TR>
    <TH vAlign=3Dtop colSpan=3D3 align=3Dleft><PRE =
class=3Dmenu-comment>Loading Dynamic Objects

</PRE></TH></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#load-Directive"=
>load=20
      Directive</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Loading dynamic objects as extensions. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Remaking-Loaded=
-Objects">Remaking=20
      Loaded Objects</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How loaded objects get remade. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Loaded-Object-A=
PI">Loaded=20
      Object API</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Programmatic interface for loaded =
objects.=20
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Loaded-Object-E=
xample">Loaded=20
      Object Example</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Example of a loaded object </TD></TR>
  <TR>
    <TH vAlign=3Dtop colSpan=3D3 align=3Dleft><PRE =
class=3Dmenu-comment></PRE></TH></TR></TBODY></TABLE>
<HR>
<A name=3DOverview></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Introduction"=20
rel=3Dnext>Introduction</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Top" =
rel=3Dprev>Top</A>,=20
Up: <A accessKey=3Du =
href=3D"http://www.gnu.org/software/make/manual/make.html#Top"=20
rel=3Dup>Top</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DOverview-of-make></A>
<H2 class=3Dchapter>1 Overview of <CODE>make</CODE></H2>
<P>The <CODE>make</CODE> utility automatically determines which pieces =
of a=20
large program need to be recompiled, and issues commands to recompile =
them. This=20
manual describes GNU <CODE>make</CODE>, which was implemented by Richard =

Stallman and Roland McGrath. Development since Version 3.76 has been =
handled by=20
Paul D. Smith. </P>
<P>GNU <CODE>make</CODE> conforms to section 6.2 of <CITE>IEEE Standard=20
1003.2-1992</CITE> (POSIX.2). <A name=3Dindex-POSIX></A><A=20
name=3Dindex-IEEE-Standard-1003_002e2></A><A=20
name=3Dindex-standards-conformance></A></P>
<P>Our examples show C programs, since they are most common, but you can =
use=20
<CODE>make</CODE> with any programming language whose compiler can be =
run with a=20
shell command. Indeed, <CODE>make</CODE> is not limited to programs. You =
can use=20
it to describe any task where some files must be updated automatically =
from=20
others whenever the others change. </P>
<TABLE class=3Dmenu border=3D0 cellSpacing=3D0>
  <TBODY>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D1=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Preparing">Prep=
aring</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Preparing and running =
<CODE>make</CODE>. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D2=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Reading">Readin=
g</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>On reading this text. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D3=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Bugs">Bugs</A>:=
</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Problems and bugs. =
</TD></TR></TBODY></TABLE>
<HR>
<A name=3DPreparing></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Reading"=20
rel=3Dnext>Reading</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Overview"=20
rel=3Dprev>Overview</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Overview"=20
rel=3Dup>Overview</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV>
<H4 class=3Dnode-heading>Preparing</H4><A =
name=3DPreparing-and-Running-Make></A>
<H3 class=3Dheading>Preparing and Running Make</H3>
<P>To prepare to use <CODE>make</CODE>, you must write a file called the =

<EM>makefile</EM> that describes the relationships among files in your =
program=20
and provides commands for updating each file. In a program, typically, =
the=20
executable file is updated from object files, which are in turn made by=20
compiling source files. </P>
<P>Once a suitable makefile exists, each time you change some source =
files, this=20
simple shell command: </P>
<DIV class=3Dexample><PRE class=3Dexample>make
</PRE></DIV>
<P>suffices to perform all necessary recompilations. The =
<CODE>make</CODE>=20
program uses the makefile data base and the last-modification times of =
the files=20
to decide which of the files need to be updated. For each of those =
files, it=20
issues the recipes recorded in the data base. </P>
<P>You can provide command line arguments to <CODE>make</CODE> to =
control which=20
files should be recompiled, or how. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Running">How =
to Run=20
<CODE>make</CODE></A>. </P>
<HR>
<A name=3DReading></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Bugs" =
rel=3Dnext>Bugs</A>,=20
Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Preparing"=20
rel=3Dprev>Preparing</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Overview"=20
rel=3Dup>Overview</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DHow-to-Read-This-Manual></A>
<H3 class=3Dsection>1.1 How to Read This Manual</H3>
<P>If you are new to <CODE>make</CODE>, or are looking for a general=20
introduction, read the first few sections of each chapter, skipping the =
later=20
sections. In each chapter, the first few sections contain introductory =
or=20
general information and the later sections contain specialized or =
technical=20
information. The exception is the second chapter, <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Introduction">A=
n=20
Introduction to Makefiles</A>, all of which is introductory. </P>
<P>If you are familiar with other <CODE>make</CODE> programs, see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Features">Featu=
res of=20
GNU <CODE>make</CODE></A>, which lists the enhancements GNU =
<CODE>make</CODE>=20
has, and <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Missing">Incomp=
atibilities=20
and Missing Features</A>, which explains the few things GNU =
<CODE>make</CODE>=20
lacks that others have. </P>
<P>For a quick summary, see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
Summary</A>, <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Quick-Reference=
">Quick=20
Reference</A>, and <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
">Special=20
Targets</A>. </P>
<HR>
<A name=3DBugs></A>
<DIV class=3Dheader>
<P>Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Reading"=20
rel=3Dprev>Reading</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Overview"=20
rel=3Dup>Overview</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DProblems-and-Bugs></A>
<H3 class=3Dsection>1.2 Problems and Bugs</H3><A =
name=3Dindex-reporting-bugs></A><A=20
name=3Dindex-bugs_002c-reporting></A><A=20
name=3Dindex-problems-and-bugs_002c-reporting></A>
<P>If you have problems with GNU <CODE>make</CODE> or think =
you=E2=80=99ve found a bug,=20
please report it to the developers; we cannot promise to do anything but =
we=20
might well want to fix it. </P>
<P>Before reporting a bug, make sure you=E2=80=99ve actually found a =
real bug. Carefully=20
reread the documentation and see if it really says you can do what =
you=E2=80=99re trying=20
to do. If it=E2=80=99s not clear whether you should be able to do =
something or not,=20
report that too; it=E2=80=99s a bug in the documentation! </P>
<P>Before reporting a bug or trying to fix it yourself, try to isolate =
it to the=20
smallest possible makefile that reproduces the problem. Then send us the =

makefile and the exact results <CODE>make</CODE> gave you, including any =
error=20
or warning messages. Please don=E2=80=99t paraphrase these messages: =
it=E2=80=99s best to cut=20
and paste them into your report. When generating this small makefile, be =
sure to=20
not use any non-free or unusual tools in your recipes: you can almost =
always=20
emulate what such a tool would do with simple shell commands. Finally, =
be sure=20
to explain what you expected to occur; this will help us decide whether =
the=20
problem was really in the documentation. </P>
<P>Once you have a precise problem you can report it in one of two ways. =
Either=20
send electronic mail to: </P>
<DIV class=3Dexample><PRE class=3Dexample>    bug-make@gnu.org
</PRE></DIV>
<P>or use our Web-based project management tool, at: </P>
<DIV class=3Dexample><PRE class=3Dexample>    =
http://savannah.gnu.org/projects/make/
</PRE></DIV>
<P>In addition to the information above, please be careful to include =
the=20
version number of <CODE>make</CODE> you are using. You can get this =
information=20
with the command =E2=80=98<SAMP>make --version</SAMP>=E2=80=99. Be sure =
also to include the type=20
of machine and operating system you are using. One way to obtain this=20
information is by looking at the final lines of output from the command=20
=E2=80=98<SAMP>make --help</SAMP>=E2=80=99. </P>
<HR>
<A name=3DIntroduction></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefiles"=20
rel=3Dnext>Makefiles</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Overview"=20
rel=3Dprev>Overview</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Top" =
rel=3Dup>Top</A>=20
&nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DAn-Introduction-to-Makefiles></A>
<H2 class=3Dchapter>2 An Introduction to Makefiles</H2>
<P>You need a file called a <EM>makefile</EM> to tell <CODE>make</CODE> =
what to=20
do. Most often, the makefile tells <CODE>make</CODE> how to compile and =
link a=20
program. <A name=3Dindex-makefile></A></P>
<P>In this chapter, we will discuss a simple makefile that describes how =
to=20
compile and link a text editor which consists of eight C source files =
and three=20
header files. The makefile can also tell <CODE>make</CODE> how to run=20
miscellaneous commands when explicitly asked (for example, to remove =
certain=20
files as a clean-up operation). To see a more complex example of a =
makefile, see=20
<A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Complex-Makefil=
e">Complex=20
Makefile</A>. </P>
<P>When <CODE>make</CODE> recompiles the editor, each changed C source =
file must=20
be recompiled. If a header file has changed, each C source file that =
includes=20
the header file must be recompiled to be safe. Each compilation produces =
an=20
object file corresponding to the source file. Finally, if any source =
file has=20
been recompiled, all the object files, whether newly made or saved from =
previous=20
compilations, must be linked together to produce the new executable =
editor. <A=20
name=3Dindex-recompilation></A><A name=3Dindex-editor></A></P>
<TABLE class=3Dmenu border=3D0 cellSpacing=3D0>
  <TBODY>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D1=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rule-Introducti=
on">Rule=20
      Introduction</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>What a rule looks like. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D2=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Simple-Makefile=
">Simple=20
      Makefile</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>A simple makefile. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D3=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#How-Make-Works"=
>How=20
      Make Works</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How <CODE>make</CODE> processes this =
makefile.=20
    </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D4=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables-Simpl=
ify">Variables=20
      Simplify</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Variables make makefiles simpler. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D5=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#make-Deduces">m=
ake=20
      Deduces</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Letting <CODE>make</CODE> deduce the =
recipes.=20
  </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D6=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Combine-By-Prer=
equisite">Combine=20
      By Prerequisite</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Another style of makefile. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D7=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Cleanup">Cleanu=
p</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Rules for cleaning the directory.=20
</TD></TR></TBODY></TABLE>
<HR>
<A name=3DRule-Introduction></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Simple-Makefile=
"=20
rel=3Dnext>Simple Makefile</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Introduction"=20
rel=3Dprev>Introduction</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Introduction"=20
rel=3Dup>Introduction</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DWhat-a-Rule-Looks-Like></A>
<H3 class=3Dsection>2.1 What a Rule Looks Like</H3><A=20
name=3Dindex-rule_002c-introduction-to></A><A=20
name=3Dindex-makefile-rule-parts></A><A =
name=3Dindex-parts-of-makefile-rule></A>
<P>A simple makefile consists of =E2=80=9Crules=E2=80=9D with the =
following shape: </P><A=20
name=3Dindex-targets_002c-introduction-to></A><A=20
name=3Dindex-prerequisites_002c-introduction-to></A><A=20
name=3Dindex-recipes_002c-introduction-to></A>
<DIV class=3Dexample><PRE class=3Dexample><VAR>target</VAR> =E2=80=A6 : =
<VAR>prerequisites</VAR> =E2=80=A6
        <VAR>recipe</VAR>
        =E2=80=A6
        =E2=80=A6
</PRE></DIV>
<P>A <EM>target</EM> is usually the name of a file that is generated by =
a=20
program; examples of targets are executable or object files. A target =
can also=20
be the name of an action to carry out, such as =
=E2=80=98<SAMP>clean</SAMP>=E2=80=99 (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Phony-Targets">=
Phony=20
Targets</A>). </P>
<P>A <EM>prerequisite</EM> is a file that is used as input to create the =
target.=20
A target often depends on several files. </P><A =
name=3Dindex-tabs-in-rules></A>
<P>A <EM>recipe</EM> is an action that <CODE>make</CODE> carries out. A =
recipe=20
may have more than one command, either on the same line or each on its =
own line.=20
<STRONG>Please note:</STRONG> you need to put a tab character at the =
beginning=20
of every recipe line! This is an obscurity that catches the unwary. If =
you=20
prefer to prefix your recipes with a character other than tab, you can =
set the=20
<CODE>.RECIPEPREFIX</CODE> variable to an alternate character (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Variabl=
es">Special=20
Variables</A>). </P>
<P>Usually a recipe is in a rule with prerequisites and serves to create =
a=20
target file if any of the prerequisites change. However, the rule that =
specifies=20
a recipe for the target need not have prerequisites. For example, the =
rule=20
containing the delete command associated with the target =
=E2=80=98<SAMP>clean</SAMP>=E2=80=99=20
does not have prerequisites. </P>
<P>A <EM>rule</EM>, then, explains how and when to remake certain files =
which=20
are the targets of the particular rule. <CODE>make</CODE> carries out =
the recipe=20
on the prerequisites to create or update the target. A rule can also =
explain how=20
and when to carry out an action. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Rules">Writing =

Rules</A>. </P>
<P>A makefile may contain other text besides rules, but a simple =
makefile need=20
only contain rules. Rules may look somewhat more complicated than shown =
in this=20
template, but all fit the pattern more or less. </P>
<HR>
<A name=3DSimple-Makefile></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#How-Make-Works"=
=20
rel=3Dnext>How Make Works</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Rule-Introducti=
on"=20
rel=3Dprev>Rule Introduction</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Introduction"=20
rel=3Dup>Introduction</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DA-Simple-Makefile></A>
<H3 class=3Dsection>2.2 A Simple Makefile</H3><A =
name=3Dindex-simple-makefile></A><A=20
name=3Dindex-makefile_002c-simple></A>
<P>Here is a straightforward makefile that describes the way an =
executable file=20
called <CODE>edit</CODE> depends on eight object files which, in turn, =
depend on=20
eight C source and three header files. </P>
<P>In this example, all the C files include <SAMP>defs.h</SAMP>, but =
only those=20
defining editing commands include <SAMP>command.h</SAMP>, and only low =
level=20
files that change the editor buffer include <SAMP>buffer.h</SAMP>. </P>
<DIV class=3Dexample><PRE class=3Dexample>edit : main.o kbd.o command.o =
display.o \
       insert.o search.o files.o utils.o
        cc -o edit main.o kbd.o command.o display.o \
                   insert.o search.o files.o utils.o

main.o : main.c defs.h
        cc -c main.c
kbd.o : kbd.c defs.h command.h
        cc -c kbd.c
command.o : command.c defs.h command.h
        cc -c command.c
display.o : display.c defs.h buffer.h
        cc -c display.c
insert.o : insert.c defs.h buffer.h
        cc -c insert.c
search.o : search.c defs.h buffer.h
        cc -c search.c
files.o : files.c defs.h buffer.h command.h
        cc -c files.c
utils.o : utils.c defs.h
        cc -c utils.c
clean :
        rm edit main.o kbd.o command.o display.o \
           insert.o search.o files.o utils.o
</PRE></DIV>
<P>We split each long line into two lines using backslash/newline; this =
is like=20
using one long line, but is easier to read. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Splitting-Lines=
">Splitting=20
Long Lines</A>. <A name=3Dindex-continuation-lines></A><A=20
name=3Dindex-_005c-_0028backslash_0029_002c-for-continuation-lines></A><A=
=20
name=3Dindex-backslash-_0028_005c_0029_002c-for-continuation-lines></A><A=
=20
name=3Dindex-quoting-newline_002c-in-makefile></A><A=20
name=3Dindex-newline_002c-quoting_002c-in-makefile></A></P>
<P>To use this makefile to create the executable file called =
<SAMP>edit</SAMP>,=20
type: </P>
<DIV class=3Dexample><PRE class=3Dexample>make
</PRE></DIV>
<P>To use this makefile to delete the executable file and all the object =
files=20
from the directory, type: </P>
<DIV class=3Dexample><PRE class=3Dexample>make clean
</PRE></DIV>
<P>In the example makefile, the targets include the executable file=20
=E2=80=98<SAMP>edit</SAMP>=E2=80=99, and the object files =
=E2=80=98<SAMP>main.o</SAMP>=E2=80=99 and=20
=E2=80=98<SAMP>kbd.o</SAMP>=E2=80=99. The prerequisites are files such =
as =E2=80=98<SAMP>main.c</SAMP>=E2=80=99=20
and =E2=80=98<SAMP>defs.h</SAMP>=E2=80=99. In fact, each =
=E2=80=98<SAMP>.o</SAMP>=E2=80=99 file is both a target=20
and a prerequisite. Recipes include =E2=80=98<SAMP>cc&nbsp;<SPAN=20
class=3Dnolinebreak>-c</SPAN>&nbsp;main.c</SAMP>=E2=80=99<!-- /@w --> =
and=20
=E2=80=98<SAMP>cc&nbsp;<SPAN =
class=3Dnolinebreak>-c</SPAN>&nbsp;kbd.c</SAMP>=E2=80=99<!-- /@w -->.=20
</P>
<P>When a target is a file, it needs to be recompiled or relinked if any =
of its=20
prerequisites change. In addition, any prerequisites that are themselves =

automatically generated should be updated first. In this example,=20
<SAMP>edit</SAMP> depends on each of the eight object files; the object =
file=20
<SAMP>main.o</SAMP> depends on the source file <SAMP>main.c</SAMP> and =
on the=20
header file <SAMP>defs.h</SAMP>. </P>
<P>A recipe may follow each line that contains a target and =
prerequisites. These=20
recipes say how to update the target file. A tab character (or whatever=20
character is specified by the <CODE>.RECIPEPREFIX</CODE> variable; see =
<A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Variabl=
es">Special=20
Variables</A>) must come at the beginning of every line in the recipe to =

distinguish recipes from other lines in the makefile. (Bear in mind that =

<CODE>make</CODE> does not know anything about how the recipes work. It =
is up to=20
you to supply recipes that will update the target file properly. All=20
<CODE>make</CODE> does is execute the recipe you have specified when the =
target=20
file needs to be updated.) <A name=3Dindex-recipe></A></P>
<P>The target =E2=80=98<SAMP>clean</SAMP>=E2=80=99 is not a file, but =
merely the name of an=20
action. Since you normally do not want to carry out the actions in this =
rule,=20
=E2=80=98<SAMP>clean</SAMP>=E2=80=99 is not a prerequisite of any other =
rule. Consequently,=20
<CODE>make</CODE> never does anything with it unless you tell it =
specifically.=20
Note that this rule not only is not a prerequisite, it also does not =
have any=20
prerequisites, so the only purpose of the rule is to run the specified =
recipe.=20
Targets that do not refer to files but are just actions are called =
<EM>phony=20
targets</EM>. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Phony-Targets">=
Phony=20
Targets</A>, for information about this kind of target. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Errors">Errors =
in=20
Recipes</A>, to see how to cause <CODE>make</CODE> to ignore errors from =

<CODE>rm</CODE> or any other command. <A =
name=3Dindex-clean-target></A><A=20
name=3Dindex-rm-_0028shell-command_0029></A></P>
<HR>
<A name=3DHow-Make-Works></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables-Simpl=
ify"=20
rel=3Dnext>Variables Simplify</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Simple-Makefile=
"=20
rel=3Dprev>Simple Makefile</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Introduction"=20
rel=3Dup>Introduction</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DHow-make-Processes-a-Makefile></A>
<H3 class=3Dsection>2.3 How <CODE>make</CODE> Processes a =
Makefile</H3><A=20
name=3Dindex-processing-a-makefile></A><A=20
name=3Dindex-makefile_002c-how-make-processes></A>
<P>By default, <CODE>make</CODE> starts with the first target (not =
targets whose=20
names start with =E2=80=98<SAMP>.</SAMP>=E2=80=99). This is called the =
<EM>default goal</EM>.=20
(<EM>Goals</EM> are the targets that <CODE>make</CODE> strives =
ultimately to=20
update. You can override this behavior using the command line (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Goals">Argument=
s to=20
Specify the Goals</A>) or with the <CODE>.DEFAULT_GOAL</CODE> special =
variable=20
(see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Variabl=
es">Other=20
Special Variables</A>). <A name=3Dindex-default-goal></A><A=20
name=3Dindex-goal_002c-default></A><A name=3Dindex-goal></A></P>
<P>In the simple example of the previous section, the default goal is to =
update=20
the executable program <SAMP>edit</SAMP>; therefore, we put that rule =
first.=20
</P>
<P>Thus, when you give the command: </P>
<DIV class=3Dexample><PRE class=3Dexample>make
</PRE></DIV>
<P><CODE>make</CODE> reads the makefile in the current directory and =
begins by=20
processing the first rule. In the example, this rule is for relinking=20
<SAMP>edit</SAMP>; but before <CODE>make</CODE> can fully process this =
rule, it=20
must process the rules for the files that <SAMP>edit</SAMP> depends on, =
which in=20
this case are the object files. Each of these files is processed =
according to=20
its own rule. These rules say to update each =
=E2=80=98<SAMP>.o</SAMP>=E2=80=99 file by compiling=20
its source file. The recompilation must be done if the source file, or =
any of=20
the header files named as prerequisites, is more recent than the object =
file, or=20
if the object file does not exist. </P>
<P>The other rules are processed because their targets appear as =
prerequisites=20
of the goal. If some other rule is not depended on by the goal (or =
anything it=20
depends on, etc.), that rule is not processed, unless you tell =
<CODE>make</CODE>=20
to do so (with a command such as <CODE>make&nbsp;clean</CODE><!-- /@w =
-->). </P>
<P>Before recompiling an object file, <CODE>make</CODE> considers =
updating its=20
prerequisites, the source file and header files. This makefile does not =
specify=20
anything to be done for them=E2=80=94the =
=E2=80=98<SAMP>.c</SAMP>=E2=80=99 and =E2=80=98<SAMP>.h</SAMP>=E2=80=99 =
files=20
are not the targets of any rules=E2=80=94so <CODE>make</CODE> does =
nothing for these=20
files. But <CODE>make</CODE> would update automatically generated C =
programs,=20
such as those made by Bison or Yacc, by their own rules at this time. =
</P>
<P>After recompiling whichever object files need it, <CODE>make</CODE> =
decides=20
whether to relink <SAMP>edit</SAMP>. This must be done if the file=20
<SAMP>edit</SAMP> does not exist, or if any of the object files are =
newer than=20
it. If an object file was just recompiled, it is now newer than=20
<SAMP>edit</SAMP>, so <SAMP>edit</SAMP> is relinked. <A=20
name=3Dindex-relinking></A></P>
<P>Thus, if we change the file <SAMP>insert.c</SAMP> and run =
<CODE>make</CODE>,=20
<CODE>make</CODE> will compile that file to update =
<SAMP>insert.o</SAMP>, and=20
then link <SAMP>edit</SAMP>. If we change the file =
<SAMP>command.h</SAMP> and=20
run <CODE>make</CODE>, <CODE>make</CODE> will recompile the object files =

<SAMP>kbd.o</SAMP>, <SAMP>command.o</SAMP> and <SAMP>files.o</SAMP> and =
then=20
link the file <SAMP>edit</SAMP>. </P>
<HR>
<A name=3DVariables-Simplify></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#make-Deduces"=20
rel=3Dnext>make Deduces</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#How-Make-Works"=
=20
rel=3Dprev>How Make Works</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Introduction"=20
rel=3Dup>Introduction</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DVariables-Make-Makefiles-Simpler></A>
<H3 class=3Dsection>2.4 Variables Make Makefiles Simpler</H3><A=20
name=3Dindex-variables></A><A =
name=3Dindex-simplifying-with-variables></A>
<P>In our example, we had to list all the object files twice in the rule =
for=20
<SAMP>edit</SAMP> (repeated here): </P>
<DIV class=3Dexample><PRE class=3Dexample>edit : main.o kbd.o command.o =
display.o \
              insert.o search.o files.o utils.o
        cc -o edit main.o kbd.o command.o display.o \
                   insert.o search.o files.o utils.o
</PRE></DIV><A name=3Dindex-objects></A>
<P>Such duplication is error-prone; if a new object file is added to the =
system,=20
we might add it to one list and forget the other. We can eliminate the =
risk and=20
simplify the makefile by using a variable. <EM>Variables</EM> allow a =
text=20
string to be defined once and substituted in multiple places later (see =
<A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Using-Variables=
">How to=20
Use Variables</A>). </P><A name=3Dindex-OBJECTS></A><A =
name=3Dindex-objs></A><A=20
name=3Dindex-OBJS></A><A name=3Dindex-obj></A><A name=3Dindex-OBJ></A>
<P>It is standard practice for every makefile to have a variable named=20
<CODE>objects</CODE>, <CODE>OBJECTS</CODE>, <CODE>objs</CODE>,=20
<CODE>OBJS</CODE>, <CODE>obj</CODE>, or <CODE>OBJ</CODE> which is a list =
of all=20
object file names. We would define such a variable <CODE>objects</CODE> =
with a=20
line like this in the makefile: </P>
<DIV class=3Dexample><PRE class=3Dexample>objects =3D main.o kbd.o =
command.o display.o \
          insert.o search.o files.o utils.o
</PRE></DIV>
<P>Then, each place we want to put a list of the object file names, we =
can=20
substitute the variable=E2=80=99s value by writing =
=E2=80=98<SAMP>$(objects)</SAMP>=E2=80=99 (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Using-Variables=
">How to=20
Use Variables</A>). </P>
<P>Here is how the complete simple makefile looks when you use a =
variable for=20
the object files: </P>
<DIV class=3Dexample><PRE class=3Dexample>objects =3D main.o kbd.o =
command.o display.o \
          insert.o search.o files.o utils.o

edit : $(objects)
        cc -o edit $(objects)
main.o : main.c defs.h
        cc -c main.c
kbd.o : kbd.c defs.h command.h
        cc -c kbd.c
command.o : command.c defs.h command.h
        cc -c command.c
display.o : display.c defs.h buffer.h
        cc -c display.c
insert.o : insert.c defs.h buffer.h
        cc -c insert.c
search.o : search.c defs.h buffer.h
        cc -c search.c
files.o : files.c defs.h buffer.h command.h
        cc -c files.c
utils.o : utils.c defs.h
        cc -c utils.c
clean :
        rm edit $(objects)
</PRE></DIV>
<HR>
<A name=3Dmake-Deduces></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Combine-By-Prer=
equisite"=20
rel=3Dnext>Combine By Prerequisite</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables-Simpl=
ify"=20
rel=3Dprev>Variables Simplify</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Introduction"=20
rel=3Dup>Introduction</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DLetting-make-Deduce-the-Recipes></A>
<H3 class=3Dsection>2.5 Letting <CODE>make</CODE> Deduce the =
Recipes</H3><A=20
name=3Dindex-deducing-recipes-_0028implicit-rules_0029></A><A=20
name=3Dindex-implicit-rule_002c-introduction-to></A><A=20
name=3Dindex-rule_002c-implicit_002c-introduction-to></A>
<P>It is not necessary to spell out the recipes for compiling the =
individual C=20
source files, because <CODE>make</CODE> can figure them out: it has an=20
<EM>implicit rule</EM> for updating a =E2=80=98<SAMP>.o</SAMP>=E2=80=99 =
file from a=20
correspondingly named =E2=80=98<SAMP>.c</SAMP>=E2=80=99 file using a =
=E2=80=98<SAMP>cc -c</SAMP>=E2=80=99=20
command. For example, it will use the recipe =E2=80=98<SAMP>cc -c main.c =
-o=20
main.o</SAMP>=E2=80=99 to compile <SAMP>main.c</SAMP> into =
<SAMP>main.o</SAMP>. We can=20
therefore omit the recipes from the rules for the object files. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rules"=
>Using=20
Implicit Rules</A>. </P>
<P>When a =E2=80=98<SAMP>.c</SAMP>=E2=80=99 file is used automatically =
in this way, it is also=20
automatically added to the list of prerequisites. We can therefore omit =
the=20
=E2=80=98<SAMP>.c</SAMP>=E2=80=99 files from the prerequisites, provided =
we omit the recipe.=20
</P>
<P>Here is the entire example, with both of these changes, and a =
variable=20
<CODE>objects</CODE> as suggested above: </P>
<DIV class=3Dexample><PRE class=3Dexample>objects =3D main.o kbd.o =
command.o display.o \
          insert.o search.o files.o utils.o

edit : $(objects)
        cc -o edit $(objects)

main.o : defs.h
kbd.o : defs.h command.h
command.o : defs.h command.h
display.o : defs.h buffer.h
insert.o : defs.h buffer.h
search.o : defs.h buffer.h
files.o : defs.h buffer.h command.h
utils.o : defs.h

.PHONY : clean
clean :
        rm edit $(objects)
</PRE></DIV>
<P>This is how we would write the makefile in actual practice. (The=20
complications associated with =E2=80=98<SAMP>clean</SAMP>=E2=80=99 are =
described elsewhere. See=20
<A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Phony-Targets">=
Phony=20
Targets</A>, and <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Errors">Errors =
in=20
Recipes</A>.) </P>
<P>Because implicit rules are so convenient, they are important. You =
will see=20
them used frequently. </P>
<HR>
<A name=3DCombine-By-Prerequisite></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Cleanup"=20
rel=3Dnext>Cleanup</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#make-Deduces"=20
rel=3Dprev>make Deduces</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Introduction"=20
rel=3Dup>Introduction</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DAnother-Style-of-Makefile></A>
<H3 class=3Dsection>2.6 Another Style of Makefile</H3><A=20
name=3Dindex-combining-rules-by-prerequisite></A>
<P>When the objects of a makefile are created only by implicit rules, an =

alternative style of makefile is possible. In this style of makefile, =
you group=20
entries by their prerequisites instead of by their targets. Here is what =
one=20
looks like: </P>
<DIV class=3Dexample><PRE class=3Dexample>objects =3D main.o kbd.o =
command.o display.o \
          insert.o search.o files.o utils.o

edit : $(objects)
        cc -o edit $(objects)

$(objects) : defs.h
kbd.o command.o files.o : command.h
display.o insert.o search.o files.o : buffer.h
</PRE></DIV>
<P>Here <SAMP>defs.h</SAMP> is given as a prerequisite of all the object =
files;=20
<SAMP>command.h</SAMP> and <SAMP>buffer.h</SAMP> are prerequisites of =
the=20
specific object files listed for them. </P>
<P>Whether this is better is a matter of taste: it is more compact, but =
some=20
people dislike it because they find it clearer to put all the =
information about=20
each target in one place. </P>
<HR>
<A name=3DCleanup></A>
<DIV class=3Dheader>
<P>Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Combine-By-Prer=
equisite"=20
rel=3Dprev>Combine By Prerequisite</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Introduction"=20
rel=3Dup>Introduction</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DRules-for-Cleaning-the-Directory></A>
<H3 class=3Dsection>2.7 Rules for Cleaning the Directory</H3><A=20
name=3Dindex-cleaning-up></A><A =
name=3Dindex-removing_002c-to-clean-up></A>
<P>Compiling a program is not the only thing you might want to write =
rules for.=20
Makefiles commonly tell how to do a few other things besides compiling a =

program: for example, how to delete all the object files and executables =
so that=20
the directory is =E2=80=98<SAMP>clean</SAMP>=E2=80=99. </P><A =
name=3Dindex-clean-target-1></A>
<P>Here is how we could write a <CODE>make</CODE> rule for cleaning our =
example=20
editor: </P>
<DIV class=3Dexample><PRE class=3Dexample>clean:
        rm edit $(objects)
</PRE></DIV>
<P>In practice, we might want to write the rule in a somewhat more =
complicated=20
manner to handle unanticipated situations. We would do this: </P>
<DIV class=3Dexample><PRE class=3Dexample>.PHONY : clean
clean :
        -rm edit $(objects)
</PRE></DIV>
<P>This prevents <CODE>make</CODE> from getting confused by an actual =
file=20
called <SAMP>clean</SAMP> and causes it to continue in spite of errors =
from=20
<CODE>rm</CODE>. (See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Phony-Targets">=
Phony=20
Targets</A>, and <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Errors">Errors =
in=20
Recipes</A>.) </P>
<P>A rule such as this should not be placed at the beginning of the =
makefile,=20
because we do not want it to run by default! Thus, in the example =
makefile, we=20
want the rule for <CODE>edit</CODE>, which recompiles the editor, to =
remain the=20
default goal. </P>
<P>Since <CODE>clean</CODE> is not a prerequisite of <CODE>edit</CODE>, =
this=20
rule will not run at all if we give the command =
=E2=80=98<SAMP>make</SAMP>=E2=80=99 with no=20
arguments. In order to make the rule run, we have to type =
=E2=80=98<SAMP>make=20
clean</SAMP>=E2=80=99. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Running">How =
to Run=20
<CODE>make</CODE></A>. </P>
<HR>
<A name=3DMakefiles></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Rules"=20
rel=3Dnext>Rules</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Introduction"=20
rel=3Dprev>Introduction</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Top" =
rel=3Dup>Top</A>=20
&nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DWriting-Makefiles></A>
<H2 class=3Dchapter>3 Writing Makefiles</H2><A=20
name=3Dindex-makefile_002c-how-to-write></A>
<P>The information that tells <CODE>make</CODE> how to recompile a =
system comes=20
from reading a data base called the <EM>makefile</EM>. </P>
<TABLE class=3Dmenu border=3D0 cellSpacing=3D0>
  <TBODY>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D1=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Conten=
ts">Makefile=20
      Contents</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>What makefiles contain. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D2=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Names"=
>Makefile=20
      Names</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to name your makefile. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D3=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Include">Includ=
e</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How one makefile can use another =
makefile.=20
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D4=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#MAKEFILES-Varia=
ble">MAKEFILES=20
      Variable</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>The environment can specify extra =
makefiles.=20
  </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D5=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Remaking-Makefi=
les">Remaking=20
      Makefiles</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How makefiles get remade. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D6=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Overriding-Make=
files">Overriding=20
      Makefiles</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to override part of one makefile =
with=20
      another makefile. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D7=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Reading-Makefil=
es">Reading=20
      Makefiles</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How makefiles are parsed. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D8=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Secondary-Expan=
sion">Secondary=20
      Expansion</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How and when secondary expansion is =
performed.=20
    </TD></TR></TBODY></TABLE>
<HR>
<A name=3DMakefile-Contents></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Names"=
=20
rel=3Dnext>Makefile Names</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefiles"=20
rel=3Dprev>Makefiles</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefiles"=20
rel=3Dup>Makefiles</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DWhat-Makefiles-Contain></A>
<H3 class=3Dsection>3.1 What Makefiles Contain</H3>
<P>Makefiles contain five kinds of things: <EM>explicit rules</EM>, =
<EM>implicit=20
rules</EM>, <EM>variable definitions</EM>, <EM>directives</EM>, and=20
<EM>comments</EM>. Rules, variables, and directives are described at =
length in=20
later chapters. </P>
<UL>
  <LI><A name=3Dindex-rule_002c-explicit_002c-definition-of></A><A=20
  name=3Dindex-explicit-rule_002c-definition-of></A>An <EM>explicit =
rule</EM> says=20
  when and how to remake one or more files, called the rule=E2=80=99s =
<EM>targets</EM>.=20
  It lists the other files that the targets depend on, called the=20
  <EM>prerequisites</EM> of the target, and may also give a recipe to =
use to=20
  create or update the targets. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rules">Writing =

  Rules</A>. </LI>
  <LI><A name=3Dindex-rule_002c-implicit_002c-definition-of></A><A=20
  name=3Dindex-implicit-rule_002c-definition-of></A>An <EM>implicit =
rule</EM> says=20
  when and how to remake a class of files based on their names. It =
describes how=20
  a target may depend on a file with a name similar to the target and =
gives a=20
  recipe to create or update such a target. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rules"=
>Using=20
  Implicit Rules</A>. </LI>
  <LI><A name=3Dindex-variable-definition></A>A <EM>variable =
definition</EM> is a=20
  line that specifies a text string value for a variable that can be =
substituted=20
  into the text later. The simple makefile example shows a variable =
definition=20
  for <CODE>objects</CODE> as a list of all object files (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables-Simpl=
ify">Variables=20
  Make Makefiles Simpler</A>). </LI>
  <LI><A name=3Dindex-directive></A>A <EM>directive</EM> is an =
instruction for=20
  <CODE>make</CODE> to do something special while reading the makefile. =
These=20
  include:=20
  <UL>
    <LI>Reading another makefile (see <A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Include">Includ=
ing=20
    Other Makefiles</A>). </LI>
    <LI>Deciding (based on the values of variables) whether to use or =
ignore a=20
    part of the makefile (see <A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditionals">C=
onditional=20
    Parts of Makefiles</A>). </LI>
    <LI>Defining a variable from a verbatim string containing multiple =
lines=20
    (see <A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Multi_002dLine"=
>Defining=20
    Multi-Line Variables</A>). </LI></UL></LI>
  <LI><A name=3Dindex-comments_002c-in-makefile></A><A=20
  =
name=3Dindex-_0023-_0028comments_0029_002c-in-makefile></A>=E2=80=98<SAMP=
>#</SAMP>=E2=80=99 in a=20
  line of a makefile starts a <EM>comment</EM>. It and the rest of the =
line are=20
  ignored, except that a trailing backslash not escaped by another =
backslash=20
  will continue the comment across multiple lines. A line containing =
just a=20
  comment (with perhaps spaces before it) is effectively blank, and is =
ignored.=20
  If you want a literal <CODE>#</CODE>, escape it with a backslash =
(e.g.,=20
  <CODE>\#</CODE>). Comments may appear on any line in the makefile, =
although=20
  they are treated specially in certain situations.=20
  <P>You cannot use comments within variable references or function =
calls: any=20
  instance of <CODE>#</CODE> will be treated literally (rather than as =
the start=20
  of a comment) inside a variable reference or function call. </P>
  <P>Comments within a recipe are passed to the shell, just as with any =
other=20
  recipe text. The shell decides how to interpret it: whether or not =
this is a=20
  comment is up to the shell. </P>
  <P>Within a <CODE>define</CODE> directive, comments are not ignored =
during the=20
  definition of the variable, but rather kept intact in the value of the =

  variable. When the variable is expanded they will either be treated as =

  <CODE>make</CODE> comments or as recipe text, depending on the context =
in=20
  which the variable is evaluated. </P></LI></UL>
<TABLE class=3Dmenu border=3D0 cellSpacing=3D0>
  <TBODY>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D1=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Splitting-Lines=
">Splitting=20
      Lines</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Splitting long lines in makefiles=20
</TD></TR></TBODY></TABLE>
<HR>
<A name=3DSplitting-Lines></A>
<DIV class=3Dheader>
<P>Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Conten=
ts"=20
rel=3Dprev>Makefile Contents</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Conten=
ts"=20
rel=3Dup>Makefile Contents</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DSplitting-Long-Lines></A>
<H4 class=3Dsubsection>3.1.1 Splitting Long Lines</H4><A=20
name=3Dindex-splitting-long-lines></A><A=20
name=3Dindex-long-lines_002c-splitting></A><A=20
name=3Dindex-backslash-_0028_005c_0029_002c-to-quote-newlines></A>
<P>Makefiles use a =E2=80=9Cline-based=E2=80=9D syntax in which the =
newline character is special=20
and marks the end of a statement. GNU <CODE>make</CODE> has no limit on =
the=20
length of a statement line, up to the amount of memory in your computer. =
</P>
<P>However, it is difficult to read lines which are too long to display =
without=20
wrapping or scrolling. So, you can format your makefiles for readability =
by=20
adding newlines into the middle of a statement: you do this by escaping =
the=20
internal newlines with a backslash (<CODE>\</CODE>) character. Where we =
need to=20
make a distinction we will refer to =E2=80=9Cphysical lines=E2=80=9D as =
a single line ending=20
with a newline (regardless of whether it is escaped) and a =
=E2=80=9Clogical line=E2=80=9D being=20
a complete statement including all escaped newlines up to the first =
non-escaped=20
newline. </P>
<P>The way in which backslash/newline combinations are handled depends =
on=20
whether the statement is a recipe line or a non-recipe line. Handling of =

backslash/newline in a recipe line is discussed later (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Splitting-Recip=
e-Lines">Splitting=20
Recipe Lines</A>). </P>
<P>Outside of recipe lines, backslash/newlines are converted into a =
single space=20
character. Once that is done, all whitespace around the =
backslash/newline is=20
condensed into a single space: this includes all whitespace preceding =
the=20
backslash, all whitespace at the beginning of the line after the=20
backslash/newline, and any consecutive backslash/newline combinations. =
</P>
<P>If the <CODE>.POSIX</CODE> special target is defined then =
backslash/newline=20
handling is modified slightly to conform to POSIX.2: first, whitespace =
preceding=20
a backslash is not removed and second, consecutive backslash/newlines =
are not=20
condensed. </P>
<HR>
<A name=3DMakefile-Names></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Include"=20
rel=3Dnext>Include</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Conten=
ts"=20
rel=3Dprev>Makefile Contents</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefiles"=20
rel=3Dup>Makefiles</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DWhat-Name-to-Give-Your-Makefile></A>
<H3 class=3Dsection>3.2 What Name to Give Your Makefile</H3><A=20
name=3Dindex-makefile-name></A><A name=3Dindex-name-of-makefile></A><A=20
name=3Dindex-default-makefile-name></A><A =
name=3Dindex-file-name-of-makefile></A>
<P>By default, when <CODE>make</CODE> looks for the makefile, it tries =
the=20
following names, in order: <SAMP>GNUmakefile</SAMP>, =
<SAMP>makefile</SAMP> and=20
<SAMP>Makefile</SAMP>. <A name=3Dindex-Makefile></A><A=20
name=3Dindex-GNUmakefile></A><A name=3Dindex-makefile-1></A></P><A=20
name=3Dindex-README></A>
<P>Normally you should call your makefile either <SAMP>makefile</SAMP> =
or=20
<SAMP>Makefile</SAMP>. (We recommend <SAMP>Makefile</SAMP> because it =
appears=20
prominently near the beginning of a directory listing, right near other=20
important files such as <SAMP>README</SAMP>.) The first name checked,=20
<SAMP>GNUmakefile</SAMP>, is not recommended for most makefiles. You =
should use=20
this name if you have a makefile that is specific to GNU =
<CODE>make</CODE>, and=20
will not be understood by other versions of <CODE>make</CODE>. Other=20
<CODE>make</CODE> programs look for <SAMP>makefile</SAMP> and=20
<SAMP>Makefile</SAMP>, but not <SAMP>GNUmakefile</SAMP>. </P>
<P>If <CODE>make</CODE> finds none of these names, it does not use any =
makefile.=20
Then you must specify a goal with a command argument, and =
<CODE>make</CODE> will=20
attempt to figure out how to remake it using only its built-in implicit =
rules.=20
See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rules"=
>Using=20
Implicit Rules</A>. </P><A name=3Dindex-_002df></A><A=20
name=3Dindex-_002d_002dfile></A><A name=3Dindex-_002d_002dmakefile></A>
<P>If you want to use a nonstandard name for your makefile, you can =
specify the=20
makefile name with the =E2=80=98<SAMP>-f</SAMP>=E2=80=99 or =
=E2=80=98<SAMP>--file</SAMP>=E2=80=99 option. The=20
arguments =E2=80=98<SAMP><SPAN =
class=3Dnolinebreak>-f</SPAN>&nbsp;<VAR>name</VAR></SAMP>=E2=80=99<!-- =
/@w --> or=20
=E2=80=98<SAMP><SPAN =
class=3Dnolinebreak>--file=3D</SPAN><VAR>name</VAR></SAMP>=E2=80=99<!-- =
/@w -->=20
tell <CODE>make</CODE> to read the file <VAR>name</VAR> as the makefile. =
If you=20
use more than one =E2=80=98<SAMP>-f</SAMP>=E2=80=99 or =
=E2=80=98<SAMP>--file</SAMP>=E2=80=99 option, you can=20
specify several makefiles. All the makefiles are effectively =
concatenated in the=20
order specified. The default makefile names <SAMP>GNUmakefile</SAMP>,=20
<SAMP>makefile</SAMP> and <SAMP>Makefile</SAMP> are not checked =
automatically if=20
you specify =E2=80=98<SAMP>-f</SAMP>=E2=80=99 or =
=E2=80=98<SAMP>--file</SAMP>=E2=80=99. <A=20
name=3Dindex-specifying-makefile-name></A><A=20
name=3Dindex-makefile-name_002c-how-to-specify></A><A=20
name=3Dindex-name-of-makefile_002c-how-to-specify></A><A=20
name=3Dindex-file-name-of-makefile_002c-how-to-specify></A></P>
<HR>
<A name=3DInclude></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#MAKEFILES-Varia=
ble"=20
rel=3Dnext>MAKEFILES Variable</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Names"=
=20
rel=3Dprev>Makefile Names</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefiles"=20
rel=3Dup>Makefiles</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DIncluding-Other-Makefiles></A>
<H3 class=3Dsection>3.3 Including Other Makefiles</H3><A=20
name=3Dindex-including-other-makefiles></A><A=20
name=3Dindex-makefile_002c-including></A><A name=3Dindex-include></A>
<P>The <CODE>include</CODE> directive tells <CODE>make</CODE> to suspend =
reading=20
the current makefile and read one or more other makefiles before =
continuing. The=20
directive is a line in the makefile that looks like this: </P>
<DIV class=3Dexample><PRE class=3Dexample>include =
<VAR>filenames</VAR>=E2=80=A6
</PRE></DIV>
<P><VAR>filenames</VAR> can contain shell file name patterns. If=20
<VAR>filenames</VAR> is empty, nothing is included and no error is =
printed. <A=20
name=3Dindex-shell-file-name-pattern-_0028in-include_0029></A><A=20
name=3Dindex-shell-wildcards-_0028in-include_0029></A><A=20
name=3Dindex-wildcard_002c-in-include></A></P>
<P>Extra spaces are allowed and ignored at the beginning of the line, =
but the=20
first character must not be a tab (or the value of=20
<CODE>.RECIPEPREFIX</CODE>)=E2=80=94if the line begins with a tab, it =
will be considered=20
a recipe line. Whitespace is required between <CODE>include</CODE> and =
the file=20
names, and between file names; extra whitespace is ignored there and at =
the end=20
of the directive. A comment starting with =
=E2=80=98<SAMP>#</SAMP>=E2=80=99 is allowed at the end=20
of the line. If the file names contain any variable or function =
references, they=20
are expanded. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Using-Variables=
">How to=20
Use Variables</A>. </P>
<P>For example, if you have three <SAMP>.mk</SAMP> files, =
<SAMP>a.mk</SAMP>,=20
<SAMP>b.mk</SAMP>, and <SAMP>c.mk</SAMP>, and <CODE>$(bar)</CODE> =
expands to=20
<CODE>bish bash</CODE>, then the following expression </P>
<DIV class=3Dexample><PRE class=3Dexample>include foo *.mk $(bar)
</PRE></DIV>
<P>is equivalent to </P>
<DIV class=3Dexample><PRE class=3Dexample>include foo a.mk b.mk c.mk =
bish bash
</PRE></DIV>
<P>When <CODE>make</CODE> processes an <CODE>include</CODE> directive, =
it=20
suspends reading of the containing makefile and reads from each listed =
file in=20
turn. When that is finished, <CODE>make</CODE> resumes reading the =
makefile in=20
which the directive appears. </P>
<P>One occasion for using <CODE>include</CODE> directives is when =
several=20
programs, handled by individual makefiles in various directories, need =
to use a=20
common set of variable definitions (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Setting">Settin=
g=20
Variables</A>) or pattern rules (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Rules">=
Defining=20
and Redefining Pattern Rules</A>). </P>
<P>Another such occasion is when you want to generate prerequisites from =
source=20
files automatically; the prerequisites can be put in a file that is =
included by=20
the main makefile. This practice is generally cleaner than that of =
somehow=20
appending the prerequisites to the end of the main makefile as has been=20
traditionally done with other versions of <CODE>make</CODE>. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Prere=
quisites">Automatic=20
Prerequisites</A>. <A =
name=3Dindex-prerequisites_002c-automatic-generation></A><A=20
name=3Dindex-automatic-generation-of-prerequisites></A><A=20
name=3Dindex-generating-prerequisites-automatically></A></P><A=20
name=3Dindex-_002dI></A><A name=3Dindex-_002d_002dinclude_002ddir></A><A =

name=3Dindex-included-makefiles_002c-default-directories></A><A=20
name=3Dindex-default-directories-for-included-makefiles></A><A=20
name=3Dindex-_002fusr_002fgnu_002finclude></A><A=20
name=3Dindex-_002fusr_002flocal_002finclude></A><A=20
name=3Dindex-_002fusr_002finclude></A>
<P>If the specified name does not start with a slash, and the file is =
not found=20
in the current directory, several other directories are searched. First, =
any=20
directories you have specified with the =
=E2=80=98<SAMP>-I</SAMP>=E2=80=99 or=20
=E2=80=98<SAMP>--include-dir</SAMP>=E2=80=99 option are searched (see <A =

href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Summary=20
of Options</A>). Then the following directories (if they exist) are =
searched, in=20
this order: <SAMP><VAR>prefix</VAR>/include</SAMP> (normally=20
<SAMP>/usr/local/include</SAMP> <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#FOOT1"=20
name=3DDOCF1><SUP>1</SUP></A>) <SAMP>/usr/gnu/include</SAMP>,=20
<SAMP>/usr/local/include</SAMP>, <SAMP>/usr/include</SAMP>. </P>
<P>If an included makefile cannot be found in any of these directories, =
a=20
warning message is generated, but it is not an immediately fatal error;=20
processing of the makefile containing the <CODE>include</CODE> =
continues. Once=20
it has finished reading makefiles, <CODE>make</CODE> will try to remake =
any that=20
are out of date or don=E2=80=99t exist. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Remaking-Makefi=
les">How=20
Makefiles Are Remade</A>. Only after it has tried to find a way to =
remake a=20
makefile and failed, will <CODE>make</CODE> diagnose the missing =
makefile as a=20
fatal error. </P>
<P>If you want <CODE>make</CODE> to simply ignore a makefile which does =
not=20
exist or cannot be remade, with no error message, use the <CODE><SPAN=20
class=3Dnolinebreak>-include</SPAN></CODE><!-- /@w --> directive instead =
of=20
<CODE>include</CODE>, like this: </P>
<DIV class=3Dexample><PRE class=3Dexample>-include =
<VAR>filenames</VAR>=E2=80=A6
</PRE></DIV>
<P>This acts like <CODE>include</CODE> in every way except that there is =
no=20
error (not even a warning) if any of the <VAR>filenames</VAR> (or any=20
prerequisites of any of the <VAR>filenames</VAR>) do not exist or cannot =
be=20
remade. </P>
<P>For compatibility with some other <CODE>make</CODE> implementations,=20
<CODE>sinclude</CODE> is another name for <CODE><SPAN=20
class=3Dnolinebreak>-include</SPAN></CODE><!-- /@w -->. </P>
<HR>
<A name=3DMAKEFILES-Variable></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Remaking-Makefi=
les"=20
rel=3Dnext>Remaking Makefiles</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Include"=20
rel=3Dprev>Include</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefiles"=20
rel=3Dup>Makefiles</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DThe-Variable-MAKEFILES></A>
<H3 class=3Dsection>3.4 The Variable <CODE>MAKEFILES</CODE></H3><A=20
name=3Dindex-makefile_002c-and-MAKEFILES-variable></A><A=20
name=3Dindex-including-_0028MAKEFILES-variable_0029></A><A=20
name=3Dindex-MAKEFILES></A>
<P>If the environment variable <CODE>MAKEFILES</CODE> is defined,=20
<CODE>make</CODE> considers its value as a list of names (separated by=20
whitespace) of additional makefiles to be read before the others. This =
works=20
much like the <CODE>include</CODE> directive: various directories are =
searched=20
for those files (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Include">Includ=
ing Other=20
Makefiles</A>). In addition, the default goal is never taken from one of =
these=20
makefiles (or any makefile included by them) and it is not an error if =
the files=20
listed in <CODE>MAKEFILES</CODE> are not found. </P><A=20
name=3Dindex-recursion_002c-and-MAKEFILES-variable></A>
<P>The main use of <CODE>MAKEFILES</CODE> is in communication between =
recursive=20
invocations of <CODE>make</CODE> (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Recursion">Recu=
rsive Use=20
of <CODE>make</CODE></A>). It usually is not desirable to set the =
environment=20
variable before a top-level invocation of <CODE>make</CODE>, because it =
is=20
usually better not to mess with a makefile from outside. However, if you =
are=20
running <CODE>make</CODE> without a specific makefile, a makefile in=20
<CODE>MAKEFILES</CODE> can do useful things to help the built-in =
implicit rules=20
work better, such as defining search paths (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Directory-Searc=
h">Directory=20
Search</A>). </P>
<P>Some users are tempted to set <CODE>MAKEFILES</CODE> in the =
environment=20
automatically on login, and program makefiles to expect this to be done. =
This is=20
a very bad idea, because such makefiles will fail to work if run by =
anyone else.=20
It is much better to write explicit <CODE>include</CODE> directives in =
the=20
makefiles. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Include">Includ=
ing Other=20
Makefiles</A>. </P>
<HR>
<A name=3DRemaking-Makefiles></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Overriding-Make=
files"=20
rel=3Dnext>Overriding Makefiles</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#MAKEFILES-Varia=
ble"=20
rel=3Dprev>MAKEFILES Variable</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefiles"=20
rel=3Dup>Makefiles</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DHow-Makefiles-Are-Remade></A>
<H3 class=3Dsection>3.5 How Makefiles Are Remade</H3><A=20
name=3Dindex-updating-makefiles></A><A =
name=3Dindex-remaking-makefiles></A><A=20
name=3Dindex-makefile_002c-remaking-of></A>
<P>Sometimes makefiles can be remade from other files, such as RCS or =
SCCS=20
files. If a makefile can be remade from other files, you probably want=20
<CODE>make</CODE> to get an up-to-date version of the makefile to read =
in. </P>
<P>To this end, after reading in all makefiles, <CODE>make</CODE> will =
consider=20
each as a goal target and attempt to update it. If a makefile has a rule =
which=20
says how to update it (found either in that very makefile or in another =
one) or=20
if an implicit rule applies to it (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rules"=
>Using=20
Implicit Rules</A>), it will be updated if necessary. After all =
makefiles have=20
been checked, if any have actually been changed, <CODE>make</CODE> =
starts with a=20
clean slate and reads all the makefiles over again. (It will also =
attempt to=20
update each of them over again, but normally this will not change them =
again,=20
since they are already up to date.) </P>
<P>If you know that one or more of your makefiles cannot be remade and =
you want=20
to keep <CODE>make</CODE> from performing an implicit rule search on =
them,=20
perhaps for efficiency reasons, you can use any normal method of =
preventing=20
implicit rule look-up to do so. For example, you can write an explicit =
rule with=20
the makefile as the target, and an empty recipe (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Empty-Recipes">=
Using=20
Empty Recipes</A>). </P>
<P>If the makefiles specify a double-colon rule to remake a file with a =
recipe=20
but no prerequisites, that file will always be remade (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Double_002dColo=
n">Double-Colon</A>).=20
In the case of makefiles, a makefile that has a double-colon rule with a =
recipe=20
but no prerequisites will be remade every time <CODE>make</CODE> is run, =
and=20
then again after <CODE>make</CODE> starts over and reads the makefiles =
in again.=20
This would cause an infinite loop: <CODE>make</CODE> would constantly =
remake the=20
makefile, and never do anything else. So, to avoid this, =
<CODE>make</CODE> will=20
<STRONG>not</STRONG> attempt to remake makefiles which are specified as =
targets=20
of a double-colon rule with a recipe but no prerequisites. </P>
<P>If you do not specify any makefiles to be read with =
=E2=80=98<SAMP>-f</SAMP>=E2=80=99 or=20
=E2=80=98<SAMP>--file</SAMP>=E2=80=99 options, <CODE>make</CODE> will =
try the default makefile=20
names; see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Names"=
>What=20
Name to Give Your Makefile</A>. Unlike makefiles explicitly requested =
with=20
=E2=80=98<SAMP>-f</SAMP>=E2=80=99 or =
=E2=80=98<SAMP>--file</SAMP>=E2=80=99 options, <CODE>make</CODE> is not=20
certain that these makefiles should exist. However, if a default =
makefile does=20
not exist but can be created by running <CODE>make</CODE> rules, you =
probably=20
want the rules to be run so that the makefile can be used. </P>
<P>Therefore, if none of the default makefiles exists, <CODE>make</CODE> =
will=20
try to make each of them in the same order in which they are searched =
for (see=20
<A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Names"=
>What=20
Name to Give Your Makefile</A>) until it succeeds in making one, or it =
runs out=20
of names to try. Note that it is not an error if <CODE>make</CODE> =
cannot find=20
or make any makefile; a makefile is not always necessary. </P>
<P>When you use the =E2=80=98<SAMP>-t</SAMP>=E2=80=99 or =
=E2=80=98<SAMP>--touch</SAMP>=E2=80=99 option (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution">Instead=20
of Executing Recipes</A>), you would not want to use an out-of-date =
makefile to=20
decide which targets to touch. So the =E2=80=98<SAMP>-t</SAMP>=E2=80=99 =
option has no effect on=20
updating makefiles; they are really updated even if =
=E2=80=98<SAMP>-t</SAMP>=E2=80=99 is=20
specified. Likewise, =E2=80=98<SAMP>-q</SAMP>=E2=80=99 (or =
=E2=80=98<SAMP>--question</SAMP>=E2=80=99) and=20
=E2=80=98<SAMP>-n</SAMP>=E2=80=99 (or =
=E2=80=98<SAMP>--just-print</SAMP>=E2=80=99) do not prevent updating of=20
makefiles, because an out-of-date makefile would result in the wrong =
output for=20
other targets. Thus, =E2=80=98<SAMP>make -f mfile -n foo</SAMP>=E2=80=99 =
will update=20
<SAMP>mfile</SAMP>, read it in, and then print the recipe to update=20
<SAMP>foo</SAMP> and its prerequisites without running it. The recipe =
printed=20
for <SAMP>foo</SAMP> will be the one specified in the updated contents =
of=20
<SAMP>mfile</SAMP>. </P>
<P>However, on occasion you might actually wish to prevent updating of =
even the=20
makefiles. You can do this by specifying the makefiles as goals in the =
command=20
line as well as specifying them as makefiles. When the makefile name is=20
specified explicitly as a goal, the options =
=E2=80=98<SAMP>-t</SAMP>=E2=80=99 and so on do apply=20
to them. </P>
<P>Thus, =E2=80=98<SAMP>make -f mfile -n mfile foo</SAMP>=E2=80=99 would =
read the makefile=20
<SAMP>mfile</SAMP>, print the recipe needed to update it without =
actually=20
running it, and then print the recipe needed to update <SAMP>foo</SAMP> =
without=20
running that. The recipe for <SAMP>foo</SAMP> will be the one specified =
by the=20
existing contents of <SAMP>mfile</SAMP>. </P>
<HR>
<A name=3DOverriding-Makefiles></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Reading-Makefil=
es"=20
rel=3Dnext>Reading Makefiles</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Remaking-Makefi=
les"=20
rel=3Dprev>Remaking Makefiles</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefiles"=20
rel=3Dup>Makefiles</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DOverriding-Part-of-Another-Makefile></A>
<H3 class=3Dsection>3.6 Overriding Part of Another Makefile</H3><A=20
name=3Dindex-overriding-makefiles></A><A =
name=3Dindex-makefile_002c-overriding></A>
<P>Sometimes it is useful to have a makefile that is mostly just like =
another=20
makefile. You can often use the =E2=80=98<SAMP>include</SAMP>=E2=80=99 =
directive to include one=20
in the other, and add more targets or variable definitions. However, it =
is=20
invalid for two makefiles to give different recipes for the same target. =
But=20
there is another way. </P><A=20
name=3Dindex-match_002danything-rule_002c-used-to-override></A>
<P>In the containing makefile (the one that wants to include the other), =
you can=20
use a match-anything pattern rule to say that to remake any target that =
cannot=20
be made from the information in the containing makefile, =
<CODE>make</CODE>=20
should look in another makefile. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Rules">=
Pattern=20
Rules</A>, for more information on pattern rules. </P>
<P>For example, if you have a makefile called <SAMP>Makefile</SAMP> that =
says=20
how to make the target =E2=80=98<SAMP>foo</SAMP>=E2=80=99 (and other =
targets), you can write a=20
makefile called <SAMP>GNUmakefile</SAMP> that contains: </P>
<DIV class=3Dexample><PRE class=3Dexample>foo:
        frobnicate &gt; foo

%: force
        @$(MAKE) -f Makefile $@
force: ;
</PRE></DIV>
<P>If you say =E2=80=98<SAMP>make foo</SAMP>=E2=80=99, <CODE>make</CODE> =
will find=20
<SAMP>GNUmakefile</SAMP>, read it, and see that to make =
<SAMP>foo</SAMP>, it=20
needs to run the recipe =E2=80=98<SAMP>frobnicate &gt; =
foo</SAMP>=E2=80=99. If you say=20
=E2=80=98<SAMP>make bar</SAMP>=E2=80=99, <CODE>make</CODE> will find no =
way to make=20
<SAMP>bar</SAMP> in <SAMP>GNUmakefile</SAMP>, so it will use the recipe =
from the=20
pattern rule: =E2=80=98<SAMP>make -f Makefile bar</SAMP>=E2=80=99. If =
<SAMP>Makefile</SAMP>=20
provides a rule for updating <SAMP>bar</SAMP>, <CODE>make</CODE> will =
apply the=20
rule. And likewise for any other target that <SAMP>GNUmakefile</SAMP> =
does not=20
say how to make. </P>
<P>The way this works is that the pattern rule has a pattern of just=20
=E2=80=98<SAMP>%</SAMP>=E2=80=99, so it matches any target whatever. The =
rule specifies a=20
prerequisite <SAMP>force</SAMP>, to guarantee that the recipe will be =
run even=20
if the target file already exists. We give the <SAMP>force</SAMP> target =
an=20
empty recipe to prevent <CODE>make</CODE> from searching for an implicit =
rule to=20
build it=E2=80=94otherwise it would apply the same match-anything rule =
to=20
<SAMP>force</SAMP> itself and create a prerequisite loop! </P>
<HR>
<A name=3DReading-Makefiles></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Secondary-Expan=
sion"=20
rel=3Dnext>Secondary Expansion</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Overriding-Make=
files"=20
rel=3Dprev>Overriding Makefiles</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefiles"=20
rel=3Dup>Makefiles</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DHow-make-Reads-a-Makefile></A>
<H3 class=3Dsection>3.7 How <CODE>make</CODE> Reads a Makefile</H3><A=20
name=3Dindex-reading-makefiles></A><A =
name=3Dindex-makefile_002c-parsing></A>
<P>GNU <CODE>make</CODE> does its work in two distinct phases. During =
the first=20
phase it reads all the makefiles, included makefiles, etc. and =
internalizes all=20
the variables and their values, implicit and explicit rules, and =
constructs a=20
dependency graph of all the targets and their prerequisites. During the =
second=20
phase, <CODE>make</CODE> uses these internal structures to determine =
what=20
targets will need to be rebuilt and to invoke the rules necessary to do =
so. </P>
<P>It=E2=80=99s important to understand this two-phase approach because =
it has a direct=20
impact on how variable and function expansion happens; this is often a =
source of=20
some confusion when writing makefiles. Here we will present a summary of =
the=20
phases in which expansion happens for different constructs within the =
makefile.=20
We say that expansion is <EM>immediate</EM> if it happens during the =
first=20
phase: in this case <CODE>make</CODE> will expand any variables or =
functions in=20
that section of a construct as the makefile is parsed. We say that =
expansion is=20
<EM>deferred</EM> if expansion is not performed immediately. Expansion =
of a=20
deferred construct is not performed until either the construct appears =
later in=20
an immediate context, or until the second phase. </P>
<P>You may not be familiar with some of these constructs yet. You can =
reference=20
this section as you become familiar with them, in later chapters. </P><A =

name=3DVariable-Assignment></A>
<H4 class=3Dsubheading>Variable Assignment</H4><A=20
name=3Dindex-_002b_003d_002c-expansion></A><A=20
name=3Dindex-_003d_002c-expansion></A><A=20
name=3Dindex-_003f_003d_002c-expansion></A><A=20
name=3Dindex-_002b_003d_002c-expansion-1></A><A=20
name=3Dindex-_0021_003d_002c-expansion></A><A=20
name=3Dindex-define_002c-expansion></A>
<P>Variable definitions are parsed as follows: </P>
<DIV class=3Dexample><PRE class=3Dexample><VAR>immediate</VAR> =3D =
<VAR>deferred</VAR>
<VAR>immediate</VAR> ?=3D <VAR>deferred</VAR>
<VAR>immediate</VAR> :=3D <VAR>immediate</VAR>
<VAR>immediate</VAR> ::=3D <VAR>immediate</VAR>
<VAR>immediate</VAR> +=3D <VAR>deferred</VAR> or <VAR>immediate</VAR>
<VAR>immediate</VAR> !=3D <VAR>immediate</VAR>

define <VAR>immediate</VAR>
  <VAR>deferred</VAR>
endef

define <VAR>immediate</VAR> =3D
  <VAR>deferred</VAR>
endef

define <VAR>immediate</VAR> ?=3D
  <VAR>deferred</VAR>
endef

define <VAR>immediate</VAR> :=3D
  <VAR>immediate</VAR>
endef

define <VAR>immediate</VAR> ::=3D
  <VAR>immediate</VAR>
endef

define <VAR>immediate</VAR> +=3D
  <VAR>deferred</VAR> or <VAR>immediate</VAR>
endef

define <VAR>immediate</VAR> !=3D
  <VAR>immediate</VAR>
endef
</PRE></DIV>
<P>For the append operator, =E2=80=98<SAMP>+=3D</SAMP>=E2=80=99, the =
right-hand side is considered=20
immediate if the variable was previously set as a simple variable=20
(=E2=80=98<SAMP>:=3D</SAMP>=E2=80=99 or =
=E2=80=98<SAMP>::=3D</SAMP>=E2=80=99), and deferred otherwise. </P>
<P>For the shell assignment operator, =
=E2=80=98<SAMP>!=3D</SAMP>=E2=80=99, the right-hand side is=20
evaluated immediately and handed to the shell. The result is stored in =
the=20
variable named on the left, and that variable becomes a simple variable =
(and=20
will thus be re-evaluated on each reference). </P><A=20
name=3DConditional-Directives></A>
<H4 class=3Dsubheading>Conditional Directives</H4><A=20
name=3Dindex-ifdef_002c-expansion></A><A =
name=3Dindex-ifeq_002c-expansion></A><A=20
name=3Dindex-ifndef_002c-expansion></A><A =
name=3Dindex-ifneq_002c-expansion></A>
<P>Conditional directives are parsed immediately. This means, for =
example, that=20
automatic variables cannot be used in conditional directives, as =
automatic=20
variables are not set until the recipe for that rule is invoked. If you =
need to=20
use automatic variables in a conditional directive you <EM>must</EM> =
move the=20
condition into the recipe and use shell conditional syntax instead. =
</P><A=20
name=3DRule-Definition></A>
<H4 class=3Dsubheading>Rule Definition</H4><A=20
name=3Dindex-target_002c-expansion></A><A=20
name=3Dindex-prerequisite_002c-expansion></A><A=20
name=3Dindex-implicit-rule_002c-expansion></A><A=20
name=3Dindex-pattern-rule_002c-expansion></A><A=20
name=3Dindex-explicit-rule_002c-expansion></A>
<P>A rule is always expanded the same way, regardless of the form: </P>
<DIV class=3Dexample><PRE class=3Dexample><VAR>immediate</VAR> : =
<VAR>immediate</VAR> ; <VAR>deferred</VAR>
        <VAR>deferred</VAR>
</PRE></DIV>
<P>That is, the target and prerequisite sections are expanded =
immediately, and=20
the recipe used to construct the target is always deferred. This general =
rule is=20
true for explicit rules, pattern rules, suffix rules, static pattern =
rules, and=20
simple prerequisite definitions. </P>
<HR>
<A name=3DSecondary-Expansion></A>
<DIV class=3Dheader>
<P>Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Reading-Makefil=
es"=20
rel=3Dprev>Reading Makefiles</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefiles"=20
rel=3Dup>Makefiles</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DSecondary-Expansion-1></A>
<H3 class=3Dsection>3.8 Secondary Expansion</H3><A=20
name=3Dindex-secondary-expansion></A><A =
name=3Dindex-expansion_002c-secondary></A><A=20
name=3Dindex-_002eSECONDEXPANSION></A>
<P>In the previous section we learned that GNU <CODE>make</CODE> works =
in two=20
distinct phases: a read-in phase and a target-update phase (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Reading-Makefil=
es">How=20
<CODE>make</CODE> Reads a Makefile</A>). GNU make also has the ability =
to enable=20
a <EM>second expansion</EM> of the prerequisites (only) for some or all =
targets=20
defined in the makefile. In order for this second expansion to occur, =
the=20
special target <CODE>.SECONDEXPANSION</CODE> must be defined before the =
first=20
prerequisite list that makes use of this feature. </P>
<P>If that special target is defined then in between the two phases =
mentioned=20
above, right at the end of the read-in phase, all the prerequisites of =
the=20
targets defined after the special target are expanded a <EM>second =
time</EM>. In=20
most circumstances this secondary expansion will have no effect, since =
all=20
variable and function references will have been expanded during the =
initial=20
parsing of the makefiles. In order to take advantage of the secondary =
expansion=20
phase of the parser, then, it=E2=80=99s necessary to <EM>escape</EM> the =
variable or=20
function reference in the makefile. In this case the first expansion =
merely=20
un-escapes the reference but doesn=E2=80=99t expand it, and expansion is =
left to the=20
secondary expansion phase. For example, consider this makefile: </P>
<DIV class=3Dexample><PRE class=3Dexample>.SECONDEXPANSION:
ONEVAR =3D onefile
TWOVAR =3D twofile
myfile: $(ONEVAR) $$(TWOVAR)
</PRE></DIV>
<P>After the first expansion phase the prerequisites list of the=20
<SAMP>myfile</SAMP> target will be <CODE>onefile</CODE> and=20
<CODE>$(TWOVAR)</CODE>; the first (unescaped) variable reference to=20
<VAR>ONEVAR</VAR> is expanded, while the second (escaped) variable =
reference is=20
simply unescaped, without being recognized as a variable reference. Now =
during=20
the secondary expansion the first word is expanded again but since it =
contains=20
no variable or function references it remains the value =
<SAMP>onefile</SAMP>,=20
while the second word is now a normal reference to the variable=20
<VAR>TWOVAR</VAR>, which is expanded to the value <SAMP>twofile</SAMP>. =
The=20
final result is that there are two prerequisites, <SAMP>onefile</SAMP> =
and=20
<SAMP>twofile</SAMP>. </P>
<P>Obviously, this is not a very interesting case since the same result =
could=20
more easily have been achieved simply by having both variables appear,=20
unescaped, in the prerequisites list. One difference becomes apparent if =
the=20
variables are reset; consider this example: </P>
<DIV class=3Dexample><PRE class=3Dexample>.SECONDEXPANSION:
AVAR =3D top
onefile: $(AVAR)
twofile: $$(AVAR)
AVAR =3D bottom
</PRE></DIV>
<P>Here the prerequisite of <SAMP>onefile</SAMP> will be expanded =
immediately,=20
and resolve to the value <SAMP>top</SAMP>, while the prerequisite of=20
<SAMP>twofile</SAMP> will not be full expanded until the secondary =
expansion and=20
yield a value of <SAMP>bottom</SAMP>. </P>
<P>This is marginally more exciting, but the true power of this feature =
only=20
becomes apparent when you discover that secondary expansions always take =
place=20
within the scope of the automatic variables for that target. This means =
that you=20
can use variables such as <CODE>$@</CODE>, <CODE>$*</CODE>, etc. during =
the=20
second expansion and they will have their expected values, just as in =
the=20
recipe. All you have to do is defer the expansion by escaping the=20
<CODE>$</CODE>. Also, secondary expansion occurs for both explicit and =
implicit=20
(pattern) rules. Knowing this, the possible uses for this feature =
increase=20
dramatically. For example: </P>
<DIV class=3Dexample><PRE class=3Dexample>.SECONDEXPANSION:
main_OBJS :=3D main.o try.o test.o
lib_OBJS :=3D lib.o api.o

main lib: $$($$@_OBJS)
</PRE></DIV>
<P>Here, after the initial expansion the prerequisites of both the=20
<SAMP>main</SAMP> and <SAMP>lib</SAMP> targets will be =
<CODE>$($@_OBJS)</CODE>.=20
During the secondary expansion, the <CODE>$@</CODE> variable is set to =
the name=20
of the target and so the expansion for the <SAMP>main</SAMP> target will =
yield=20
<CODE>$(main_OBJS)</CODE>, or <CODE>main.o try.o test.o</CODE>, while =
the=20
secondary expansion for the <SAMP>lib</SAMP> target will yield=20
<CODE>$(lib_OBJS)</CODE>, or <CODE>lib.o api.o</CODE>. </P>
<P>You can also mix in functions here, as long as they are properly =
escaped:=20
</P>
<DIV class=3Dexample><PRE class=3Dexample>main_SRCS :=3D main.c try.c =
test.c
lib_SRCS :=3D lib.c api.c

.SECONDEXPANSION:
main lib: $$(patsubst %.c,%.o,$$($$@_SRCS))
</PRE></DIV>
<P>This version allows users to specify source files rather than object =
files,=20
but gives the same resulting prerequisites list as the previous example. =
</P>
<P>Evaluation of automatic variables during the secondary expansion =
phase,=20
especially of the target name variable <CODE>$$@</CODE>, behaves =
similarly to=20
evaluation within recipes. However, there are some subtle differences =
and=20
=E2=80=9Ccorner cases=E2=80=9D which come into play for the different =
types of rule definitions=20
that <CODE>make</CODE> understands. The subtleties of using the =
different=20
automatic variables are described below. </P><A=20
name=3DSecondary-Expansion-of-Explicit-Rules></A>
<H4 class=3Dsubheading>Secondary Expansion of Explicit Rules</H4><A=20
name=3Dindex-secondary-expansion-and-explicit-rules></A><A=20
name=3Dindex-explicit-rules_002c-secondary-expansion-of></A>
<P>During the secondary expansion of explicit rules, <CODE>$$@</CODE> =
and=20
<CODE>$$%</CODE> evaluate, respectively, to the file name of the target =
and,=20
when the target is an archive member, the target member name. The=20
<CODE>$$&lt;</CODE> variable evaluates to the first prerequisite in the =
first=20
rule for this target. <CODE>$$^</CODE> and <CODE>$$+</CODE> evaluate to =
the list=20
of all prerequisites of rules <EM>that have already appeared</EM> for =
the same=20
target (<CODE>$$+</CODE> with repetitions and <CODE>$$^</CODE> without). =
The=20
following example will help illustrate these behaviors: </P>
<DIV class=3Dexample><PRE class=3Dexample>.SECONDEXPANSION:

foo: foo.1 bar.1 $$&lt; $$^ $$+    # line #1

foo: foo.2 bar.2 $$&lt; $$^ $$+    # line #2

foo: foo.3 bar.3 $$&lt; $$^ $$+    # line #3
</PRE></DIV>
<P>In the first prerequisite list, all three variables =
(<CODE>$$&lt;</CODE>,=20
<CODE>$$^</CODE>, and <CODE>$$+</CODE>) expand to the empty string. In =
the=20
second, they will have values <CODE>foo.1</CODE>, <CODE>foo.1 =
bar.1</CODE>, and=20
<CODE>foo.1 bar.1</CODE> respectively. In the third they will have =
values=20
<CODE>foo.1</CODE>, <CODE>foo.1 bar.1 foo.2 bar.2</CODE>, and =
<CODE>foo.1 bar.1=20
foo.2 bar.2 foo.1 foo.1 bar.1 foo.1 bar.1</CODE> respectively. </P>
<P>Rules undergo secondary expansion in makefile order, except that the =
rule=20
with the recipe is always evaluated last. </P>
<P>The variables <CODE>$$?</CODE> and <CODE>$$*</CODE> are not available =
and=20
expand to the empty string. </P><A=20
name=3DSecondary-Expansion-of-Static-Pattern-Rules></A>
<H4 class=3Dsubheading>Secondary Expansion of Static Pattern =
Rules</H4><A=20
name=3Dindex-secondary-expansion-and-static-pattern-rules></A><A=20
name=3Dindex-static-pattern-rules_002c-secondary-expansion-of></A>
<P>Rules for secondary expansion of static pattern rules are identical =
to those=20
for explicit rules, above, with one exception: for static pattern rules =
the=20
<CODE>$$*</CODE> variable is set to the pattern stem. As with explicit =
rules,=20
<CODE>$$?</CODE> is not available and expands to the empty string. =
</P><A=20
name=3DSecondary-Expansion-of-Implicit-Rules></A>
<H4 class=3Dsubheading>Secondary Expansion of Implicit Rules</H4><A=20
name=3Dindex-secondary-expansion-and-implicit-rules></A><A=20
name=3Dindex-implicit-rules_002c-secondary-expansion-of></A>
<P>As <CODE>make</CODE> searches for an implicit rule, it substitutes =
the stem=20
and then performs secondary expansion for every rule with a matching =
target=20
pattern. The value of the automatic variables is derived in the same =
fashion as=20
for static pattern rules. As an example: </P>
<DIV class=3Dexample><PRE class=3Dexample>.SECONDEXPANSION:

foo: bar

foo foz: fo%: bo%

%oo: $$&lt; $$^ $$+ $$*
</PRE></DIV>
<P>When the implicit rule is tried for target <SAMP>foo</SAMP>,=20
<CODE>$$&lt;</CODE> expands to <SAMP>bar</SAMP>, <CODE>$$^</CODE> =
expands to=20
<SAMP>bar boo</SAMP>, <CODE>$$+</CODE> also expands to <SAMP>bar =
boo</SAMP>, and=20
<CODE>$$*</CODE> expands to <SAMP>f</SAMP>. </P>
<P>Note that the directory prefix (D), as described in <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rule-S=
earch">Implicit=20
Rule Search Algorithm</A>, is appended (after expansion) to all the =
patterns in=20
the prerequisites list. As an example: </P>
<DIV class=3Dexample><PRE class=3Dexample>.SECONDEXPANSION:

/tmp/foo.o:

%.o: $$(addsuffix /%.c,foo bar) foo.h
        @echo $^
</PRE></DIV>
<P>The prerequisite list printed, after the secondary expansion and =
directory=20
prefix reconstruction, will be <SAMP>/tmp/foo/foo.c /tmp/bar/foo.c =
foo.h</SAMP>.=20
If you are not interested in this reconstruction, you can use =
<CODE>$$*</CODE>=20
instead of <CODE>%</CODE> in the prerequisites list. </P>
<HR>
<A name=3DRules></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipes"=20
rel=3Dnext>Recipes</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefiles"=20
rel=3Dprev>Makefiles</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Top" =
rel=3Dup>Top</A>=20
&nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DWriting-Rules></A>
<H2 class=3Dchapter>4 Writing Rules</H2><A =
name=3Dindex-writing-rules></A><A=20
name=3Dindex-rule_002c-how-to-write></A><A name=3Dindex-target></A><A=20
name=3Dindex-prerequisite></A>
<P>A <EM>rule</EM> appears in the makefile and says when and how to =
remake=20
certain files, called the rule=E2=80=99s <EM>targets</EM> (most often =
only one per=20
rule). It lists the other files that are the <EM>prerequisites</EM> of =
the=20
target, and the <EM>recipe</EM> to use to create or update the target. =
</P><A=20
name=3Dindex-default-goal-1></A><A name=3Dindex-goal_002c-default-1></A>
<P>The order of rules is not significant, except for determining the =
<EM>default=20
goal</EM>: the target for <CODE>make</CODE> to consider, if you do not =
otherwise=20
specify one. The default goal is the target of the first rule in the =
first=20
makefile. If the first rule has multiple targets, only the first target =
is taken=20
as the default. There are two exceptions: a target starting with a =
period is not=20
a default unless it contains one or more slashes, =
=E2=80=98<SAMP>/</SAMP>=E2=80=99, as well;=20
and, a target that defines a pattern rule has no effect on the default =
goal.=20
(See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Rules">=
Defining=20
and Redefining Pattern Rules</A>.) </P>
<P>Therefore, we usually write the makefile so that the first rule is =
the one=20
for compiling the entire program or all the programs described by the =
makefile=20
(often with a target called =E2=80=98<SAMP>all</SAMP>=E2=80=99). See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Goals">Argument=
s to=20
Specify the Goals</A>. </P>
<TABLE class=3Dmenu border=3D0 cellSpacing=3D0>
  <TBODY>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D1=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rule-Example">R=
ule=20
      Example</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>An example explained. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D2=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rule-Syntax">Ru=
le=20
      Syntax</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>General syntax explained. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D3=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Prerequisite-Ty=
pes">Prerequisite=20
      Types</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>There are two types of prerequisites. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D4=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcards">Wild=
cards</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Using wildcard characters such as =
=E2=80=98*=E2=80=99. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D5=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Directory-Searc=
h">Directory=20
      Search</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Searching other directories for source =
files.=20
  </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D6=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Phony-Targets">=
Phony=20
      Targets</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Using a target that is not a real =
file=E2=80=99s name.=20
    </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D7=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Force-Targets">=
Force=20
      Targets</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>You can use a target without a recipe =
or=20
      prerequisites to mark other targets as phony. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D8=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Empty-Targets">=
Empty=20
      Targets</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>When only the date matters and the =
files are=20
      empty. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D9=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
">Special=20
      Targets</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Targets with special built-in =
meanings. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Multiple-Target=
s">Multiple=20
      Targets</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>When to make use of several targets in =
a rule.=20
    </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Multiple-Rules"=
>Multiple=20
      Rules</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to use several rules with the same =
target.=20
    </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-Pattern"=
>Static=20
      Pattern</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Static pattern rules apply to multiple =
targets=20
      and can vary the prerequisites according to the target name. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Double_002dColo=
n">Double-Colon</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to use a special kind of rule to =
allow=20
      several independent rules for one target. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Prere=
quisites">Automatic=20
      Prerequisites</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to automatically generate rules =
giving=20
      prerequisites from source files themselves. =
</TD></TR></TBODY></TABLE>
<HR>
<A name=3DRule-Example></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Rule-Syntax"=20
rel=3Dnext>Rule Syntax</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Rules"=20
rel=3Dprev>Rules</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Rules" =
rel=3Dup>Rules</A>=20
&nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DRule-Example-1></A>
<H3 class=3Dsection>4.1 Rule Example</H3>
<P>Here is an example of a rule: </P>
<DIV class=3Dexample><PRE class=3Dexample>foo.o : foo.c defs.h       # =
module for twiddling the frobs
        cc -c -g foo.c
</PRE></DIV>
<P>Its target is <SAMP>foo.o</SAMP> and its prerequisites are =
<SAMP>foo.c</SAMP>=20
and <SAMP>defs.h</SAMP>. It has one command in the recipe: =
=E2=80=98<SAMP>cc -c -g=20
foo.c</SAMP>=E2=80=99. The recipe starts with a tab to identify it as a =
recipe. </P>
<P>This rule says two things: </P>
<UL>
  <LI>How to decide whether <SAMP>foo.o</SAMP> is out of date: it is out =
of date=20
  if it does not exist, or if either <SAMP>foo.c</SAMP> or =
<SAMP>defs.h</SAMP>=20
  is more recent than it. </LI>
  <LI>How to update the file <SAMP>foo.o</SAMP>: by running =
<CODE>cc</CODE> as=20
  stated. The recipe does not explicitly mention <SAMP>defs.h</SAMP>, =
but we=20
  presume that <SAMP>foo.c</SAMP> includes it, and that that is why=20
  <SAMP>defs.h</SAMP> was added to the prerequisites. </LI></UL>
<HR>
<A name=3DRule-Syntax></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Prerequisite-Ty=
pes"=20
rel=3Dnext>Prerequisite Types</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Rule-Example"=20
rel=3Dprev>Rule Example</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Rules" =
rel=3Dup>Rules</A>=20
&nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DRule-Syntax-1></A>
<H3 class=3Dsection>4.2 Rule Syntax</H3><A =
name=3Dindex-rule-syntax></A><A=20
name=3Dindex-syntax-of-rules></A>
<P>In general, a rule looks like this: </P>
<DIV class=3Dexample><PRE class=3Dexample><VAR>targets</VAR> : =
<VAR>prerequisites</VAR>
        <VAR>recipe</VAR>
        =E2=80=A6
</PRE></DIV>
<P>or like this: </P>
<DIV class=3Dexample><PRE class=3Dexample><VAR>targets</VAR> : =
<VAR>prerequisites</VAR> ; <VAR>recipe</VAR>
        <VAR>recipe</VAR>
        =E2=80=A6
</PRE></DIV><A name=3Dindex-targets></A><A =
name=3Dindex-rule-targets></A>
<P>The <VAR>targets</VAR> are file names, separated by spaces. Wildcard=20
characters may be used (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcards">Usin=
g=20
Wildcard Characters in File Names</A>) and a name of the form=20
<SAMP><VAR>a</VAR>(<VAR>m</VAR>)</SAMP> represents member <VAR>m</VAR> =
in=20
archive file <VAR>a</VAR> (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Members=
">Archive=20
Members as Targets</A>). Usually there is only one target per rule, but=20
occasionally there is a reason to have more (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Multiple-Target=
s">Multiple=20
Targets in a Rule</A>). </P><A name=3Dindex-recipes></A><A=20
name=3Dindex-tab-character-_0028in-commands_0029></A>
<P>The <VAR>recipe</VAR> lines start with a tab character (or the first=20
character in the value of the <CODE>.RECIPEPREFIX</CODE> variable; see =
<A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Variabl=
es">Special=20
Variables</A>). The first recipe line may appear on the line after the=20
prerequisites, with a tab character, or may appear on the same line, =
with a=20
semicolon. Either way, the effect is the same. There are other =
differences in=20
the syntax of recipes. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipes">Writin=
g Recipes=20
in Rules</A>. </P><A =
name=3Dindex-dollar-sign-_0028_0024_0029_002c-in-rules></A><A=20
name=3Dindex-_0024_002c-in-rules></A><A =
name=3Dindex-rules_002c-and-_0024></A>
<P>Because dollar signs are used to start <CODE>make</CODE> variable =
references,=20
if you really want a dollar sign in a target or prerequisite you must =
write two=20
of them, =E2=80=98<SAMP>$$</SAMP>=E2=80=99 (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Using-Variables=
">How to=20
Use Variables</A>). If you have enabled secondary expansion (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Secondary-Expan=
sion">Secondary=20
Expansion</A>) and you want a literal dollar sign in the prerequisites =
list, you=20
must actually write <EM>four</EM> dollar signs =
(=E2=80=98<SAMP>$$$$</SAMP>=E2=80=99). </P>
<P>You may split a long line by inserting a backslash followed by a =
newline, but=20
this is not required, as <CODE>make</CODE> places no limit on the length =
of a=20
line in a makefile. </P>
<P>A rule tells <CODE>make</CODE> two things: when the targets are out =
of date,=20
and how to update them when necessary. </P><A =
name=3Dindex-prerequisites></A><A=20
name=3Dindex-rule-prerequisites></A>
<P>The criterion for being out of date is specified in terms of the=20
<VAR>prerequisites</VAR>, which consist of file names separated by =
spaces.=20
(Wildcards and archive members (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Archives">Archi=
ves</A>)=20
are allowed here too.) A target is out of date if it does not exist or =
if it is=20
older than any of the prerequisites (by comparison of last-modification =
times).=20
The idea is that the contents of the target file are computed based on=20
information in the prerequisites, so if any of the prerequisites =
changes, the=20
contents of the existing target file are no longer necessarily valid. =
</P>
<P>How to update is specified by a <VAR>recipe</VAR>. This is one or =
more lines=20
to be executed by the shell (normally =
=E2=80=98<SAMP>sh</SAMP>=E2=80=99), but with some extra=20
features (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipes">Writin=
g Recipes=20
in Rules</A>). </P>
<HR>
<A name=3DPrerequisite-Types></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcards"=20
rel=3Dnext>Wildcards</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Rule-Syntax"=20
rel=3Dprev>Rule Syntax</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Rules" =
rel=3Dup>Rules</A>=20
&nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DTypes-of-Prerequisites></A>
<H3 class=3Dsection>4.3 Types of Prerequisites</H3><A=20
name=3Dindex-prerequisite-types></A><A =
name=3Dindex-types-of-prerequisites></A><A=20
name=3Dindex-prerequisites_002c-normal></A><A=20
name=3Dindex-normal-prerequisites></A><A=20
name=3Dindex-prerequisites_002c-order_002donly></A><A=20
name=3Dindex-order_002donly-prerequisites></A>
<P>There are actually two different types of prerequisites understood by =
GNU=20
<CODE>make</CODE>: normal prerequisites such as described in the =
previous=20
section, and <EM>order-only</EM> prerequisites. A normal prerequisite =
makes two=20
statements: first, it imposes an order in which recipes will be invoked: =
the=20
recipes for all prerequisites of a target will be completed before the =
recipe=20
for the target is run. Second, it imposes a dependency relationship: if =
any=20
prerequisite is newer than the target, then the target is considered =
out-of-date=20
and must be rebuilt. </P>
<P>Normally, this is exactly what you want: if a target=E2=80=99s =
prerequisite is=20
updated, then the target should also be updated. </P>
<P>Occasionally, however, you have a situation where you want to impose =
a=20
specific ordering on the rules to be invoked <EM>without</EM> forcing =
the target=20
to be updated if one of those rules is executed. In that case, you want =
to=20
define <EM>order-only</EM> prerequisites. Order-only prerequisites can =
be=20
specified by placing a pipe symbol (<CODE>|</CODE>) in the prerequisites =
list:=20
any prerequisites to the left of the pipe symbol are normal; any =
prerequisites=20
to the right are order-only: </P>
<DIV class=3Dexample><PRE class=3Dexample><VAR>targets</VAR> : =
<VAR>normal-prerequisites</VAR> | <VAR>order-only-prerequisites</VAR>
</PRE></DIV>
<P>The normal prerequisites section may of course be empty. Also, you =
may still=20
declare multiple lines of prerequisites for the same target: they are =
appended=20
appropriately (normal prerequisites are appended to the list of normal=20
prerequisites; order-only prerequisites are appended to the list of =
order-only=20
prerequisites). Note that if you declare the same file to be both a =
normal and=20
an order-only prerequisite, the normal prerequisite takes precedence =
(since they=20
have a strict superset of the behavior of an order-only prerequisite). =
</P>
<P>Consider an example where your targets are to be placed in a separate =

directory, and that directory might not exist before <CODE>make</CODE> =
is run.=20
In this situation, you want the directory to be created before any =
targets are=20
placed into it but, because the timestamps on directories change =
whenever a file=20
is added, removed, or renamed, we certainly don=E2=80=99t want to =
rebuild all the=20
targets whenever the directory=E2=80=99s timestamp changes. One way to =
manage this is=20
with order-only prerequisites: make the directory an order-only =
prerequisite on=20
all the targets: </P>
<DIV class=3Dexample><PRE class=3Dexample>OBJDIR :=3D objdir
OBJS :=3D $(addprefix $(OBJDIR)/,foo.o bar.o baz.o)

$(OBJDIR)/%.o : %.c
        $(COMPILE.c) $(OUTPUT_OPTION) $&lt;

all: $(OBJS)

$(OBJS): | $(OBJDIR)

$(OBJDIR):
        mkdir $(OBJDIR)
</PRE></DIV>
<P>Now the rule to create the <SAMP>objdir</SAMP> directory will be run, =
if=20
needed, before any =E2=80=98<SAMP>.o</SAMP>=E2=80=99 is built, but no =
=E2=80=98<SAMP>.o</SAMP>=E2=80=99 will be=20
built because the <SAMP>objdir</SAMP> directory timestamp changed. </P>
<HR>
<A name=3DWildcards></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Directory-Searc=
h"=20
rel=3Dnext>Directory Search</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Prerequisite-Ty=
pes"=20
rel=3Dprev>Prerequisite Types</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Rules" =
rel=3Dup>Rules</A>=20
&nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A=20
name=3DUsing-Wildcard-Characters-in-File-Names></A>
<H3 class=3Dsection>4.4 Using Wildcard Characters in File Names</H3><A=20
name=3Dindex-wildcard></A><A =
name=3Dindex-file-name-with-wildcards></A><A=20
name=3Dindex-globbing-_0028wildcards_0029></A><A=20
name=3Dindex-_002a-_0028wildcard-character_0029></A><A=20
name=3Dindex-_003f-_0028wildcard-character_0029></A><A=20
name=3Dindex-_005b_2026_005d-_0028wildcard-characters_0029></A>
<P>A single file name can specify many files using <EM>wildcard =
characters</EM>.=20
The wildcard characters in <CODE>make</CODE> are =
=E2=80=98<SAMP>*</SAMP>=E2=80=99,=20
=E2=80=98<SAMP>?</SAMP>=E2=80=99 and =
=E2=80=98<SAMP>[=E2=80=A6]</SAMP>=E2=80=99, the same as in the Bourne =
shell. For=20
example, <SAMP>*.c</SAMP> specifies a list of all the files (in the =
working=20
directory) whose names end in =E2=80=98<SAMP>.c</SAMP>=E2=80=99. </P><A=20
name=3Dindex-_007e-_0028tilde_0029></A><A =
name=3Dindex-tilde-_0028_007e_0029></A><A=20
name=3Dindex-home-directory></A>
<P>The character =E2=80=98<SAMP>~</SAMP>=E2=80=99 at the beginning of a =
file name also has=20
special significance. If alone, or followed by a slash, it represents =
your home=20
directory. For example <SAMP>~/bin</SAMP> expands to =
<SAMP>/home/you/bin</SAMP>.=20
If the =E2=80=98<SAMP>~</SAMP>=E2=80=99 is followed by a word, the =
string represents the home=20
directory of the user named by that word. For example =
<SAMP>~john/bin</SAMP>=20
expands to <SAMP>/home/john/bin</SAMP>. On systems which don=E2=80=99t =
have a home=20
directory for each user (such as MS-DOS or MS-Windows), this =
functionality can=20
be simulated by setting the environment variable <VAR>HOME</VAR>. </P>
<P>Wildcard expansion is performed by <CODE>make</CODE> automatically in =
targets=20
and in prerequisites. In recipes, the shell is responsible for wildcard=20
expansion. In other contexts, wildcard expansion happens only if you =
request it=20
explicitly with the <CODE>wildcard</CODE> function. </P>
<P>The special significance of a wildcard character can be turned off by =

preceding it with a backslash. Thus, <SAMP>foo\*bar</SAMP> would refer =
to a=20
specific file whose name consists of =E2=80=98<SAMP>foo</SAMP>=E2=80=99, =
an asterisk, and=20
=E2=80=98<SAMP>bar</SAMP>=E2=80=99. </P>
<TABLE class=3Dmenu border=3D0 cellSpacing=3D0>
  <TBODY>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D1=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcard-Exampl=
es">Wildcard=20
      Examples</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Several examples. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D2=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcard-Pitfal=
l">Wildcard=20
      Pitfall</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Problems to avoid. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D3=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcard-Functi=
on">Wildcard=20
      Function</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to cause wildcard expansion where =
it does=20
      not normally take place. </TD></TR></TBODY></TABLE>
<HR>
<A name=3DWildcard-Examples></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcard-Pitfal=
l"=20
rel=3Dnext>Wildcard Pitfall</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcards"=20
rel=3Dprev>Wildcards</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcards"=20
rel=3Dup>Wildcards</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DWildcard-Examples-1></A>
<H4 class=3Dsubsection>4.4.1 Wildcard Examples</H4>
<P>Wildcards can be used in the recipe of a rule, where they are =
expanded by the=20
shell. For example, here is a rule to delete all the object files: </P>
<DIV class=3Dexample><PRE class=3Dexample>clean:
        rm -f *.o
</PRE></DIV><A name=3Dindex-rm-_0028shell-command_0029-1></A>
<P>Wildcards are also useful in the prerequisites of a rule. With the =
following=20
rule in the makefile, =E2=80=98<SAMP>make print</SAMP>=E2=80=99 will =
print all the=20
=E2=80=98<SAMP>.c</SAMP>=E2=80=99 files that have changed since the last =
time you printed them:=20
</P>
<DIV class=3Dexample><PRE class=3Dexample>print: *.c
        lpr -p $?
        touch print
</PRE></DIV><A name=3Dindex-print-target></A><A=20
name=3Dindex-lpr-_0028shell-command_0029></A><A=20
name=3Dindex-touch-_0028shell-command_0029></A>
<P>This rule uses <SAMP>print</SAMP> as an empty target file; see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Empty-Targets">=
Empty=20
Target Files to Record Events</A>. (The automatic variable =
=E2=80=98<SAMP>$?</SAMP>=E2=80=99 is=20
used to print only those files that have changed; see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
Variables</A>.) </P>
<P>Wildcard expansion does not happen when you define a variable. Thus, =
if you=20
write this: </P>
<DIV class=3Dexample><PRE class=3Dexample>objects =3D *.o
</PRE></DIV>
<P>then the value of the variable <CODE>objects</CODE> is the actual =
string=20
=E2=80=98<SAMP>*.o</SAMP>=E2=80=99. However, if you use the value of =
<CODE>objects</CODE> in a=20
target or prerequisite, wildcard expansion will take place there. If you =
use the=20
value of <CODE>objects</CODE> in a recipe, the shell may perform =
wildcard=20
expansion when the recipe runs. To set <CODE>objects</CODE> to the =
expansion,=20
instead use: </P>
<DIV class=3Dexample><PRE class=3Dexample>objects :=3D $(wildcard *.o)
</PRE></DIV>
<P>See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcard-Functi=
on">Wildcard=20
Function</A>. </P>
<HR>
<A name=3DWildcard-Pitfall></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcard-Functi=
on"=20
rel=3Dnext>Wildcard Function</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcard-Exampl=
es"=20
rel=3Dprev>Wildcard Examples</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcards"=20
rel=3Dup>Wildcards</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DPitfalls-of-Using-Wildcards></A>
<H4 class=3Dsubsection>4.4.2 Pitfalls of Using Wildcards</H4><A=20
name=3Dindex-wildcard-pitfalls></A><A =
name=3Dindex-pitfalls-of-wildcards></A><A=20
name=3Dindex-mistakes-with-wildcards></A><A=20
name=3Dindex-errors-with-wildcards></A><A =
name=3Dindex-problems-with-wildcards></A>
<P>Now here is an example of a naive way of using wildcard expansion, =
that does=20
not do what you would intend. Suppose you would like to say that the =
executable=20
file <SAMP>foo</SAMP> is made from all the object files in the =
directory, and=20
you write this: </P>
<DIV class=3Dexample><PRE class=3Dexample>objects =3D *.o

foo : $(objects)
        cc -o foo $(CFLAGS) $(objects)
</PRE></DIV>
<P>The value of <CODE>objects</CODE> is the actual string =
=E2=80=98<SAMP>*.o</SAMP>=E2=80=99.=20
Wildcard expansion happens in the rule for <SAMP>foo</SAMP>, so that =
each=20
<EM>existing</EM> =E2=80=98<SAMP>.o</SAMP>=E2=80=99 file becomes a =
prerequisite of=20
<SAMP>foo</SAMP> and will be recompiled if necessary. </P>
<P>But what if you delete all the =E2=80=98<SAMP>.o</SAMP>=E2=80=99 =
files? When a wildcard=20
matches no files, it is left as it is, so then <SAMP>foo</SAMP> will =
depend on=20
the oddly-named file <SAMP>*.o</SAMP>. Since no such file is likely to =
exist,=20
<CODE>make</CODE> will give you an error saying it cannot figure out how =
to make=20
<SAMP>*.o</SAMP>. This is not what you want! </P>
<P>Actually it is possible to obtain the desired result with wildcard =
expansion,=20
but you need more sophisticated techniques, including the =
<CODE>wildcard</CODE>=20
function and string substitution. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcard-Functi=
on">The=20
Function <CODE>wildcard</CODE></A>. </P><A=20
name=3Dindex-wildcards-and-MS_002dDOS_002fMS_002dWindows-backslashes></A>=
<A=20
name=3Dindex-backslashes-in-pathnames-and-wildcard-expansion></A>
<P>Microsoft operating systems (MS-DOS and MS-Windows) use backslashes =
to=20
separate directories in pathnames, like so: </P>
<DIV class=3Dexample><PRE class=3Dexample>  c:\foo\bar\baz.c
</PRE></DIV>
<P>This is equivalent to the Unix-style <SAMP>c:/foo/bar/baz.c</SAMP> =
(the=20
<SAMP>c:</SAMP> part is the so-called drive letter). When =
<CODE>make</CODE> runs=20
on these systems, it supports backslashes as well as the Unix-style =
forward=20
slashes in pathnames. However, this support does <EM>not</EM> include =
the=20
wildcard expansion, where backslash is a quote character. Therefore, you =

<EM>must</EM> use Unix-style slashes in these cases. </P>
<HR>
<A name=3DWildcard-Function></A>
<DIV class=3Dheader>
<P>Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcard-Pitfal=
l"=20
rel=3Dprev>Wildcard Pitfall</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcards"=20
rel=3Dup>Wildcards</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DThe-Function-wildcard></A>
<H4 class=3Dsubsection>4.4.3 The Function <CODE>wildcard</CODE></H4><A=20
name=3Dindex-wildcard-1></A>
<P>Wildcard expansion happens automatically in rules. But wildcard =
expansion=20
does not normally take place when a variable is set, or inside the =
arguments of=20
a function. If you want to do wildcard expansion in such places, you =
need to use=20
the <CODE>wildcard</CODE> function, like this: </P>
<DIV class=3Dexample><PRE class=3Dexample>$(wildcard =
<VAR>pattern</VAR>=E2=80=A6)
</PRE></DIV>
<P>This string, used anywhere in a makefile, is replaced by a =
space-separated=20
list of names of existing files that match one of the given file name =
patterns.=20
If no existing file name matches a pattern, then that pattern is omitted =
from=20
the output of the <CODE>wildcard</CODE> function. Note that this is =
different=20
from how unmatched wildcards behave in rules, where they are used =
verbatim=20
rather than ignored (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcard-Pitfal=
l">Wildcard=20
Pitfall</A>). </P>
<P>One use of the <CODE>wildcard</CODE> function is to get a list of all =
the C=20
source files in a directory, like this: </P>
<DIV class=3Dexample><PRE class=3Dexample>$(wildcard *.c)
</PRE></DIV>
<P>We can change the list of C source files into a list of object files =
by=20
replacing the =E2=80=98<SAMP>.c</SAMP>=E2=80=99 suffix with =
=E2=80=98<SAMP>.o</SAMP>=E2=80=99 in the result,=20
like this: </P>
<DIV class=3Dexample><PRE class=3Dexample>$(patsubst %.c,%.o,$(wildcard =
*.c))
</PRE></DIV>
<P>(Here we have used another function, <CODE>patsubst</CODE>. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Functions=20
for String Substitution and Analysis</A>.) </P>
<P>Thus, a makefile to compile all C source files in the directory and =
then link=20
them together could be written as follows: </P>
<DIV class=3Dexample><PRE class=3Dexample>objects :=3D $(patsubst =
%.c,%.o,$(wildcard *.c))

foo : $(objects)
        cc -o foo $(objects)
</PRE></DIV>
<P>(This takes advantage of the implicit rule for compiling C programs, =
so there=20
is no need to write explicit rules for compiling the files. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavors">The =
Two Flavors=20
of Variables</A>, for an explanation of =
=E2=80=98<SAMP>:=3D</SAMP>=E2=80=99, which is a variant of=20
=E2=80=98<SAMP>=3D</SAMP>=E2=80=99.) </P>
<HR>
<A name=3DDirectory-Search></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Phony-Targets" =

rel=3Dnext>Phony Targets</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcards"=20
rel=3Dprev>Wildcards</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Rules" =
rel=3Dup>Rules</A>=20
&nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A=20
name=3DSearching-Directories-for-Prerequisites></A>
<H3 class=3Dsection>4.5 Searching Directories for Prerequisites</H3><A=20
name=3Dindex-VPATH></A><A name=3Dindex-vpath-1></A><A =
name=3Dindex-vpath></A><A=20
name=3Dindex-search-path-for-prerequisites-_0028VPATH_0029></A><A=20
name=3Dindex-directory-search-_0028VPATH_0029></A>
<P>For large systems, it is often desirable to put sources in a separate =

directory from the binaries. The <EM>directory search</EM> features of=20
<CODE>make</CODE> facilitate this by searching several directories =
automatically=20
to find a prerequisite. When you redistribute the files among =
directories, you=20
do not need to change the individual rules, just the search paths. </P>
<TABLE class=3Dmenu border=3D0 cellSpacing=3D0>
  <TBODY>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D1=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#General-Search"=
>General=20
      Search</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Specifying a search path that applies =
to every=20
      prerequisite. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D2=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Selective-Searc=
h">Selective=20
      Search</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Specifying a search path for a =
specified class=20
      of names. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D3=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Search-Algorith=
m">Search=20
      Algorithm</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>When and how search paths are applied. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D4=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipes_002fSea=
rch">Recipes/Search</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to write recipes that work =
together with=20
      search paths. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D5=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit_002fSe=
arch">Implicit/Search</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How search paths affect implicit =
rules. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D6=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Libraries_002fS=
earch">Libraries/Search</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Directory search for link libraries.=20
  </TD></TR></TBODY></TABLE>
<HR>
<A name=3DGeneral-Search></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Selective-Searc=
h"=20
rel=3Dnext>Selective Search</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Directory-Searc=
h"=20
rel=3Dprev>Directory Search</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Directory-Searc=
h"=20
rel=3Dup>Directory Search</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A=20
name=3DVPATH_003a-Search-Path-for-All-Prerequisites></A>
<H4 class=3Dsubsection>4.5.1 <CODE>VPATH</CODE>: Search Path for All=20
Prerequisites</H4><A name=3Dindex-VPATH-1></A>
<P>The value of the <CODE>make</CODE> variable <CODE>VPATH</CODE> =
specifies a=20
list of directories that <CODE>make</CODE> should search. Most often, =
the=20
directories are expected to contain prerequisite files that are not in =
the=20
current directory; however, <CODE>make</CODE> uses <CODE>VPATH</CODE> as =
a=20
search list for both prerequisites and targets of rules. </P>
<P>Thus, if a file that is listed as a target or prerequisite does not =
exist in=20
the current directory, <CODE>make</CODE> searches the directories listed =
in=20
<CODE>VPATH</CODE> for a file with that name. If a file is found in one =
of them,=20
that file may become the prerequisite (see below). Rules may then =
specify the=20
names of files in the prerequisite list as if they all existed in the =
current=20
directory. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipes_002fSea=
rch">Writing=20
Recipes with Directory Search</A>. </P>
<P>In the <CODE>VPATH</CODE> variable, directory names are separated by =
colons=20
or blanks. The order in which directories are listed is the order =
followed by=20
<CODE>make</CODE> in its search. (On MS-DOS and MS-Windows, semi-colons =
are used=20
as separators of directory names in <CODE>VPATH</CODE>, since the colon =
can be=20
used in the pathname itself, after the drive letter.) </P>
<P>For example, </P>
<DIV class=3Dexample><PRE class=3Dexample>VPATH =3D src:../headers
</PRE></DIV>
<P>specifies a path containing two directories, <SAMP>src</SAMP> and=20
<SAMP>../headers</SAMP>, which <CODE>make</CODE> searches in that order. =
</P>
<P>With this value of <CODE>VPATH</CODE>, the following rule, </P>
<DIV class=3Dexample><PRE class=3Dexample>foo.o : foo.c
</PRE></DIV>
<P>is interpreted as if it were written like this: </P>
<DIV class=3Dexample><PRE class=3Dexample>foo.o : src/foo.c
</PRE></DIV>
<P>assuming the file <SAMP>foo.c</SAMP> does not exist in the current =
directory=20
but is found in the directory <SAMP>src</SAMP>. </P>
<HR>
<A name=3DSelective-Search></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Search-Algorith=
m"=20
rel=3Dnext>Search Algorithm</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#General-Search"=
=20
rel=3Dprev>General Search</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Directory-Searc=
h"=20
rel=3Dup>Directory Search</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DThe-vpath-Directive></A>
<H4 class=3Dsubsection>4.5.2 The <CODE>vpath</CODE> Directive</H4><A=20
name=3Dindex-vpath-2></A>
<P>Similar to the <CODE>VPATH</CODE> variable, but more selective, is =
the=20
<CODE>vpath</CODE> directive (note lower case), which allows you to =
specify a=20
search path for a particular class of file names: those that match a =
particular=20
pattern. Thus you can supply certain search directories for one class of =
file=20
names and other directories (or none) for other file names. </P>
<P>There are three forms of the <CODE>vpath</CODE> directive: </P>
<DL compact>
  <DT><CODE>vpath <VAR>pattern</VAR> <VAR>directories</VAR></CODE></DT>
  <DD>
  <P>Specify the search path <VAR>directories</VAR> for file names that =
match=20
  <VAR>pattern</VAR>. </P>
  <P>The search path, <VAR>directories</VAR>, is a list of directories =
to be=20
  searched, separated by colons (semi-colons on MS-DOS and MS-Windows) =
or=20
  blanks, just like the search path used in the <CODE>VPATH</CODE> =
variable.=20
  </P></DD>
  <DT><CODE>vpath <VAR>pattern</VAR></CODE></DT>
  <DD>
  <P>Clear out the search path associated with <VAR>pattern</VAR>. =
</P></DD>
  <DT><CODE>vpath</CODE></DT>
  <DD>
  <P>Clear all search paths previously specified with <CODE>vpath</CODE> =

  directives. </P></DD></DL>
<P>A <CODE>vpath</CODE> pattern is a string containing a =
=E2=80=98<SAMP>%</SAMP>=E2=80=99=20
character. The string must match the file name of a prerequisite that is =
being=20
searched for, the =E2=80=98<SAMP>%</SAMP>=E2=80=99 character matching =
any sequence of zero or=20
more characters (as in pattern rules; see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Rules">=
Defining=20
and Redefining Pattern Rules</A>). For example, <CODE>%.h</CODE> matches =
files=20
that end in <CODE>.h</CODE>. (If there is no =
=E2=80=98<SAMP>%</SAMP>=E2=80=99, the pattern must=20
match the prerequisite exactly, which is not useful very often.) </P><A=20
name=3Dindex-_0025_002c-quoting-in-vpath></A><A=20
name=3Dindex-_0025_002c-quoting-with-_005c-_0028backslash_0029></A><A=20
name=3Dindex-_005c-_0028backslash_0029_002c-to-quote-_0025></A><A=20
name=3Dindex-backslash-_0028_005c_0029_002c-to-quote-_0025></A><A=20
name=3Dindex-quoting-_0025_002c-in-vpath></A>
<P>=E2=80=98<SAMP>%</SAMP>=E2=80=99 characters in a <CODE>vpath</CODE> =
directive=E2=80=99s pattern can=20
be quoted with preceding backslashes (=E2=80=98<SAMP>\</SAMP>=E2=80=99). =
Backslashes that would=20
otherwise quote =E2=80=98<SAMP>%</SAMP>=E2=80=99 characters can be =
quoted with more backslashes.=20
Backslashes that quote =E2=80=98<SAMP>%</SAMP>=E2=80=99 characters or =
other backslashes are=20
removed from the pattern before it is compared to file names. =
Backslashes that=20
are not in danger of quoting =E2=80=98<SAMP>%</SAMP>=E2=80=99 characters =
go unmolested. </P>
<P>When a prerequisite fails to exist in the current directory, if the=20
<VAR>pattern</VAR> in a <CODE>vpath</CODE> directive matches the name of =
the=20
prerequisite file, then the <VAR>directories</VAR> in that directive are =

searched just like (and before) the directories in the =
<CODE>VPATH</CODE>=20
variable. </P>
<P>For example, </P>
<DIV class=3Dexample><PRE class=3Dexample>vpath %.h ../headers
</PRE></DIV>
<P>tells <CODE>make</CODE> to look for any prerequisite whose name ends =
in=20
<SAMP>.h</SAMP> in the directory <SAMP>../headers</SAMP> if the file is =
not=20
found in the current directory. </P>
<P>If several <CODE>vpath</CODE> patterns match the prerequisite =
file=E2=80=99s name,=20
then <CODE>make</CODE> processes each matching <CODE>vpath</CODE> =
directive one=20
by one, searching all the directories mentioned in each directive.=20
<CODE>make</CODE> handles multiple <CODE>vpath</CODE> directives in the =
order in=20
which they appear in the makefile; multiple directives with the same =
pattern are=20
independent of each other. </P>
<P>Thus, </P>
<DIV class=3Dexample><PRE class=3Dexample>vpath %.c foo
vpath %   blish
vpath %.c bar
</PRE></DIV>
<P>will look for a file ending in =E2=80=98<SAMP>.c</SAMP>=E2=80=99 in =
<SAMP>foo</SAMP>, then=20
<SAMP>blish</SAMP>, then <SAMP>bar</SAMP>, while </P>
<DIV class=3Dexample><PRE class=3Dexample>vpath %.c foo:bar
vpath %   blish
</PRE></DIV>
<P>will look for a file ending in =E2=80=98<SAMP>.c</SAMP>=E2=80=99 in =
<SAMP>foo</SAMP>, then=20
<SAMP>bar</SAMP>, then <SAMP>blish</SAMP>. </P>
<HR>
<A name=3DSearch-Algorithm></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipes_002fSea=
rch"=20
rel=3Dnext>Recipes/Search</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Selective-Searc=
h"=20
rel=3Dprev>Selective Search</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Directory-Searc=
h"=20
rel=3Dup>Directory Search</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DHow-Directory-Searches-are-Performed></A>
<H4 class=3Dsubsection>4.5.3 How Directory Searches are Performed</H4><A =

name=3Dindex-algorithm-for-directory-search></A><A=20
name=3Dindex-directory-search-algorithm></A>
<P>When a prerequisite is found through directory search, regardless of =
type=20
(general or selective), the pathname located may not be the one that=20
<CODE>make</CODE> actually provides you in the prerequisite list. =
Sometimes the=20
path discovered through directory search is thrown away. </P>
<P>The algorithm <CODE>make</CODE> uses to decide whether to keep or =
abandon a=20
path found via directory search is as follows: </P>
<OL>
  <LI>If a target file does not exist at the path specified in the =
makefile,=20
  directory search is performed. </LI>
  <LI>If the directory search is successful, that path is kept and this =
file is=20
  tentatively stored as the target. </LI>
  <LI>All prerequisites of this target are examined using this same =
method.=20
</LI>
  <LI>After processing the prerequisites, the target may or may not need =
to be=20
  rebuilt:=20
  <OL>
    <LI>If the target does <EM>not</EM> need to be rebuilt, the path to =
the file=20
    found during directory search is used for any prerequisite lists =
which=20
    contain this target. In short, if <CODE>make</CODE> doesn=E2=80=99t =
need to rebuild=20
    the target then you use the path found via directory search. </LI>
    <LI>If the target <EM>does</EM> need to be rebuilt (is out-of-date), =
the=20
    pathname found during directory search is <EM>thrown away</EM>, and =
the=20
    target is rebuilt using the file name specified in the makefile. In =
short,=20
    if <CODE>make</CODE> must rebuild, then the target is rebuilt =
locally, not=20
    in the directory found via directory search. </LI></OL></LI></OL>
<P>This algorithm may seem complex, but in practice it is quite often =
exactly=20
what you want. </P><A=20
name=3Dindex-traditional-directory-search-_0028GPATH_0029></A><A=20
name=3Dindex-directory-search_002c-traditional-_0028GPATH_0029></A>
<P>Other versions of <CODE>make</CODE> use a simpler algorithm: if the =
file does=20
not exist, and it is found via directory search, then that pathname is =
always=20
used whether or not the target needs to be built. Thus, if the target is =
rebuilt=20
it is created at the pathname discovered during directory search. </P><A =

name=3Dindex-GPATH></A>
<P>If, in fact, this is the behavior you want for some or all of your=20
directories, you can use the <CODE>GPATH</CODE> variable to indicate =
this to=20
<CODE>make</CODE>. </P>
<P><CODE>GPATH</CODE> has the same syntax and format as =
<CODE>VPATH</CODE> (that=20
is, a space- or colon-delimited list of pathnames). If an out-of-date =
target is=20
found by directory search in a directory that also appears in=20
<CODE>GPATH</CODE>, then that pathname is not thrown away. The target is =
rebuilt=20
using the expanded path. </P>
<HR>
<A name=3DRecipes_002fSearch></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit_002fSe=
arch"=20
rel=3Dnext>Implicit/Search</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Search-Algorith=
m"=20
rel=3Dprev>Search Algorithm</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Directory-Searc=
h"=20
rel=3Dup>Directory Search</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DWriting-Recipes-with-Directory-Search></A>
<H4 class=3Dsubsection>4.5.4 Writing Recipes with Directory =
Search</H4><A=20
name=3Dindex-recipes_002c-and-directory-search></A><A=20
name=3Dindex-directory-search-_0028VPATH_0029_002c-and-recipes></A>
<P>When a prerequisite is found in another directory through directory =
search,=20
this cannot change the recipe of the rule; they will execute as written. =

Therefore, you must write the recipe with care so that it will look for =
the=20
prerequisite in the directory where <CODE>make</CODE> finds it. </P>
<P>This is done with the <EM>automatic variables</EM> such as =
=E2=80=98<SAMP>$^</SAMP>=E2=80=99=20
(see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
Variables</A>). For instance, the value of =
=E2=80=98<SAMP>$^</SAMP>=E2=80=99 is a list of all=20
the prerequisites of the rule, including the names of the directories in =
which=20
they were found, and the value of =E2=80=98<SAMP>$@</SAMP>=E2=80=99 is =
the target. Thus: </P>
<DIV class=3Dexample><PRE class=3Dexample>foo.o : foo.c
        cc -c $(CFLAGS) $^ -o $@
</PRE></DIV>
<P>(The variable <CODE>CFLAGS</CODE> exists so you can specify flags for =
C=20
compilation by implicit rules; we use it here for consistency so it will =
affect=20
all C compilations uniformly; see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Variables=20
Used by Implicit Rules</A>.) </P>
<P>Often the prerequisites include header files as well, which you do =
not want=20
to mention in the recipe. The automatic variable =
=E2=80=98<SAMP>$&lt;</SAMP>=E2=80=99 is just=20
the first prerequisite: </P>
<DIV class=3Dexample><PRE class=3Dexample>VPATH =3D src:../headers
foo.o : foo.c defs.h hack.h
        cc -c $(CFLAGS) $&lt; -o $@
</PRE></DIV>
<HR>
<A name=3DImplicit_002fSearch></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Libraries_002fS=
earch"=20
rel=3Dnext>Libraries/Search</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipes_002fSea=
rch"=20
rel=3Dprev>Recipes/Search</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Directory-Searc=
h"=20
rel=3Dup>Directory Search</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DDirectory-Search-and-Implicit-Rules></A>
<H4 class=3Dsubsection>4.5.5 Directory Search and Implicit Rules</H4><A=20
name=3Dindex-VPATH_002c-and-implicit-rules></A><A=20
name=3Dindex-directory-search-_0028VPATH_0029_002c-and-implicit-rules></A=
><A=20
name=3Dindex-search-path-for-prerequisites-_0028VPATH_0029_002c-and-impli=
cit-rules></A><A=20
name=3Dindex-implicit-rule_002c-and-directory-search></A><A=20
name=3Dindex-implicit-rule_002c-and-VPATH></A><A=20
name=3Dindex-rule_002c-implicit_002c-and-directory-search></A><A=20
name=3Dindex-rule_002c-implicit_002c-and-VPATH></A>
<P>The search through the directories specified in <CODE>VPATH</CODE> or =
with=20
<CODE>vpath</CODE> also happens during consideration of implicit rules =
(see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rules"=
>Using=20
Implicit Rules</A>). </P>
<P>For example, when a file <SAMP>foo.o</SAMP> has no explicit rule,=20
<CODE>make</CODE> considers implicit rules, such as the built-in rule to =
compile=20
<SAMP>foo.c</SAMP> if that file exists. If such a file is lacking in the =
current=20
directory, the appropriate directories are searched for it. If=20
<SAMP>foo.c</SAMP> exists (or is mentioned in the makefile) in any of =
the=20
directories, the implicit rule for C compilation is applied. </P>
<P>The recipes of implicit rules normally use automatic variables as a =
matter of=20
necessity; consequently they will use the file names found by directory =
search=20
with no extra effort. </P>
<HR>
<A name=3DLibraries_002fSearch></A>
<DIV class=3Dheader>
<P>Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit_002fSe=
arch"=20
rel=3Dprev>Implicit/Search</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Directory-Searc=
h"=20
rel=3Dup>Directory Search</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DDirectory-Search-for-Link-Libraries></A>
<H4 class=3Dsubsection>4.5.6 Directory Search for Link Libraries</H4><A=20
name=3Dindex-link-libraries_002c-and-directory-search></A><A=20
name=3Dindex-libraries-for-linking_002c-directory-search></A><A=20
name=3Dindex-directory-search-_0028VPATH_0029_002c-and-link-libraries></A=
><A=20
name=3Dindex-VPATH_002c-and-link-libraries></A><A=20
name=3Dindex-search-path-for-prerequisites-_0028VPATH_0029_002c-and-link-=
libraries></A><A=20
name=3Dindex-_002dl-_0028library-search_0029></A><A=20
name=3Dindex-link-libraries_002c-patterns-matching></A><A=20
name=3Dindex-_002eLIBPATTERNS_002c-and-link-libraries></A><A=20
name=3Dindex-_002eLIBPATTERNS></A>
<P>Directory search applies in a special way to libraries used with the =
linker.=20
This special feature comes into play when you write a prerequisite whose =
name is=20
of the form =E2=80=98<SAMP>-l<VAR>name</VAR></SAMP>=E2=80=99. (You can =
tell something strange is=20
going on here because the prerequisite is normally the name of a file, =
and the=20
<EM>file name</EM> of a library generally looks like=20
<SAMP>lib<VAR>name</VAR>.a</SAMP>, not like =
=E2=80=98<SAMP>-l<VAR>name</VAR></SAMP>=E2=80=99.)=20
</P>
<P>When a prerequisite=E2=80=99s name has the form =
=E2=80=98<SAMP>-l<VAR>name</VAR></SAMP>=E2=80=99,=20
<CODE>make</CODE> handles it specially by searching for the file=20
<SAMP>lib<VAR>name</VAR>.so</SAMP>, and, if it is not found, for the =
file=20
<SAMP>lib<VAR>name</VAR>.a</SAMP> in the current directory, in =
directories=20
specified by matching <CODE>vpath</CODE> search paths and the =
<CODE>VPATH</CODE>=20
search path, and then in the directories <SAMP>/lib</SAMP>,=20
<SAMP>/usr/lib</SAMP>, and <SAMP><VAR>prefix</VAR>/lib</SAMP> (normally=20
<SAMP>/usr/local/lib</SAMP>, but MS-DOS/MS-Windows versions of =
<CODE>make</CODE>=20
behave as if <VAR>prefix</VAR> is defined to be the root of the DJGPP=20
installation tree). </P>
<P>For example, if there is a <SAMP>/usr/lib/libcurses.a</SAMP> library =
on your=20
system (and no <SAMP>/usr/lib/libcurses.so</SAMP> file), then </P>
<DIV class=3Dexample><PRE class=3Dexample>foo : foo.c -lcurses
        cc $^ -o $@
</PRE></DIV>
<P>would cause the command =E2=80=98<SAMP>cc foo.c /usr/lib/libcurses.a =
-o foo</SAMP>=E2=80=99=20
to be executed when <SAMP>foo</SAMP> is older than <SAMP>foo.c</SAMP> or =
than=20
<SAMP>/usr/lib/libcurses.a</SAMP>. </P>
<P>Although the default set of files to be searched for is=20
<SAMP>lib<VAR>name</VAR>.so</SAMP> and =
<SAMP>lib<VAR>name</VAR>.a</SAMP>, this=20
is customizable via the <CODE>.LIBPATTERNS</CODE> variable. Each word in =
the=20
value of this variable is a pattern string. When a prerequisite like=20
=E2=80=98<SAMP>-l<VAR>name</VAR></SAMP>=E2=80=99 is seen, =
<CODE>make</CODE> will replace the=20
percent in each pattern in the list with <VAR>name</VAR> and perform the =
above=20
directory searches using each library file name. </P>
<P>The default value for <CODE>.LIBPATTERNS</CODE> is =
=E2=80=98<SAMP>lib%.so=20
lib%.a</SAMP>=E2=80=99, which provides the default behavior described =
above. </P>
<P>You can turn off link library expansion completely by setting this =
variable=20
to an empty value. </P>
<HR>
<A name=3DPhony-Targets></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Force-Targets" =

rel=3Dnext>Force Targets</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Directory-Searc=
h"=20
rel=3Dprev>Directory Search</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Rules" =
rel=3Dup>Rules</A>=20
&nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DPhony-Targets-1></A>
<H3 class=3Dsection>4.6 Phony Targets</H3><A =
name=3Dindex-phony-targets></A><A=20
name=3Dindex-targets_002c-phony></A><A =
name=3Dindex-targets-without-a-file></A>
<P>A phony target is one that is not really the name of a file; rather =
it is=20
just a name for a recipe to be executed when you make an explicit =
request. There=20
are two reasons to use a phony target: to avoid a conflict with a file =
of the=20
same name, and to improve performance. </P>
<P>If you write a rule whose recipe will not create the target file, the =
recipe=20
will be executed every time the target comes up for remaking. Here is an =

example: </P>
<DIV class=3Dexample><PRE class=3Dexample>clean:
        rm *.o temp
</PRE></DIV>
<P>Because the <CODE>rm</CODE> command does not create a file named=20
<SAMP>clean</SAMP>, probably no such file will ever exist. Therefore, =
the=20
<CODE>rm</CODE> command will be executed every time you say =
=E2=80=98<SAMP>make=20
clean</SAMP>=E2=80=99. <A =
name=3Dindex-rm-_0028shell-command_0029-2></A></P><A=20
name=3Dindex-_002ePHONY></A>
<P>In this example, the <SAMP>clean</SAMP> target will not work properly =
if a=20
file named <SAMP>clean</SAMP> is ever created in this directory. Since =
it has no=20
prerequisites, <SAMP>clean</SAMP> would always be considered up to date =
and its=20
recipe would not be executed. To avoid this problem you can explicitly =
declare=20
the target to be phony by making it a prerequisite of the special target =

<CODE>.PHONY</CODE> (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
">Special=20
Built-in Target Names</A>) as follows: </P>
<DIV class=3Dexample><PRE class=3Dexample>.PHONY: clean
clean:
        rm *.o temp
</PRE></DIV>
<P>Once this is done, =E2=80=98<SAMP>make clean</SAMP>=E2=80=99 will run =
the recipe regardless=20
of whether there is a file named <SAMP>clean</SAMP>. </P>
<P>Phony targets are also useful in conjunction with recursive =
invocations of=20
<CODE>make</CODE> (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Recursion">Recu=
rsive Use=20
of <CODE>make</CODE></A>). In this situation the makefile will often =
contain a=20
variable which lists a number of sub-directories to be built. A =
simplistic way=20
to handle this is to define one rule with a recipe that loops over the=20
sub-directories, like this: </P>
<DIV class=3Dexample><PRE class=3Dexample>SUBDIRS =3D foo bar baz

subdirs:
        for dir in $(SUBDIRS); do \
          $(MAKE) -C $$dir; \
        done
</PRE></DIV>
<P>There are problems with this method, however. First, any error =
detected in a=20
sub-make is ignored by this rule, so it will continue to build the rest =
of the=20
directories even when one fails. This can be overcome by adding shell =
commands=20
to note the error and exit, but then it will do so even if =
<CODE>make</CODE> is=20
invoked with the <CODE>-k</CODE> option, which is unfortunate. Second, =
and=20
perhaps more importantly, you cannot take advantage of =
<CODE>make</CODE>=E2=80=99s=20
ability to build targets in parallel (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel">Paral=
lel=20
Execution</A>), since there is only one rule. </P>
<P>By declaring the sub-directories as <CODE>.PHONY</CODE> targets (you =
must do=20
this as the sub-directory obviously always exists; otherwise it =
won=E2=80=99t be built)=20
you can remove these problems: </P>
<DIV class=3Dexample><PRE class=3Dexample>SUBDIRS =3D foo bar baz

.PHONY: subdirs $(SUBDIRS)

subdirs: $(SUBDIRS)

$(SUBDIRS):
        $(MAKE) -C $@

foo: baz
</PRE></DIV>
<P>Here we=E2=80=99ve also declared that the <SAMP>foo</SAMP> =
sub-directory cannot be=20
built until after the <SAMP>baz</SAMP> sub-directory is complete; this =
kind of=20
relationship declaration is particularly important when attempting =
parallel=20
builds. </P>
<P>The implicit rule search (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rules"=
>Implicit=20
Rules</A>) is skipped for <CODE>.PHONY</CODE> targets. This is why =
declaring a=20
target as <CODE>.PHONY</CODE> is good for performance, even if you are =
not=20
worried about the actual file existing. </P>
<P>A phony target should not be a prerequisite of a real target file; if =
it is,=20
its recipe will be run every time <CODE>make</CODE> goes to update that =
file. As=20
long as a phony target is never a prerequisite of a real target, the =
phony=20
target recipe will be executed only when the phony target is a specified =
goal=20
(see <A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Goals">Argument=
s=20
to Specify the Goals</A>). </P>
<P>Phony targets can have prerequisites. When one directory contains =
multiple=20
programs, it is most convenient to describe all of the programs in one =
makefile=20
<SAMP>./Makefile</SAMP>. Since the target remade by default will be the =
first=20
one in the makefile, it is common to make this a phony target named=20
=E2=80=98<SAMP>all</SAMP>=E2=80=99 and give it, as prerequisites, all =
the individual programs.=20
For example: </P>
<DIV class=3Dexample><PRE class=3Dexample>all : prog1 prog2 prog3
.PHONY : all

prog1 : prog1.o utils.o
        cc -o prog1 prog1.o utils.o

prog2 : prog2.o
        cc -o prog2 prog2.o

prog3 : prog3.o sort.o utils.o
        cc -o prog3 prog3.o sort.o utils.o
</PRE></DIV>
<P>Now you can say just =E2=80=98<SAMP>make</SAMP>=E2=80=99 to remake =
all three programs, or=20
specify as arguments the ones to remake (as in =E2=80=98<SAMP>make prog1 =
prog3</SAMP>=E2=80=99).=20
Phoniness is not inherited: the prerequisites of a phony target are not=20
themselves phony, unless explicitly declared to be so. </P>
<P>When one phony target is a prerequisite of another, it serves as a =
subroutine=20
of the other. For example, here =E2=80=98<SAMP>make =
cleanall</SAMP>=E2=80=99 will delete the=20
object files, the difference files, and the file <SAMP>program</SAMP>: =
</P>
<DIV class=3Dexample><PRE class=3Dexample>.PHONY: cleanall cleanobj =
cleandiff

cleanall : cleanobj cleandiff
        rm program

cleanobj :
        rm *.o

cleandiff :
        rm *.diff
</PRE></DIV>
<HR>
<A name=3DForce-Targets></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Empty-Targets" =

rel=3Dnext>Empty Targets</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Phony-Targets" =

rel=3Dprev>Phony Targets</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Rules" =
rel=3Dup>Rules</A>=20
&nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A=20
name=3DRules-without-Recipes-or-Prerequisites></A>
<H3 class=3Dsection>4.7 Rules without Recipes or Prerequisites</H3><A=20
name=3Dindex-force-targets></A><A name=3Dindex-targets_002c-force></A><A =

name=3Dindex-FORCE></A><A =
name=3Dindex-rule_002c-no-recipe-or-prerequisites></A>
<P>If a rule has no prerequisites or recipe, and the target of the rule =
is a=20
nonexistent file, then <CODE>make</CODE> imagines this target to have =
been=20
updated whenever its rule is run. This implies that all targets =
depending on=20
this one will always have their recipe run. </P>
<P>An example will illustrate this: </P>
<DIV class=3Dexample><PRE class=3Dexample>clean: FORCE
        rm $(objects)
FORCE:
</PRE></DIV>
<P>Here the target =E2=80=98<SAMP>FORCE</SAMP>=E2=80=99 satisfies the =
special conditions, so the=20
target <SAMP>clean</SAMP> that depends on it is forced to run its =
recipe. There=20
is nothing special about the name =E2=80=98<SAMP>FORCE</SAMP>=E2=80=99, =
but that is one name=20
commonly used this way. </P>
<P>As you can see, using =E2=80=98<SAMP>FORCE</SAMP>=E2=80=99 this way =
has the same results as=20
using =E2=80=98<SAMP>.PHONY: clean</SAMP>=E2=80=99. </P>
<P>Using =E2=80=98<SAMP>.PHONY</SAMP>=E2=80=99 is more explicit and more =
efficient. However,=20
other versions of <CODE>make</CODE> do not support =
=E2=80=98<SAMP>.PHONY</SAMP>=E2=80=99; thus=20
=E2=80=98<SAMP>FORCE</SAMP>=E2=80=99 appears in many makefiles. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Phony-Targets">=
Phony=20
Targets</A>. </P>
<HR>
<A name=3DEmpty-Targets></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
"=20
rel=3Dnext>Special Targets</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Force-Targets" =

rel=3Dprev>Force Targets</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Rules" =
rel=3Dup>Rules</A>=20
&nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DEmpty-Target-Files-to-Record-Events></A>
<H3 class=3Dsection>4.8 Empty Target Files to Record Events</H3><A=20
name=3Dindex-empty-targets></A><A name=3Dindex-targets_002c-empty></A><A =

name=3Dindex-recording-events-with-empty-targets></A>
<P>The <EM>empty target</EM> is a variant of the phony target; it is =
used to=20
hold recipes for an action that you request explicitly from time to =
time. Unlike=20
a phony target, this target file can really exist; but the =
file=E2=80=99s contents do=20
not matter, and usually are empty. </P>
<P>The purpose of the empty target file is to record, with its =
last-modification=20
time, when the rule=E2=80=99s recipe was last executed. It does so =
because one of the=20
commands in the recipe is a <CODE>touch</CODE> command to update the =
target=20
file. </P>
<P>The empty target file should have some prerequisites (otherwise it =
doesn=E2=80=99t=20
make sense). When you ask to remake the empty target, the recipe is =
executed if=20
any prerequisite is more recent than the target; in other words, if a=20
prerequisite has changed since the last time you remade the target. Here =
is an=20
example: </P>
<DIV class=3Dexample><PRE class=3Dexample>print: foo.c bar.c
        lpr -p $?
        touch print
</PRE></DIV><A name=3Dindex-print-target-1></A><A=20
name=3Dindex-lpr-_0028shell-command_0029-1></A><A=20
name=3Dindex-touch-_0028shell-command_0029-1></A>
<P>With this rule, =E2=80=98<SAMP>make print</SAMP>=E2=80=99 will =
execute the <CODE>lpr</CODE>=20
command if either source file has changed since the last =
=E2=80=98<SAMP>make=20
print</SAMP>=E2=80=99. The automatic variable =
=E2=80=98<SAMP>$?</SAMP>=E2=80=99 is used to print only=20
those files that have changed (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
Variables</A>). </P>
<HR>
<A name=3DSpecial-Targets></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Multiple-Target=
s"=20
rel=3Dnext>Multiple Targets</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Empty-Targets" =

rel=3Dprev>Empty Targets</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Rules" =
rel=3Dup>Rules</A>=20
&nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DSpecial-Built_002din-Target-Names></A>
<H3 class=3Dsection>4.9 Special Built-in Target Names</H3><A=20
name=3Dindex-special-targets></A><A =
name=3Dindex-built_002din-special-targets></A><A=20
name=3Dindex-targets_002c-built_002din-special></A>
<P>Certain names have special meanings if they appear as targets. </P>
<DL compact>
  <DD><A name=3Dindex-_002ePHONY-1></A></DD>
  <DT><CODE>.PHONY</CODE></DT>
  <DD>
  <P>The prerequisites of the special target <CODE>.PHONY</CODE> are =
considered=20
  to be phony targets. When it is time to consider such a target,=20
  <CODE>make</CODE> will run its recipe unconditionally, regardless of =
whether a=20
  file with that name exists or what its last-modification time is. See =
<A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Phony-Targets">=
Phony=20
  Targets</A>. </P><A name=3Dindex-_002eSUFFIXES></A></DD>
  <DT><CODE>.SUFFIXES</CODE></DT>
  <DD>
  <P>The prerequisites of the special target <CODE>.SUFFIXES</CODE> are =
the list=20
  of suffixes to be used in checking for suffix rules. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Suffix-Rules">O=
ld-Fashioned=20
  Suffix Rules</A>. </P><A name=3Dindex-_002eDEFAULT></A></DD>
  <DT><CODE>.DEFAULT</CODE></DT>
  <DD>
  <P>The recipe specified for <CODE>.DEFAULT</CODE> is used for any =
target for=20
  which no rules are found (either explicit rules or implicit rules). =
See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Last-Resort">La=
st=20
  Resort</A>. If a <CODE>.DEFAULT</CODE> recipe is specified, every file =

  mentioned as a prerequisite, but not as a target in a rule, will have =
that=20
  recipe executed on its behalf. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rule-S=
earch">Implicit=20
  Rule Search Algorithm</A>. </P><A name=3Dindex-_002ePRECIOUS></A></DD>
  <DT><CODE>.PRECIOUS</CODE></DT>
  <DD><A name=3Dindex-precious-targets></A><A=20
  name=3Dindex-preserving-with-_002ePRECIOUS></A>
  <P>The targets which <CODE>.PRECIOUS</CODE> depends on are given the =
following=20
  special treatment: if <CODE>make</CODE> is killed or interrupted =
during the=20
  execution of their recipes, the target is not deleted. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Interrupts">Int=
errupting=20
  or Killing <CODE>make</CODE></A>. Also, if the target is an =
intermediate file,=20
  it will not be deleted after it is no longer needed, as is normally =
done. See=20
  <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Chained-Rules">=
Chains=20
  of Implicit Rules</A>. In this latter respect it overlaps with the=20
  <CODE>.SECONDARY</CODE> special target. </P>
  <P>You can also list the target pattern of an implicit rule (such as=20
  =E2=80=98<SAMP>%.o</SAMP>=E2=80=99) as a prerequisite file of the =
special target=20
  <CODE>.PRECIOUS</CODE> to preserve intermediate files created by rules =
whose=20
  target patterns match that file=E2=80=99s name. </P><A=20
  name=3Dindex-_002eINTERMEDIATE></A></DD>
  <DT><CODE>.INTERMEDIATE</CODE></DT>
  <DD><A name=3Dindex-intermediate-targets_002c-explicit></A>
  <P>The targets which <CODE>.INTERMEDIATE</CODE> depends on are treated =
as=20
  intermediate files. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Chained-Rules">=
Chains=20
  of Implicit Rules</A>. <CODE>.INTERMEDIATE</CODE> with no =
prerequisites has no=20
  effect. </P><A name=3Dindex-_002eSECONDARY></A></DD>
  <DT><CODE>.SECONDARY</CODE></DT>
  <DD><A name=3Dindex-secondary-targets></A><A=20
  name=3Dindex-preserving-with-_002eSECONDARY></A>
  <P>The targets which <CODE>.SECONDARY</CODE> depends on are treated as =

  intermediate files, except that they are never automatically deleted. =
See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Chained-Rules">=
Chains=20
  of Implicit Rules</A>. </P>
  <P><CODE>.SECONDARY</CODE> with no prerequisites causes all targets to =
be=20
  treated as secondary (i.e., no target is removed because it is =
considered=20
  intermediate). </P><A name=3Dindex-_002eSECONDEXPANSION-1></A></DD>
  <DT><CODE>.SECONDEXPANSION</CODE></DT>
  <DD>
  <P>If <CODE>.SECONDEXPANSION</CODE> is mentioned as a target anywhere =
in the=20
  makefile, then all prerequisite lists defined <EM>after</EM> it =
appears will=20
  be expanded a second time after all makefiles have been read in. See =
<A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Secondary-Expan=
sion">Secondary=20
  Expansion</A>. </P><A =
name=3Dindex-_002eDELETE_005fON_005fERROR></A></DD>
  <DT><CODE>.DELETE_ON_ERROR</CODE></DT>
  <DD><A name=3Dindex-removing-targets-on-failure></A>
  <P>If <CODE>.DELETE_ON_ERROR</CODE> is mentioned as a target anywhere =
in the=20
  makefile, then <CODE>make</CODE> will delete the target of a rule if =
it has=20
  changed and its recipe exits with a nonzero exit status, just as it =
does when=20
  it receives a signal. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Errors">Errors =
in=20
  Recipes</A>. </P><A name=3Dindex-_002eIGNORE></A></DD>
  <DT><CODE>.IGNORE</CODE></DT>
  <DD>
  <P>If you specify prerequisites for <CODE>.IGNORE</CODE>, then=20
  <CODE>make</CODE> will ignore errors in execution of the recipe for =
those=20
  particular files. The recipe for <CODE>.IGNORE</CODE> (if any) is =
ignored.=20
</P>
  <P>If mentioned as a target with no prerequisites, =
<CODE>.IGNORE</CODE> says=20
  to ignore errors in execution of recipes for all files. This usage of=20
  =E2=80=98<SAMP>.IGNORE</SAMP>=E2=80=99 is supported only for =
historical compatibility. Since=20
  this affects every recipe in the makefile, it is not very useful; we =
recommend=20
  you use the more selective ways to ignore errors in specific recipes. =
See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Errors">Errors =
in=20
  Recipes</A>. </P><A =
name=3Dindex-_002eLOW_005fRESOLUTION_005fTIME></A></DD>
  <DT><CODE>.LOW_RESOLUTION_TIME</CODE></DT>
  <DD>
  <P>If you specify prerequisites for <CODE>.LOW_RESOLUTION_TIME</CODE>, =

  <CODE>make</CODE> assumes that these files are created by commands =
that=20
  generate low resolution time stamps. The recipe for the=20
  <CODE>.LOW_RESOLUTION_TIME</CODE> target are ignored. </P>
  <P>The high resolution file time stamps of many modern file systems =
lessen the=20
  chance of <CODE>make</CODE> incorrectly concluding that a file is up =
to date.=20
  Unfortunately, some hosts do not provide a way to set a high =
resolution file=20
  time stamp, so commands like =E2=80=98<SAMP>cp -p</SAMP>=E2=80=99 that =
explicitly set a file=E2=80=99s=20
  time stamp must discard its sub-second part. If a file is created by =
such a=20
  command, you should list it as a prerequisite of=20
  <CODE>.LOW_RESOLUTION_TIME</CODE> so that <CODE>make</CODE> does not=20
  mistakenly conclude that the file is out of date. For example: </P>
  <DIV class=3Dexample><PRE class=3Dexample>.LOW_RESOLUTION_TIME: dst
dst: src
        cp -p src dst
</PRE></DIV>
  <P>Since =E2=80=98<SAMP>cp -p</SAMP>=E2=80=99 discards the sub-second =
part of=20
  <SAMP>src</SAMP>=E2=80=99s time stamp, <SAMP>dst</SAMP> is typically =
slightly older=20
  than <SAMP>src</SAMP> even when it is up to date. The=20
  <CODE>.LOW_RESOLUTION_TIME</CODE> line causes <CODE>make</CODE> to =
consider=20
  <SAMP>dst</SAMP> to be up to date if its time stamp is at the start of =
the=20
  same second that <SAMP>src</SAMP>=E2=80=99s time stamp is in. </P>
  <P>Due to a limitation of the archive format, archive member time =
stamps are=20
  always low resolution. You need not list archive members as =
prerequisites of=20
  <CODE>.LOW_RESOLUTION_TIME</CODE>, as <CODE>make</CODE> does this=20
  automatically. </P><A name=3Dindex-_002eSILENT></A></DD>
  <DT><CODE>.SILENT</CODE></DT>
  <DD>
  <P>If you specify prerequisites for <CODE>.SILENT</CODE>, then=20
  <CODE>make</CODE> will not print the recipe used to remake those =
particular=20
  files before executing them. The recipe for <CODE>.SILENT</CODE> is =
ignored.=20
  </P>
  <P>If mentioned as a target with no prerequisites, =
<CODE>.SILENT</CODE> says=20
  not to print any recipes before executing them. This usage of=20
  =E2=80=98<SAMP>.SILENT</SAMP>=E2=80=99 is supported only for =
historical compatibility. We=20
  recommend you use the more selective ways to silence specific recipes. =
See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Echoing">Recipe=
=20
  Echoing</A>. If you want to silence all recipes for a particular run =
of=20
  <CODE>make</CODE>, use the =E2=80=98<SAMP>-s</SAMP>=E2=80=99 or =
=E2=80=98<SAMP><SPAN=20
  class=3Dnolinebreak>--silent</SPAN></SAMP>=E2=80=99<!-- /@w --> option =
(see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
  Summary</A>). </P><A =
name=3Dindex-_002eEXPORT_005fALL_005fVARIABLES></A></DD>
  <DT><CODE>.EXPORT_ALL_VARIABLES</CODE></DT>
  <DD>
  <P>Simply by being mentioned as a target, this tells <CODE>make</CODE> =
to=20
  export all variables to child processes by default. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables_002fR=
ecursion">Communicating=20
  Variables to a Sub-<CODE>make</CODE></A>. </P><A=20
  name=3Dindex-_002eNOTPARALLEL></A></DD>
  <DT><CODE>.NOTPARALLEL</CODE></DT>
  <DD><A name=3Dindex-parallel-execution_002c-overriding></A>
  <P>If <CODE>.NOTPARALLEL</CODE> is mentioned as a target, then this =
invocation=20
  of <CODE>make</CODE> will be run serially, even if the =
=E2=80=98<SAMP>-j</SAMP>=E2=80=99=20
  option is given. Any recursively invoked <CODE>make</CODE> command =
will still=20
  run recipes in parallel (unless its makefile also contains this =
target). Any=20
  prerequisites on this target are ignored. </P><A=20
  name=3Dindex-_002eONESHELL></A></DD>
  <DT><CODE>.ONESHELL</CODE></DT>
  <DD><A name=3Dindex-recipe-execution_002c-single-invocation></A>
  <P>If <CODE>.ONESHELL</CODE> is mentioned as a target, then when a =
target is=20
  built all lines of the recipe will be given to a single invocation of =
the=20
  shell rather than each line being invoked separately (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Execution">Reci=
pe=20
  Execution</A>). </P><A name=3Dindex-_002ePOSIX></A></DD>
  <DT><CODE>.POSIX</CODE></DT>
  <DD><A name=3Dindex-POSIX_002dconforming-mode_002c-setting></A>
  <P>If <CODE>.POSIX</CODE> is mentioned as a target, then the makefile =
will be=20
  parsed and run in POSIX-conforming mode. This does <EM>not</EM> mean =
that only=20
  POSIX-conforming makefiles will be accepted: all advanced GNU=20
  <CODE>make</CODE> features are still available. Rather, this target =
causes=20
  <CODE>make</CODE> to behave as required by POSIX in those areas where=20
  <CODE>make</CODE>=E2=80=99s default behavior differs. </P>
  <P>In particular, if this target is mentioned then recipes will be =
invoked as=20
  if the shell had been passed the <CODE>-e</CODE> flag: the first =
failing=20
  command in a recipe will cause the recipe to fail immediately. =
</P></DD></DL>
<P>Any defined implicit rule suffix also counts as a special target if =
it=20
appears as a target, and so does the concatenation of two suffixes, such =
as=20
=E2=80=98<SAMP>.c.o</SAMP>=E2=80=99. These targets are suffix rules, an =
obsolete way of defining=20
implicit rules (but a way still widely used). In principle, any target =
name=20
could be special in this way if you break it in two and add both pieces =
to the=20
suffix list. In practice, suffixes normally begin with =
=E2=80=98<SAMP>.</SAMP>=E2=80=99, so=20
these special target names also begin with =
=E2=80=98<SAMP>.</SAMP>=E2=80=99. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Suffix-Rules">O=
ld-Fashioned=20
Suffix Rules</A>. </P>
<HR>
<A name=3DMultiple-Targets></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Multiple-Rules"=
=20
rel=3Dnext>Multiple Rules</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
"=20
rel=3Dprev>Special Targets</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Rules" =
rel=3Dup>Rules</A>=20
&nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DMultiple-Targets-in-a-Rule></A>
<H3 class=3Dsection>4.10 Multiple Targets in a Rule</H3><A=20
name=3Dindex-multiple-targets></A><A =
name=3Dindex-several-targets-in-a-rule></A><A=20
name=3Dindex-targets_002c-multiple></A><A=20
name=3Dindex-rule_002c-with-multiple-targets></A>
<P>A rule with multiple targets is equivalent to writing many rules, =
each with=20
one target, and all identical aside from that. The same recipe applies =
to all=20
the targets, but its effect may vary because you can substitute the =
actual=20
target name into the recipe using =E2=80=98<SAMP>$@</SAMP>=E2=80=99. The =
rule contributes the=20
same prerequisites to all the targets also. </P>
<P>This is useful in two cases. </P>
<UL>
  <LI>You want just prerequisites, no recipe. For example:=20
  <DIV class=3Dexample><PRE class=3Dexample>kbd.o command.o files.o: =
command.h
</PRE></DIV>
  <P>gives an additional prerequisite to each of the three object files=20
  mentioned. </P></LI>
  <LI>Similar recipes work for all the targets. The recipes do not need =
to be=20
  absolutely identical, since the automatic variable =
=E2=80=98<SAMP>$@</SAMP>=E2=80=99 can be=20
  used to substitute the particular target to be remade into the =
commands (see=20
  <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
  Variables</A>). For example:=20
  <DIV class=3Dexample><PRE class=3Dexample>bigoutput littleoutput : =
text.g
        generate text.g -$(subst output,,$@) &gt; $@
</PRE></DIV><A name=3Dindex-subst></A>
  <P>is equivalent to </P>
  <DIV class=3Dexample><PRE class=3Dexample>bigoutput : text.g
        generate text.g -big &gt; bigoutput
littleoutput : text.g
        generate text.g -little &gt; littleoutput
</PRE></DIV>
  <P>Here we assume the hypothetical program <CODE>generate</CODE> makes =
two=20
  types of output, one if given =E2=80=98<SAMP>-big</SAMP>=E2=80=99 and =
one if given=20
  =E2=80=98<SAMP>-little</SAMP>=E2=80=99. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Functions=20
  for String Substitution and Analysis</A>, for an explanation of the=20
  <CODE>subst</CODE> function. </P></LI></UL>
<P>Suppose you would like to vary the prerequisites according to the =
target,=20
much as the variable =E2=80=98<SAMP>$@</SAMP>=E2=80=99 allows you to =
vary the recipe. You cannot=20
do this with multiple targets in an ordinary rule, but you can do it =
with a=20
<EM>static pattern rule</EM>. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-Pattern"=
>Static=20
Pattern Rules</A>. </P>
<HR>
<A name=3DMultiple-Rules></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-Pattern"=
=20
rel=3Dnext>Static Pattern</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Multiple-Target=
s"=20
rel=3Dprev>Multiple Targets</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Rules" =
rel=3Dup>Rules</A>=20
&nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DMultiple-Rules-for-One-Target></A>
<H3 class=3Dsection>4.11 Multiple Rules for One Target</H3><A=20
name=3Dindex-multiple-rules-for-one-target></A><A=20
name=3Dindex-several-rules-for-one-target></A><A=20
name=3Dindex-rule_002c-multiple-for-one-target></A><A=20
name=3Dindex-target_002c-multiple-rules-for-one></A>
<P>One file can be the target of several rules. All the prerequisites =
mentioned=20
in all the rules are merged into one list of prerequisites for the =
target. If=20
the target is older than any prerequisite from any rule, the recipe is =
executed.=20
</P>
<P>There can only be one recipe to be executed for a file. If more than =
one rule=20
gives a recipe for the same file, <CODE>make</CODE> uses the last one =
given and=20
prints an error message. (As a special case, if the file=E2=80=99s name =
begins with a=20
dot, no error message is printed. This odd behavior is only for =
compatibility=20
with other implementations of <CODE>make</CODE>=E2=80=A6 you should =
avoid using it).=20
Occasionally it is useful to have the same target invoke multiple =
recipes which=20
are defined in different parts of your makefile; you can use =
<EM>double-colon=20
rules</EM> (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Double_002dColo=
n">Double-Colon</A>)=20
for this. </P>
<P>An extra rule with just prerequisites can be used to give a few extra =

prerequisites to many files at once. For example, makefiles often have a =

variable, such as <CODE>objects</CODE>, containing a list of all the =
compiler=20
output files in the system being made. An easy way to say that all of =
them must=20
be recompiled if <SAMP>config.h</SAMP> changes is to write the =
following: </P>
<DIV class=3Dexample><PRE class=3Dexample>objects =3D foo.o bar.o
foo.o : defs.h
bar.o : defs.h test.h
$(objects) : config.h
</PRE></DIV>
<P>This could be inserted or taken out without changing the rules that =
really=20
specify how to make the object files, making it a convenient form to use =
if you=20
wish to add the additional prerequisite intermittently. </P>
<P>Another wrinkle is that the additional prerequisites could be =
specified with=20
a variable that you set with a command line argument to =
<CODE>make</CODE> (see=20
<A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Overriding">Ove=
rriding=20
Variables</A>). For example, </P>
<DIV class=3Dexample><PRE class=3Dexample>extradeps=3D
$(objects) : $(extradeps)
</PRE></DIV>
<P>means that the command =E2=80=98<SAMP>make =
extradeps=3Dfoo.h</SAMP>=E2=80=99 will consider=20
<SAMP>foo.h</SAMP> as a prerequisite of each object file, but plain=20
=E2=80=98<SAMP>make</SAMP>=E2=80=99 will not. </P>
<P>If none of the explicit rules for a target has a recipe, then=20
<CODE>make</CODE> searches for an applicable implicit rule to find one =
see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rules"=
>Using=20
Implicit Rules</A>). </P>
<HR>
<A name=3DStatic-Pattern></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Double_002dColo=
n"=20
rel=3Dnext>Double-Colon</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Multiple-Rules"=
=20
rel=3Dprev>Multiple Rules</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Rules" =
rel=3Dup>Rules</A>=20
&nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DStatic-Pattern-Rules></A>
<H3 class=3Dsection>4.12 Static Pattern Rules</H3><A=20
name=3Dindex-static-pattern-rule></A><A =
name=3Dindex-rule_002c-static-pattern></A><A=20
name=3Dindex-pattern-rules_002c-static-_0028not-implicit_0029></A><A=20
name=3Dindex-varying-prerequisites></A><A=20
name=3Dindex-prerequisites_002c-varying-_0028static-pattern_0029></A>
<P><EM>Static pattern rules</EM> are rules which specify multiple =
targets and=20
construct the prerequisite names for each target based on the target =
name. They=20
are more general than ordinary rules with multiple targets because the =
targets=20
do not have to have identical prerequisites. Their prerequisites must be =

<EM>analogous</EM>, but not necessarily <EM>identical</EM>. </P>
<TABLE class=3Dmenu border=3D0 cellSpacing=3D0>
  <TBODY>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D1=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-Usage">S=
tatic=20
      Usage</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>The syntax of static pattern rules. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D2=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-versus-I=
mplicit">Static=20
      versus Implicit</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>When are they better than implicit =
rules?=20
  </TD></TR></TBODY></TABLE>
<HR>
<A name=3DStatic-Usage></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-versus-I=
mplicit"=20
rel=3Dnext>Static versus Implicit</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-Pattern"=
=20
rel=3Dprev>Static Pattern</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-Pattern"=
=20
rel=3Dup>Static Pattern</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DSyntax-of-Static-Pattern-Rules></A>
<H4 class=3Dsubsection>4.12.1 Syntax of Static Pattern Rules</H4><A=20
name=3Dindex-static-pattern-rule_002c-syntax-of></A><A=20
name=3Dindex-pattern-rules_002c-static_002c-syntax-of></A>
<P>Here is the syntax of a static pattern rule: </P>
<DIV class=3Dexample><PRE class=3Dexample><VAR>targets</VAR> =E2=80=A6: =
<VAR>target-pattern</VAR>: <VAR>prereq-patterns</VAR> =E2=80=A6
        <VAR>recipe</VAR>
        =E2=80=A6
</PRE></DIV>
<P>The <VAR>targets</VAR> list specifies the targets that the rule =
applies to.=20
The targets can contain wildcard characters, just like the targets of =
ordinary=20
rules (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcards">Usin=
g=20
Wildcard Characters in File Names</A>). </P><A=20
name=3Dindex-target-pattern_002c-static-_0028not-implicit_0029></A><A=20
name=3Dindex-stem></A>
<P>The <VAR>target-pattern</VAR> and <VAR>prereq-patterns</VAR> say how =
to=20
compute the prerequisites of each target. Each target is matched against =
the=20
<VAR>target-pattern</VAR> to extract a part of the target name, called =
the=20
<EM>stem</EM>. This stem is substituted into each of the=20
<VAR>prereq-patterns</VAR> to make the prerequisite names (one from each =

<VAR>prereq-pattern</VAR>). </P>
<P>Each pattern normally contains the character =
=E2=80=98<SAMP>%</SAMP>=E2=80=99 just once. When=20
the <VAR>target-pattern</VAR> matches a target, the =
=E2=80=98<SAMP>%</SAMP>=E2=80=99 can match=20
any part of the target name; this part is called the <EM>stem</EM>. The =
rest of=20
the pattern must match exactly. For example, the target =
<SAMP>foo.o</SAMP>=20
matches the pattern =E2=80=98<SAMP>%.o</SAMP>=E2=80=99, with =
=E2=80=98<SAMP>foo</SAMP>=E2=80=99 as the stem. The=20
targets <SAMP>foo.c</SAMP> and <SAMP>foo.out</SAMP> do not match that =
pattern.=20
</P><A =
name=3Dindex-prerequisite-pattern_002c-static-_0028not-implicit_0029></A>=

<P>The prerequisite names for each target are made by substituting the =
stem for=20
the =E2=80=98<SAMP>%</SAMP>=E2=80=99 in each prerequisite pattern. For =
example, if one=20
prerequisite pattern is <SAMP>%.c</SAMP>, then substitution of the stem=20
=E2=80=98<SAMP>foo</SAMP>=E2=80=99 gives the prerequisite name =
<SAMP>foo.c</SAMP>. It is=20
legitimate to write a prerequisite pattern that does not contain=20
=E2=80=98<SAMP>%</SAMP>=E2=80=99; then this prerequisite is the same for =
all targets. </P><A=20
name=3Dindex-_0025_002c-quoting-in-static-pattern></A><A=20
name=3Dindex-_0025_002c-quoting-with-_005c-_0028backslash_0029-1></A><A=20
name=3Dindex-_005c-_0028backslash_0029_002c-to-quote-_0025-1></A><A=20
name=3Dindex-backslash-_0028_005c_0029_002c-to-quote-_0025-1></A><A=20
name=3Dindex-quoting-_0025_002c-in-static-pattern></A>
<P>=E2=80=98<SAMP>%</SAMP>=E2=80=99 characters in pattern rules can be =
quoted with preceding=20
backslashes (=E2=80=98<SAMP>\</SAMP>=E2=80=99). Backslashes that would =
otherwise quote=20
=E2=80=98<SAMP>%</SAMP>=E2=80=99 characters can be quoted with more =
backslashes. Backslashes=20
that quote =E2=80=98<SAMP>%</SAMP>=E2=80=99 characters or other =
backslashes are removed from the=20
pattern before it is compared to file names or has a stem substituted =
into it.=20
Backslashes that are not in danger of quoting =
=E2=80=98<SAMP>%</SAMP>=E2=80=99 characters go=20
unmolested. For example, the pattern <SAMP>the\%weird\\%pattern\\</SAMP> =
has=20
=E2=80=98<SAMP>the%weird\</SAMP>=E2=80=99 preceding the operative =
=E2=80=98<SAMP>%</SAMP>=E2=80=99 character,=20
and =E2=80=98<SAMP>pattern\\</SAMP>=E2=80=99 following it. The final two =
backslashes are left=20
alone because they cannot affect any =E2=80=98<SAMP>%</SAMP>=E2=80=99 =
character. </P>
<P>Here is an example, which compiles each of <SAMP>foo.o</SAMP> and=20
<SAMP>bar.o</SAMP> from the corresponding <SAMP>.c</SAMP> file: </P>
<DIV class=3Dexample><PRE class=3Dexample>objects =3D foo.o bar.o

all: $(objects)

$(objects): %.o: %.c
        $(CC) -c $(CFLAGS) $&lt; -o $@
</PRE></DIV>
<P>Here =E2=80=98<SAMP>$&lt;</SAMP>=E2=80=99 is the automatic variable =
that holds the name of=20
the prerequisite and =E2=80=98<SAMP>$@</SAMP>=E2=80=99 is the automatic =
variable that holds the=20
name of the target; see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
Variables</A>. </P>
<P>Each target specified must match the target pattern; a warning is =
issued for=20
each target that does not. If you have a list of files, only some of =
which will=20
match the pattern, you can use the <CODE>filter</CODE> function to =
remove=20
non-matching file names (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Functions=20
for String Substitution and Analysis</A>): </P>
<DIV class=3Dexample><PRE class=3Dexample>files =3D foo.elc bar.o lose.o

$(filter %.o,$(files)): %.o: %.c
        $(CC) -c $(CFLAGS) $&lt; -o $@
$(filter %.elc,$(files)): %.elc: %.el
        emacs -f batch-byte-compile $&lt;
</PRE></DIV>
<P>In this example the result of =E2=80=98<SAMP>$(filter =
%.o,$(files))</SAMP>=E2=80=99 is=20
<SAMP>bar.o lose.o</SAMP>, and the first static pattern rule causes each =
of=20
these object files to be updated by compiling the corresponding C source =
file.=20
The result of =
=E2=80=98<SAMP>$(filter&nbsp;%.elc,$(files))</SAMP>=E2=80=99<!-- /@w --> =
is=20
<SAMP>foo.elc</SAMP>, so that file is made from <SAMP>foo.el</SAMP>. =
</P>
<P>Another example shows how to use <CODE>$*</CODE> in static pattern =
rules: <A=20
name=3Dindex-_0024_002a_002c-and-static-pattern></A></P>
<DIV class=3Dexample><PRE class=3Dexample>bigoutput littleoutput : =
%output : text.g
        generate text.g -$* &gt; $@
</PRE></DIV>
<P>When the <CODE>generate</CODE> command is run, <CODE>$*</CODE> will =
expand to=20
the stem, either =E2=80=98<SAMP>big</SAMP>=E2=80=99 or =
=E2=80=98<SAMP>little</SAMP>=E2=80=99. </P>
<HR>
<A name=3DStatic-versus-Implicit></A>
<DIV class=3Dheader>
<P>Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-Usage"=20
rel=3Dprev>Static Usage</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-Pattern"=
=20
rel=3Dup>Static Pattern</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A=20
name=3DStatic-Pattern-Rules-versus-Implicit-Rules></A>
<H4 class=3Dsubsection>4.12.2 Static Pattern Rules versus Implicit =
Rules</H4><A=20
name=3Dindex-rule_002c-static-pattern-versus-implicit></A><A=20
name=3Dindex-static-pattern-rule_002c-versus-implicit></A>
<P>A static pattern rule has much in common with an implicit rule =
defined as a=20
pattern rule (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Rules">=
Defining=20
and Redefining Pattern Rules</A>). Both have a pattern for the target =
and=20
patterns for constructing the names of prerequisites. The difference is =
in how=20
<CODE>make</CODE> decides <EM>when</EM> the rule applies. </P>
<P>An implicit rule <EM>can</EM> apply to any target that matches its =
pattern,=20
but it <EM>does</EM> apply only when the target has no recipe otherwise=20
specified, and only when the prerequisites can be found. If more than =
one=20
implicit rule appears applicable, only one applies; the choice depends =
on the=20
order of rules. </P>
<P>By contrast, a static pattern rule applies to the precise list of =
targets=20
that you specify in the rule. It cannot apply to any other target and it =

invariably does apply to each of the targets specified. If two =
conflicting rules=20
apply, and both have recipes, that=E2=80=99s an error. </P>
<P>The static pattern rule can be better than an implicit rule for these =

reasons: </P>
<UL>
  <LI>You may wish to override the usual implicit rule for a few files =
whose=20
  names cannot be categorized syntactically but can be given in an =
explicit=20
  list. </LI>
  <LI>If you cannot be sure of the precise contents of the directories =
you are=20
  using, you may not be sure which other irrelevant files might lead=20
  <CODE>make</CODE> to use the wrong implicit rule. The choice might =
depend on=20
  the order in which the implicit rule search is done. With static =
pattern=20
  rules, there is no uncertainty: each rule applies to precisely the =
targets=20
  specified. </LI></UL>
<HR>
<A name=3DDouble_002dColon></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Prere=
quisites"=20
rel=3Dnext>Automatic Prerequisites</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-Pattern"=
=20
rel=3Dprev>Static Pattern</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Rules" =
rel=3Dup>Rules</A>=20
&nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DDouble_002dColon-Rules></A>
<H3 class=3Dsection>4.13 Double-Colon Rules</H3><A=20
name=3Dindex-double_002dcolon-rules></A><A=20
name=3Dindex-rule_002c-double_002dcolon-_0028_003a_003a_0029></A><A=20
name=3Dindex-multiple-rules-for-one-target-_0028_003a_003a_0029></A><A=20
name=3Dindex-_003a_003a-rules-_0028double_002dcolon_0029></A>
<P><EM>Double-colon</EM> rules are explicit rules written with =
=E2=80=98<SAMP>::</SAMP>=E2=80=99=20
instead of =E2=80=98<SAMP>:</SAMP>=E2=80=99 after the target names. They =
are handled differently=20
from ordinary rules when the same target appears in more than one rule. =
Pattern=20
rules with double-colons have an entirely different meaning (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Match_002dAnyth=
ing-Rules">Match-Anything=20
Rules</A>). </P>
<P>When a target appears in multiple rules, all the rules must be the =
same type:=20
all ordinary, or all double-colon. If they are double-colon, each of =
them is=20
independent of the others. Each double-colon rule=E2=80=99s recipe is =
executed if the=20
target is older than any prerequisites of that rule. If there are no=20
prerequisites for that rule, its recipe is always executed (even if the =
target=20
already exists). This can result in executing none, any, or all of the=20
double-colon rules. </P>
<P>Double-colon rules with the same target are in fact completely =
separate from=20
one another. Each double-colon rule is processed individually, just as =
rules=20
with different targets are processed. </P>
<P>The double-colon rules for a target are executed in the order they =
appear in=20
the makefile. However, the cases where double-colon rules really make =
sense are=20
those where the order of executing the recipes would not matter. </P>
<P>Double-colon rules are somewhat obscure and not often very useful; =
they=20
provide a mechanism for cases in which the method used to update a =
target=20
differs depending on which prerequisite files caused the update, and =
such cases=20
are rare. </P>
<P>Each double-colon rule should specify a recipe; if it does not, an =
implicit=20
rule will be used if one applies. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rules"=
>Using=20
Implicit Rules</A>. </P>
<HR>
<A name=3DAutomatic-Prerequisites></A>
<DIV class=3Dheader>
<P>Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Double_002dColo=
n"=20
rel=3Dprev>Double-Colon</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Rules" =
rel=3Dup>Rules</A>=20
&nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A=20
name=3DGenerating-Prerequisites-Automatically></A>
<H3 class=3Dsection>4.14 Generating Prerequisites Automatically</H3><A=20
name=3Dindex-prerequisites_002c-automatic-generation-1></A><A=20
name=3Dindex-automatic-generation-of-prerequisites-1></A><A=20
name=3Dindex-generating-prerequisites-automatically-1></A>
<P>In the makefile for a program, many of the rules you need to write =
often say=20
only that some object file depends on some header file. For example, if=20
<SAMP>main.c</SAMP> uses <SAMP>defs.h</SAMP> via an =
<CODE>#include</CODE>, you=20
would write: </P>
<DIV class=3Dexample><PRE class=3Dexample>main.o: defs.h
</PRE></DIV>
<P>You need this rule so that <CODE>make</CODE> knows that it must =
remake=20
<SAMP>main.o</SAMP> whenever <SAMP>defs.h</SAMP> changes. You can see =
that for a=20
large program you would have to write dozens of such rules in your =
makefile.=20
And, you must always be very careful to update the makefile every time =
you add=20
or remove an <CODE>#include</CODE>. <A =
name=3Dindex-_0023include></A></P><A=20
name=3Dindex-_002dM-_0028to-compiler_0029></A>
<P>To avoid this hassle, most modern C compilers can write these rules =
for you,=20
by looking at the <CODE>#include</CODE> lines in the source files. =
Usually this=20
is done with the =E2=80=98<SAMP>-M</SAMP>=E2=80=99 option to the =
compiler. For example, the=20
command: </P>
<DIV class=3Dexample><PRE class=3Dexample>cc -M main.c
</PRE></DIV>
<P>generates the output: </P>
<DIV class=3Dexample><PRE class=3Dexample>main.o : main.c defs.h
</PRE></DIV>
<P>Thus you no longer have to write all those rules yourself. The =
compiler will=20
do it for you. </P>
<P>Note that such a rule constitutes mentioning <SAMP>main.o</SAMP> in a =

makefile, so it can never be considered an intermediate file by implicit =
rule=20
search. This means that <CODE>make</CODE> won=E2=80=99t ever remove the =
file after using=20
it; see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Chained-Rules">=
Chains of=20
Implicit Rules</A>. </P><A name=3Dindex-make-depend></A>
<P>With old <CODE>make</CODE> programs, it was traditional practice to =
use this=20
compiler feature to generate prerequisites on demand with a command like =

=E2=80=98<SAMP>make depend</SAMP>=E2=80=99. That command would create a =
file <SAMP>depend</SAMP>=20
containing all the automatically-generated prerequisites; then the =
makefile=20
could use <CODE>include</CODE> to read them in (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Include">Includ=
e</A>).=20
</P>
<P>In GNU <CODE>make</CODE>, the feature of remaking makefiles makes =
this=20
practice obsolete=E2=80=94you need never tell <CODE>make</CODE> =
explicitly to regenerate=20
the prerequisites, because it always regenerates any makefile that is =
out of=20
date. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Remaking-Makefi=
les">Remaking=20
Makefiles</A>. </P>
<P>The practice we recommend for automatic prerequisite generation is to =
have=20
one makefile corresponding to each source file. For each source file=20
<SAMP><VAR>name</VAR>.c</SAMP> there is a makefile=20
<SAMP><VAR>name</VAR>.d</SAMP> which lists what files the object file=20
<SAMP><VAR>name</VAR>.o</SAMP> depends on. That way only the source =
files that=20
have changed need to be rescanned to produce the new prerequisites. </P>
<P>Here is the pattern rule to generate a file of prerequisites (i.e., a =

makefile) called <SAMP><VAR>name</VAR>.d</SAMP> from a C source file =
called=20
<SAMP><VAR>name</VAR>.c</SAMP>: </P>
<DIV class=3Dsmallexample><PRE class=3Dsmallexample>%.d: %.c
        @set -e; rm -f $@; \
         $(CC) -M $(CPPFLAGS) $&lt; &gt; $@.$$$$; \
         sed 's,\($*\)\.o[ :]*,\1.o $@ : ,g' &lt; $@.$$$$ &gt; $@; \
         rm -f $@.$$$$
</PRE></DIV>
<P>See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Rules">=
Pattern=20
Rules</A>, for information on defining pattern rules. The =
=E2=80=98<SAMP>-e</SAMP>=E2=80=99 flag=20
to the shell causes it to exit immediately if the <CODE>$(CC)</CODE> =
command (or=20
any other command) fails (exits with a nonzero status). <A=20
name=3Dindex-_002de-_0028shell-flag_0029></A></P><A=20
name=3Dindex-_002dMM-_0028to-GNU-compiler_0029></A>
<P>With the GNU C compiler, you may wish to use the =
=E2=80=98<SAMP>-MM</SAMP>=E2=80=99 flag=20
instead of =E2=80=98<SAMP>-M</SAMP>=E2=80=99. This omits prerequisites =
on system header files.=20
See <A=20
href=3D"http://gcc.gnu.org/onlinedocs/gcc/Preprocessor-Options.html#Prepr=
ocessor-Options">Options=20
Controlling the Preprocessor</A> in <CITE>Using GNU CC</CITE>, for =
details.=20
</P><A name=3Dindex-sed-_0028shell-command_0029></A>
<P>The purpose of the <CODE>sed</CODE> command is to translate (for =
example):=20
</P>
<DIV class=3Dexample><PRE class=3Dexample>main.o : main.c defs.h
</PRE></DIV>
<P>into: </P>
<DIV class=3Dexample><PRE class=3Dexample>main.o main.d : main.c defs.h
</PRE></DIV><A name=3Dindex-_002ed></A>
<P>This makes each =E2=80=98<SAMP>.d</SAMP>=E2=80=99 file depend on all =
the source and header=20
files that the corresponding =E2=80=98<SAMP>.o</SAMP>=E2=80=99 file =
depends on.=20
<CODE>make</CODE> then knows it must regenerate the prerequisites =
whenever any=20
of the source or header files changes. </P>
<P>Once you=E2=80=99ve defined the rule to remake the =
=E2=80=98<SAMP>.d</SAMP>=E2=80=99 files, you then=20
use the <CODE>include</CODE> directive to read them all in. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Include">Includ=
e</A>.=20
For example: </P>
<DIV class=3Dexample><PRE class=3Dexample>sources =3D foo.c bar.c

include $(sources:.c=3D.d)
</PRE></DIV>
<P>(This example uses a substitution variable reference to translate the =
list of=20
source files =E2=80=98<SAMP>foo.c bar.c</SAMP>=E2=80=99 into a list of =
prerequisite makefiles,=20
=E2=80=98<SAMP>foo.d bar.d</SAMP>=E2=80=99. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Substitution-Re=
fs">Substitution=20
Refs</A>, for full information on substitution references.) Since the=20
=E2=80=98<SAMP>.d</SAMP>=E2=80=99 files are makefiles like any others, =
<CODE>make</CODE> will=20
remake them as necessary with no further work from you. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Remaking-Makefi=
les">Remaking=20
Makefiles</A>. </P>
<P>Note that the =E2=80=98<SAMP>.d</SAMP>=E2=80=99 files contain target =
definitions; you should=20
be sure to place the <CODE>include</CODE> directive <EM>after</EM> the =
first,=20
default goal in your makefiles or run the risk of having a random object =
file=20
become the default goal. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#How-Make-Works"=
>How Make=20
Works</A>. </P>
<HR>
<A name=3DRecipes></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Using-Variables=
"=20
rel=3Dnext>Using Variables</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Rules"=20
rel=3Dprev>Rules</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Top" =
rel=3Dup>Top</A>=20
&nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DWriting-Recipes-in-Rules></A>
<H2 class=3Dchapter>5 Writing Recipes in Rules</H2><A =
name=3Dindex-recipes-1></A><A=20
name=3Dindex-recipes_002c-how-to-write></A><A =
name=3Dindex-writing-recipes></A>
<P>The recipe of a rule consists of one or more shell command lines to =
be=20
executed, one at a time, in the order they appear. Typically, the result =
of=20
executing these commands is that the target of the rule is brought up to =
date.=20
</P>
<P>Users use many different shell programs, but recipes in makefiles are =
always=20
interpreted by <SAMP>/bin/sh</SAMP> unless the makefile specifies =
otherwise. See=20
<A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Execution">Reci=
pe=20
Execution</A>. </P>
<TABLE class=3Dmenu border=3D0 cellSpacing=3D0>
  <TBODY>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D1=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipe-Syntax">=
Recipe=20
      Syntax</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Recipe syntax features and pitfalls. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D2=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Echoing">Echoin=
g</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to control when recipes are =
echoed. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D3=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Execution">Exec=
ution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How recipes are executed. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D4=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel">Paral=
lel</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How recipes can be executed in =
parallel. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D5=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Errors">Errors<=
/A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>What happens after a recipe execution =
error.=20
  </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D6=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Interrupts">Int=
errupts</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>What happens when a recipe is =
interrupted.=20
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D7=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Recursion">Recu=
rsion</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Invoking <CODE>make</CODE> from =
makefiles.=20
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D8=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Canned-Recipes"=
>Canned=20
      Recipes</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Defining canned recipes. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D9=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Empty-Recipes">=
Empty=20
      Recipes</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Defining useful, do-nothing recipes.=20
  </TD></TR></TBODY></TABLE>
<HR>
<A name=3DRecipe-Syntax></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Echoing"=20
rel=3Dnext>Echoing</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipes"=20
rel=3Dprev>Recipes</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipes"=20
rel=3Dup>Recipes</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DRecipe-Syntax-1></A>
<H3 class=3Dsection>5.1 Recipe Syntax</H3><A =
name=3Dindex-recipe-syntax></A><A=20
name=3Dindex-syntax-of-recipe></A>
<P>Makefiles have the unusual property that there are really two =
distinct=20
syntaxes in one file. Most of the makefile uses <CODE>make</CODE> syntax =
(see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefiles">Writ=
ing=20
Makefiles</A>). However, recipes are meant to be interpreted by the =
shell and so=20
they are written using shell syntax. The <CODE>make</CODE> program does =
not try=20
to understand shell syntax: it performs only a very few specific =
translations on=20
the content of the recipe before handing it to the shell. </P>
<P>Each line in the recipe must start with a tab (or the first character =
in the=20
value of the <CODE>.RECIPEPREFIX</CODE> variable; see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Variabl=
es">Special=20
Variables</A>), except that the first recipe line may be attached to the =

target-and-prerequisites line with a semicolon in between. <EM>Any</EM> =
line in=20
the makefile that begins with a tab and appears in a =E2=80=9Crule =
context=E2=80=9D (that is,=20
after a rule has been started until another rule or variable definition) =
will be=20
considered part of a recipe for that rule. Blank lines and lines of just =

comments may appear among the recipe lines; they are ignored. </P>
<P>Some consequences of these rules include: </P>
<UL>
  <LI>A blank line that begins with a tab is not blank: it=E2=80=99s an =
empty recipe=20
  (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Empty-Recipes">=
Empty=20
  Recipes</A>). </LI>
  <LI><A name=3Dindex-comments_002c-in-recipes></A><A=20
  name=3Dindex-recipes_002c-comments-in></A><A=20
  name=3Dindex-_0023-_0028comments_0029_002c-in-recipes></A>A comment in =
a recipe=20
  is not a <CODE>make</CODE> comment; it will be passed to the shell =
as-is.=20
  Whether the shell treats it as a comment or not depends on your shell. =
</LI>
  <LI>A variable definition in a =E2=80=9Crule context=E2=80=9D which is =
indented by a tab as=20
  the first character on the line, will be considered part of a recipe, =
not a=20
  <CODE>make</CODE> variable definition, and passed to the shell. </LI>
  <LI>A conditional expression (<CODE>ifdef</CODE>, <CODE>ifeq</CODE>, =
etc. see=20
  <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditional-Syn=
tax">Syntax=20
  of Conditionals</A>) in a =E2=80=9Crule context=E2=80=9D which is =
indented by a tab as the=20
  first character on the line, will be considered part of a recipe and =
be passed=20
  to the shell. </LI></UL>
<TABLE class=3Dmenu border=3D0 cellSpacing=3D0>
  <TBODY>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D1=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Splitting-Recip=
e-Lines">Splitting=20
      Recipe Lines</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Breaking long recipe lines for =
readability.=20
  </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D2=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables-in-Re=
cipes">Variables=20
      in Recipes</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Using <CODE>make</CODE> variables in =
recipes.=20
  </TD></TR></TBODY></TABLE>
<HR>
<A name=3DSplitting-Recipe-Lines></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables-in-Re=
cipes"=20
rel=3Dnext>Variables in Recipes</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipe-Syntax" =

rel=3Dprev>Recipe Syntax</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipe-Syntax" =

rel=3Dup>Recipe Syntax</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DSplitting-Recipe-Lines-1></A>
<H4 class=3Dsubsection>5.1.1 Splitting Recipe Lines</H4><A=20
name=3Dindex-recipes_002c-splitting></A><A =
name=3Dindex-splitting-recipes></A><A=20
name=3Dindex-recipes_002c-backslash-_0028_005c_0029-in></A><A=20
name=3Dindex-recipes_002c-quoting-newlines-in></A><A=20
name=3Dindex-backslash-_0028_005c_0029_002c-in-recipes></A><A=20
name=3Dindex-_005c-_0028backslash_0029_002c-in-recipes></A><A=20
name=3Dindex-quoting-newline_002c-in-recipes></A><A=20
name=3Dindex-newline_002c-quoting_002c-in-recipes></A>
<P>One of the few ways in which <CODE>make</CODE> does interpret recipes =
is=20
checking for a backslash just before the newline. As in normal makefile =
syntax,=20
a single logical recipe line can be split into multiple physical lines =
in the=20
makefile by placing a backslash before each newline. A sequence of lines =
like=20
this is considered a single recipe line, and one instance of the shell =
will be=20
invoked to run it. </P>
<P>However, in contrast to how they are treated in other places in a =
makefile=20
(see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Splitting-Lines=
">Splitting=20
Long Lines</A>), backslash/newline pairs are <EM>not</EM> removed from =
the=20
recipe. Both the backslash and the newline characters are preserved and =
passed=20
to the shell. How the backslash/newline is interpreted depends on your =
shell. If=20
the first character of the next line after the backslash/newline is the =
recipe=20
prefix character (a tab by default; see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Variabl=
es">Special=20
Variables</A>), then that character (and only that character) is =
removed.=20
Whitespace is never added to the recipe. </P>
<P>For example, the recipe for the all target in this makefile: </P>
<DIV class=3Dexample><PRE class=3Dexample>all :
        @echo no\
space
        @echo no\
        space
        @echo one \
        space
        @echo one\
         space
</PRE></DIV>
<P>consists of four separate shell commands where the output is: </P>
<DIV class=3Dexample><PRE class=3Dexample>nospace
nospace
one space
one space
</PRE></DIV>
<P>As a more complex example, this makefile: </P>
<DIV class=3Dexample><PRE class=3Dexample>all : ; @echo 'hello \
        world' ; echo "hello \
    world"
</PRE></DIV>
<P>will invoke one shell with a command of: </P>
<DIV class=3Dexample><PRE class=3Dexample>echo 'hello \
world' ; echo "hello \
    world"
</PRE></DIV>
<P>which, according to shell quoting rules, will yield the following =
output:=20
</P>
<DIV class=3Dexample><PRE class=3Dexample>hello \
world
hello     world
</PRE></DIV>
<P>Notice how the backslash/newline pair was removed inside the string =
quoted=20
with double quotes (<CODE>"=E2=80=A6"</CODE>), but not from the string =
quoted with=20
single quotes (<CODE>'=E2=80=A6'</CODE>). This is the way the default =
shell=20
(<SAMP>/bin/sh</SAMP>) handles backslash/newline pairs. If you specify a =

different shell in your makefiles it may treat them differently. </P>
<P>Sometimes you want to split a long line inside of single quotes, but =
you=20
don=E2=80=99t want the backslash/newline to appear in the quoted =
content. This is often=20
the case when passing scripts to languages such as Perl, where =
extraneous=20
backslashes inside the script can change its meaning or even be a syntax =
error.=20
One simple way of handling this is to place the quoted string, or even =
the=20
entire command, into a <CODE>make</CODE> variable then use the variable =
in the=20
recipe. In this situation the newline quoting rules for makefiles will =
be used,=20
and the backslash/newline will be removed. If we rewrite our example =
above using=20
this method: </P>
<DIV class=3Dexample><PRE class=3Dexample>HELLO =3D 'hello \
world'

all : ; @echo $(HELLO)
</PRE></DIV>
<P>we will get output like this: </P>
<DIV class=3Dexample><PRE class=3Dexample>hello world
</PRE></DIV>
<P>If you like, you can also use target-specific variables (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Target_002dspec=
ific">Target-specific=20
Variable Values</A>) to obtain a tighter correspondence between the =
variable and=20
the recipe that uses it. </P>
<HR>
<A name=3DVariables-in-Recipes></A>
<DIV class=3Dheader>
<P>Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Splitting-Recip=
e-Lines"=20
rel=3Dprev>Splitting Recipe Lines</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipe-Syntax" =

rel=3Dup>Recipe Syntax</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DUsing-Variables-in-Recipes></A>
<H4 class=3Dsubsection>5.1.2 Using Variables in Recipes</H4><A=20
name=3Dindex-variable-references-in-recipes></A><A=20
name=3Dindex-recipes_002c-using-variables-in></A>
<P>The other way in which <CODE>make</CODE> processes recipes is by =
expanding=20
any variable references in them (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Reference">Basi=
cs of=20
Variable References</A>). This occurs after make has finished reading =
all the=20
makefiles and the target is determined to be out of date; so, the =
recipes for=20
targets which are not rebuilt are never expanded. </P>
<P>Variable and function references in recipes have identical syntax and =

semantics to references elsewhere in the makefile. They also have the =
same=20
quoting rules: if you want a dollar sign to appear in your recipe, you =
must=20
double it (=E2=80=98<SAMP>$$</SAMP>=E2=80=99). For shells like the =
default shell, that use=20
dollar signs to introduce variables, it=E2=80=99s important to keep =
clear in your mind=20
whether the variable you want to reference is a <CODE>make</CODE> =
variable (use=20
a single dollar sign) or a shell variable (use two dollar signs). For =
example:=20
</P>
<DIV class=3Dexample><PRE class=3Dexample>LIST =3D one two three
all:
        for i in $(LIST); do \
            echo $$i; \
        done
</PRE></DIV>
<P>results in the following command being passed to the shell: </P>
<DIV class=3Dexample><PRE class=3Dexample>for i in one two three; do \
    echo $i; \
done
</PRE></DIV>
<P>which generates the expected result: </P>
<DIV class=3Dexample><PRE class=3Dexample>one
two
three
</PRE></DIV>
<HR>
<A name=3DEchoing></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Execution"=20
rel=3Dnext>Execution</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipe-Syntax" =

rel=3Dprev>Recipe Syntax</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipes"=20
rel=3Dup>Recipes</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DRecipe-Echoing></A>
<H3 class=3Dsection>5.2 Recipe Echoing</H3><A =
name=3Dindex-echoing-of-recipes></A><A=20
name=3Dindex-silent-operation></A><A =
name=3Dindex-_0040-_0028in-recipes_0029></A><A=20
name=3Dindex-recipes_002c-echoing></A><A =
name=3Dindex-printing-of-recipes></A>
<P>Normally <CODE>make</CODE> prints each line of the recipe before it =
is=20
executed. We call this <EM>echoing</EM> because it gives the appearance =
that you=20
are typing the lines yourself. </P>
<P>When a line starts with =E2=80=98<SAMP>@</SAMP>=E2=80=99, the echoing =
of that line is=20
suppressed. The =E2=80=98<SAMP>@</SAMP>=E2=80=99 is discarded before the =
line is passed to the=20
shell. Typically you would use this for a command whose only effect is =
to print=20
something, such as an <CODE>echo</CODE> command to indicate progress =
through the=20
makefile: </P>
<DIV class=3Dexample><PRE class=3Dexample>@echo About to make =
distribution files
</PRE></DIV><A name=3Dindex-_002dn></A><A=20
name=3Dindex-_002d_002djust_002dprint></A><A=20
name=3Dindex-_002d_002ddry_002drun></A><A =
name=3Dindex-_002d_002drecon></A>
<P>When <CODE>make</CODE> is given the flag =
=E2=80=98<SAMP>-n</SAMP>=E2=80=99 or=20
=E2=80=98<SAMP>--just-print</SAMP>=E2=80=99 it only echoes most recipes, =
without executing them.=20
See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Summary=20
of Options</A>. In this case even the recipe lines starting with=20
=E2=80=98<SAMP>@</SAMP>=E2=80=99 are printed. This flag is useful for =
finding out which recipes=20
<CODE>make</CODE> thinks are necessary without actually doing them. =
</P><A=20
name=3Dindex-_002ds></A><A name=3Dindex-_002d_002dsilent></A><A=20
name=3Dindex-_002d_002dquiet></A><A name=3Dindex-_002eSILENT-1></A>
<P>The =E2=80=98<SAMP>-s</SAMP>=E2=80=99 or =
=E2=80=98<SAMP>--silent</SAMP>=E2=80=99 flag to <CODE>make</CODE>=20
prevents all echoing, as if all recipes started with =
=E2=80=98<SAMP>@</SAMP>=E2=80=99. A rule in=20
the makefile for the special target <CODE>.SILENT</CODE> without =
prerequisites=20
has the same effect (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
">Special=20
Built-in Target Names</A>). <CODE>.SILENT</CODE> is essentially obsolete =
since=20
=E2=80=98<SAMP>@</SAMP>=E2=80=99 is more flexible. </P>
<HR>
<A name=3DExecution></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel"=20
rel=3Dnext>Parallel</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Echoing"=20
rel=3Dprev>Echoing</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipes"=20
rel=3Dup>Recipes</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DRecipe-Execution></A>
<H3 class=3Dsection>5.3 Recipe Execution</H3><A=20
name=3Dindex-recipe_002c-execution></A><A=20
name=3Dindex-execution_002c-of-recipes></A><A=20
name=3Dindex-SHELL-_0028recipe-execution_0029></A>
<P>When it is time to execute recipes to update a target, they are =
executed by=20
invoking a new sub-shell for each line of the recipe, unless the=20
<CODE>.ONESHELL</CODE> special target is in effect (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#One-Shell">Usin=
g One=20
Shell</A>) (In practice, <CODE>make</CODE> may take shortcuts that do =
not affect=20
the results.) </P><A name=3Dindex-cd-_0028shell-command_0029></A><A=20
name=3Dindex-shell-variables_002c-setting-in-recipes></A><A=20
name=3Dindex-recipes-setting-shell-variables></A>
<P><STRONG>Please note:</STRONG> this implies that setting shell =
variables and=20
invoking shell commands such as <CODE>cd</CODE> that set a context local =
to each=20
process will not affect the following lines in the recipe.<A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#FOOT2"=20
name=3DDOCF2><SUP>2</SUP></A> If you want to use <CODE>cd</CODE> to =
affect the=20
next statement, put both statements in a single recipe line. Then=20
<CODE>make</CODE> will invoke one shell to run the entire line, and the =
shell=20
will execute the statements in sequence. For example: </P>
<DIV class=3Dexample><PRE class=3Dexample>foo : bar/lose
        cd $(@D) &amp;&amp; gobble $(@F) &gt; ../$@
</PRE></DIV>
<P>Here we use the shell AND operator (<CODE>&amp;&amp;</CODE>) so that =
if the=20
<CODE>cd</CODE> command fails, the script will fail without trying to =
invoke the=20
<CODE>gobble</CODE> command in the wrong directory, which could cause =
problems=20
(in this case it would certainly cause <SAMP>../foo</SAMP> to be =
truncated, at=20
least). </P>
<TABLE class=3Dmenu border=3D0 cellSpacing=3D0>
  <TBODY>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D1=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#One-Shell">One =

      Shell</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>One shell for all lines in a recipe. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D2=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Choosing-the-Sh=
ell">Choosing=20
      the Shell</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How <CODE>make</CODE> chooses the =
shell used to=20
      run recipes. </TD></TR></TBODY></TABLE>
<HR>
<A name=3DOne-Shell></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Choosing-the-Sh=
ell"=20
rel=3Dnext>Choosing the Shell</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Execution"=20
rel=3Dprev>Execution</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Execution"=20
rel=3Dup>Execution</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DUsing-One-Shell></A>
<H4 class=3Dsubsection>5.3.1 Using One Shell</H4><A=20
name=3Dindex-recipe-lines_002c-single-shell></A><A=20
name=3Dindex-_002eONESHELL_002c-use-of></A><A =
name=3Dindex-_002eONESHELL-1></A>
<P>Sometimes you would prefer that all the lines in the recipe be passed =
to a=20
single invocation of the shell. There are generally two situations where =
this is=20
useful: first, it can improve performance in makefiles where recipes =
consist of=20
many command lines, by avoiding extra processes. Second, you might want =
newlines=20
to be included in your recipe command (for example perhaps you are using =
a very=20
different interpreter as your <CODE>SHELL</CODE>). If the =
<CODE>.ONESHELL</CODE>=20
special target appears anywhere in the makefile then <EM>all</EM> recipe =
lines=20
for each target will be provided to a single invocation of the shell. =
Newlines=20
between recipe lines will be preserved. For example: </P>
<DIV class=3Dexample><PRE class=3Dexample>.ONESHELL:
foo : bar/lose
        cd $(@D)
        gobble $(@F) &gt; ../$@
</PRE></DIV>
<P>would now work as expected even though the commands are on different =
recipe=20
lines. </P>
<P>If <CODE>.ONESHELL</CODE> is provided, then only the first line of =
the recipe=20
will be checked for the special prefix characters =
(=E2=80=98<SAMP>@</SAMP>=E2=80=99,=20
=E2=80=98<SAMP>-</SAMP>=E2=80=99, and =E2=80=98<SAMP>+</SAMP>=E2=80=99). =
Subsequent lines will include the=20
special characters in the recipe line when the <CODE>SHELL</CODE> is =
invoked. If=20
you want your recipe to start with one of these special characters =
you=E2=80=99ll need=20
to arrange for them to not be the first characters on the first line, =
perhaps by=20
adding a comment or similar. For example, this would be a syntax error =
in Perl=20
because the first =E2=80=98<SAMP>@</SAMP>=E2=80=99 is removed by make: =
</P>
<DIV class=3Dexample><PRE class=3Dexample>.ONESHELL:
SHELL =3D /usr/bin/perl
.SHELLFLAGS =3D -e
show :
        @f =3D qw(a b c);
        print "@f\n";
</PRE></DIV>
<P>However, either of these alternatives would work properly: </P>
<DIV class=3Dexample><PRE class=3Dexample>.ONESHELL:
SHELL =3D /usr/bin/perl
.SHELLFLAGS =3D -e
show :
        # Make sure "@" is not the first character on the first line
        @f =3D qw(a b c);
        print "@f\n";
</PRE></DIV>
<P>or </P>
<DIV class=3Dexample><PRE class=3Dexample>.ONESHELL:
SHELL =3D /usr/bin/perl
.SHELLFLAGS =3D -e
show :
        my @f =3D qw(a b c);
        print "@f\n";
</PRE></DIV>
<P>As a special feature, if <CODE>SHELL</CODE> is determined to be a =
POSIX-style=20
shell, the special prefix characters in =E2=80=9Cinternal=E2=80=9D =
recipe lines will=20
<EM>removed</EM> before the recipe is processed. This feature is =
intended to=20
allow existing makefiles to add the <CODE>.ONESHELL</CODE> special =
target and=20
still run properly without extensive modifications. Since the special =
prefix=20
characters are not legal at the beginning of a line in a POSIX shell =
script this=20
is not a loss in functionality. For example, this works as expected: =
</P>
<DIV class=3Dexample><PRE class=3Dexample>.ONESHELL:
foo : bar/lose
        @cd $(@D)
        @gobble $(@F) &gt; ../$@
</PRE></DIV>
<P>Even with this special feature, however, makefiles with=20
<CODE>.ONESHELL</CODE> will behave differently in ways that could be =
noticeable.=20
For example, normally if any line in the recipe fails, that causes the =
rule to=20
fail and no more recipe lines are processed. Under =
<CODE>.ONESHELL</CODE> a=20
failure of any but the final recipe line will not be noticed by=20
<CODE>make</CODE>. You can modify <CODE>.SHELLFLAGS</CODE> to add the=20
<CODE>-e</CODE> option to the shell which will cause any failure =
anywhere in the=20
command line to cause the shell to fail, but this could itself cause =
your recipe=20
to behave differently. Ultimately you may need to harden your recipe =
lines to=20
allow them to work with <CODE>.ONESHELL</CODE>. </P>
<HR>
<A name=3DChoosing-the-Shell></A>
<DIV class=3Dheader>
<P>Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#One-Shell" =
rel=3Dprev>One=20
Shell</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Execution"=20
rel=3Dup>Execution</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DChoosing-the-Shell-1></A>
<H4 class=3Dsubsection>5.3.2 Choosing the Shell</H4><A=20
name=3Dindex-shell_002c-choosing-the></A><A =
name=3Dindex-SHELL_002c-value-of></A><A=20
name=3Dindex-_002eSHELLFLAGS_002c-value-of></A><A =
name=3Dindex-SHELL></A><A=20
name=3Dindex-_002eSHELLFLAGS></A>
<P>The program used as the shell is taken from the variable =
<CODE>SHELL</CODE>.=20
If this variable is not set in your makefile, the program =
<SAMP>/bin/sh</SAMP>=20
is used as the shell. The argument(s) passed to the shell are taken from =
the=20
variable <CODE>.SHELLFLAGS</CODE>. The default value of =
<CODE>.SHELLFLAGS</CODE>=20
is <CODE>-c</CODE> normally, or <CODE>-ec</CODE> in POSIX-conforming =
mode.=20
</P><A name=3Dindex-environment_002c-SHELL-in></A>
<P>Unlike most variables, the variable <CODE>SHELL</CODE> is never set =
from the=20
environment. This is because the <CODE>SHELL</CODE> environment variable =
is used=20
to specify your personal choice of shell program for interactive use. It =
would=20
be very bad for personal choices like this to affect the functioning of=20
makefiles. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Environment">Va=
riables=20
from the Environment</A>. </P>
<P>Furthermore, when you do set <CODE>SHELL</CODE> in your makefile that =
value=20
is <EM>not</EM> exported in the environment to recipe lines that=20
<CODE>make</CODE> invokes. Instead, the value inherited from the =
user=E2=80=99s=20
environment, if any, is exported. You can override this behavior by =
explicitly=20
exporting <CODE>SHELL</CODE> (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables_002fR=
ecursion">Communicating=20
Variables to a Sub-<CODE>make</CODE></A>), forcing it to be passed in =
the=20
environment to recipe lines. </P><A=20
name=3Dindex-MAKESHELL-_0028MS_002dDOS-alternative-to-SHELL_0029></A>
<P>However, on MS-DOS and MS-Windows the value of <CODE>SHELL</CODE> in =
the=20
environment <STRONG>is</STRONG> used, since on those systems most users =
do not=20
set this variable, and therefore it is most likely set specifically to =
be used=20
by <CODE>make</CODE>. On MS-DOS, if the setting of <CODE>SHELL</CODE> is =
not=20
suitable for <CODE>make</CODE>, you can set the variable =
<CODE>MAKESHELL</CODE>=20
to the shell that <CODE>make</CODE> should use; if set it will be used =
as the=20
shell instead of the value of <CODE>SHELL</CODE>. </P><A=20
name=3DChoosing-a-Shell-in-DOS-and-Windows></A>
<H4 class=3Dsubsubheading>Choosing a Shell in DOS and Windows</H4><A=20
name=3Dindex-shell_002c-in-DOS-and-Windows></A><A=20
name=3Dindex-DOS_002c-choosing-a-shell-in></A><A=20
name=3Dindex-Windows_002c-choosing-a-shell-in></A>
<P>Choosing a shell in MS-DOS and MS-Windows is much more complex than =
on other=20
systems. </P><A name=3Dindex-COMSPEC></A>
<P>On MS-DOS, if <CODE>SHELL</CODE> is not set, the value of the =
variable=20
<CODE>COMSPEC</CODE> (which is always set) is used instead. </P><A=20
name=3Dindex-SHELL_002c-MS_002dDOS-specifics></A>
<P>The processing of lines that set the variable <CODE>SHELL</CODE> in =
Makefiles=20
is different on MS-DOS. The stock shell, <SAMP>command.com</SAMP>, is=20
ridiculously limited in its functionality and many users of =
<CODE>make</CODE>=20
tend to install a replacement shell. Therefore, on MS-DOS, =
<CODE>make</CODE>=20
examines the value of <CODE>SHELL</CODE>, and changes its behavior based =
on=20
whether it points to a Unix-style or DOS-style shell. This allows =
reasonable=20
functionality even if <CODE>SHELL</CODE> points to =
<SAMP>command.com</SAMP>.=20
</P>
<P>If <CODE>SHELL</CODE> points to a Unix-style shell, <CODE>make</CODE> =
on=20
MS-DOS additionally checks whether that shell can indeed be found; if =
not, it=20
ignores the line that sets <CODE>SHELL</CODE>. In MS-DOS, GNU =
<CODE>make</CODE>=20
searches for the shell in the following places: </P>
<OL>
  <LI>In the precise place pointed to by the value of =
<CODE>SHELL</CODE>. For=20
  example, if the makefile specifies =E2=80=98<SAMP>SHELL =3D =
/bin/sh</SAMP>=E2=80=99,=20
  <CODE>make</CODE> will look in the directory <SAMP>/bin</SAMP> on the =
current=20
  drive. </LI>
  <LI>In the current directory. </LI>
  <LI>In each of the directories in the <CODE>PATH</CODE> variable, in =
order.=20
  </LI></OL>
<P>In every directory it examines, <CODE>make</CODE> will first look for =
the=20
specific file (<SAMP>sh</SAMP> in the example above). If this is not =
found, it=20
will also look in that directory for that file with one of the known =
extensions=20
which identify executable files. For example <SAMP>.exe</SAMP>,=20
<SAMP>.com</SAMP>, <SAMP>.bat</SAMP>, <SAMP>.btm</SAMP>, =
<SAMP>.sh</SAMP>, and=20
some others. </P>
<P>If any of these attempts is successful, the value of =
<CODE>SHELL</CODE> will=20
be set to the full pathname of the shell as found. However, if none of =
these is=20
found, the value of <CODE>SHELL</CODE> will not be changed, and thus the =
line=20
that sets it will be effectively ignored. This is so <CODE>make</CODE> =
will only=20
support features specific to a Unix-style shell if such a shell is =
actually=20
installed on the system where <CODE>make</CODE> runs. </P>
<P>Note that this extended search for the shell is limited to the cases =
where=20
<CODE>SHELL</CODE> is set from the Makefile; if it is set in the =
environment or=20
command line, you are expected to set it to the full pathname of the =
shell,=20
exactly as things are on Unix. </P>
<P>The effect of the above DOS-specific processing is that a Makefile =
that=20
contains =E2=80=98<SAMP>SHELL =3D /bin/sh</SAMP>=E2=80=99 (as many Unix =
makefiles do), will work=20
on MS-DOS unaltered if you have e.g. <SAMP>sh.exe</SAMP> installed in =
some=20
directory along your <CODE>PATH</CODE>. </P><A =
name=3Dindex-SHELL-1></A><A=20
name=3Dindex-_002eSHELLFLAGS-1></A>
<HR>
<A name=3DParallel></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Errors"=20
rel=3Dnext>Errors</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Execution"=20
rel=3Dprev>Execution</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipes"=20
rel=3Dup>Recipes</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DParallel-Execution></A>
<H3 class=3Dsection>5.4 Parallel Execution</H3><A=20
name=3Dindex-recipes_002c-execution-in-parallel></A><A=20
name=3Dindex-parallel-execution></A><A=20
name=3Dindex-execution_002c-in-parallel></A><A =
name=3Dindex-job-slots></A><A=20
name=3Dindex-_002dj></A><A name=3Dindex-_002d_002djobs></A>
<P>GNU <CODE>make</CODE> knows how to execute several recipes at once. =
Normally,=20
<CODE>make</CODE> will execute only one recipe at a time, waiting for it =
to=20
finish before executing the next. However, the =
=E2=80=98<SAMP>-j</SAMP>=E2=80=99 or=20
=E2=80=98<SAMP>--jobs</SAMP>=E2=80=99 option tells <CODE>make</CODE> to =
execute many recipes=20
simultaneously. You can inhibit parallelism in a particular makefile =
with the=20
<CODE>.NOTPARALLEL</CODE> pseudo-target (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
">Special=20
Built-in Target Names</A>). </P>
<P>On MS-DOS, the =E2=80=98<SAMP>-j</SAMP>=E2=80=99 option has no =
effect, since that system=20
doesn=E2=80=99t support multi-processing. </P>
<P>If the =E2=80=98<SAMP>-j</SAMP>=E2=80=99 option is followed by an =
integer, this is the number=20
of recipes to execute at once; this is called the number of <EM>job =
slots</EM>.=20
If there is nothing looking like an integer after the =
=E2=80=98<SAMP>-j</SAMP>=E2=80=99 option,=20
there is no limit on the number of job slots. The default number of job =
slots is=20
one, which means serial execution (one thing at a time). </P>
<P>Handling recursive <CODE>make</CODE> invocations raises issues for =
parallel=20
execution. For more information on this, see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Communicating=20
Options to a Sub-<CODE>make</CODE></A>. </P>
<P>If a recipe fails (is killed by a signal or exits with a nonzero =
status), and=20
errors are not ignored for that recipe (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Errors">Errors =
in=20
Recipes</A>), the remaining recipe lines to remake the same target will =
not be=20
run. If a recipe fails and the =E2=80=98<SAMP>-k</SAMP>=E2=80=99 or =
=E2=80=98<SAMP>--keep-going</SAMP>=E2=80=99=20
option was not given (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Summary=20
of Options</A>), <CODE>make</CODE> aborts execution. If make terminates =
for any=20
reason (including a signal) with child processes running, it waits for =
them to=20
finish before actually exiting. </P><A name=3Dindex-load-average></A><A=20
name=3Dindex-limiting-jobs-based-on-load></A><A=20
name=3Dindex-jobs_002c-limiting-based-on-load></A><A=20
name=3Dindex-_002dl-_0028load-average_0029></A><A=20
name=3Dindex-_002d_002dmax_002dload></A><A=20
name=3Dindex-_002d_002dload_002daverage></A>
<P>When the system is heavily loaded, you will probably want to run =
fewer jobs=20
than when it is lightly loaded. You can use the =
=E2=80=98<SAMP>-l</SAMP>=E2=80=99 option to tell=20
<CODE>make</CODE> to limit the number of jobs to run at once, based on =
the load=20
average. The =E2=80=98<SAMP>-l</SAMP>=E2=80=99 or =
=E2=80=98<SAMP>--max-load</SAMP>=E2=80=99 option is followed=20
by a floating-point number. For example, </P>
<DIV class=3Dexample><PRE class=3Dexample>-l 2.5
</PRE></DIV>
<P>will not let <CODE>make</CODE> start more than one job if the load =
average is=20
above 2.5. The =E2=80=98<SAMP>-l</SAMP>=E2=80=99 option with no =
following number removes the=20
load limit, if one was given with a previous =
=E2=80=98<SAMP>-l</SAMP>=E2=80=99 option. </P>
<P>More precisely, when <CODE>make</CODE> goes to start up a job, and it =
already=20
has at least one job running, it checks the current load average; if it =
is not=20
lower than the limit given with =E2=80=98<SAMP>-l</SAMP>=E2=80=99, =
<CODE>make</CODE> waits until=20
the load average goes below that limit, or until all the other jobs =
finish. </P>
<P>By default, there is no load limit. </P>
<TABLE class=3Dmenu border=3D0 cellSpacing=3D0>
  <TBODY>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D1=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel-Output=
">Parallel=20
      Output</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Handling output during parallel =
execution </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D2=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel-Input"=
>Parallel=20
      Input</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Handling input during parallel =
execution=20
  </TD></TR></TBODY></TABLE>
<HR>
<A name=3DParallel-Output></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel-Input"=
=20
rel=3Dnext>Parallel Input</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel"=20
rel=3Dprev>Parallel</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel"=20
rel=3Dup>Parallel</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DOutput-During-Parallel-Execution></A>
<H4 class=3Dsubsection>5.4.1 Output During Parallel Execution</H4><A=20
name=3Dindex-output-during-parallel-execution></A><A=20
name=3Dindex-parallel-execution_002c-output-during></A>
<P>When running several recipes in parallel the output from each recipe =
appears=20
as soon as it is generated, with the result that messages from different =
recipes=20
may be interspersed, sometimes even appearing on the same line. This can =
make=20
reading the output very difficult. </P><A=20
name=3Dindex-_002d_002doutput_002dsync></A><A name=3Dindex-_002dO></A>
<P>To avoid this you can use the =
=E2=80=98<SAMP>--output-sync</SAMP>=E2=80=99=20
(=E2=80=98<SAMP>-O</SAMP>=E2=80=99) option. This option instructs =
<CODE>make</CODE> to save the=20
output from the commands it invokes and print it all once the commands =
are=20
completed. Additionally, if there are multiple recursive =
<CODE>make</CODE>=20
invocations running in parallel, they will communicate so that only one =
of them=20
is generating output at a time. </P>
<P>If working directory printing is enabled (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#g_t_002dw-Optio=
n">The=20
=E2=80=98<SAMP>--print-directory</SAMP>=E2=80=99 Option</A>), the =
enter/leave messages are=20
printed around each output grouping. If you prefer not to see these =
messages add=20
the =E2=80=98<SAMP>--no-print-directory</SAMP>=E2=80=99 option to =
<CODE>MAKEFLAGS</CODE>. </P>
<P>There are four levels of granularity when synchronizing output, =
specified by=20
giving an argument to the option (e.g., =
=E2=80=98<SAMP>-Oline</SAMP>=E2=80=99 or=20
=E2=80=98<SAMP>--output-sync=3Drecurse</SAMP>=E2=80=99). </P>
<DL compact>
  <DT><CODE>none</CODE></DT>
  <DD>
  <P>This is the default: all output is sent directly as it is generated =
and no=20
  synchronization is performed. </P></DD>
  <DT><CODE>line</CODE></DT>
  <DD>
  <P>Output from each individual line of the recipe is grouped and =
printed as=20
  soon as that line is complete. If a recipe consists of multiple lines, =
they=20
  may be interspersed with lines from other recipes. </P></DD>
  <DT><CODE>target</CODE></DT>
  <DD>
  <P>Output from the entire recipe for each target is grouped and =
printed once=20
  the target is complete. This is the default if the =
<CODE>--output-sync</CODE>=20
  or <CODE>-O</CODE> option is given with no argument. </P></DD>
  <DT><CODE>recurse</CODE></DT>
  <DD>
  <P>Output from each recursive invocation of <CODE>make</CODE> is =
grouped and=20
  printed once the recursive invocation is complete. </P></DD></DL>
<P>Regardless of the mode chosen, the total build time will be the same. =
The=20
only difference is in how the output appears. </P>
<P>The =E2=80=98<SAMP>target</SAMP>=E2=80=99 and =
=E2=80=98<SAMP>recurse</SAMP>=E2=80=99 modes both collect the=20
output of the entire recipe of a target and display it uninterrupted =
when the=20
recipe completes. The difference between them is in how recipes that =
contain=20
recursive invocations of <CODE>make</CODE> are treated (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Recursion">Recu=
rsive Use=20
of <CODE>make</CODE></A>). For all recipes which have no recursive =
lines, the=20
=E2=80=98<SAMP>target</SAMP>=E2=80=99 and =
=E2=80=98<SAMP>recurse</SAMP>=E2=80=99 modes behave identically. </P>
<P>If the =E2=80=98<SAMP>recurse</SAMP>=E2=80=99 mode is chosen, recipes =
that contain recursive=20
<CODE>make</CODE> invocations are treated the same as other targets: the =
output=20
from the recipe, including the output from the recursive =
<CODE>make</CODE>, is=20
saved and printed after the entire recipe is complete. This ensures =
output from=20
all the targets built by a given recursive <CODE>make</CODE> instance =
are=20
grouped together, which may make the output easier to understand. =
However it=20
also leads to long periods of time during the build where no output is =
seen,=20
followed by large bursts of output. If you are not watching the build as =
it=20
proceeds, but instead viewing a log of the build after the fact, this =
may be the=20
best option for you. </P>
<P>If you are watching the output, the long gaps of quiet during the =
build can=20
be frustrating. The =E2=80=98<SAMP>target</SAMP>=E2=80=99 output =
synchronization mode detects=20
when <CODE>make</CODE> is going to be invoked recursively, using the =
standard=20
methods, and it will not synchronize the output of those lines. The =
recursive=20
<CODE>make</CODE> will perform the synchronization for its targets and =
the=20
output from each will be displayed immediately when it completes. Be =
aware that=20
output from recursive lines of the recipe are not synchronized (for =
example if=20
the recursive line prints a message before running <CODE>make</CODE>, =
that=20
message will not be synchronized). </P>
<P>The =E2=80=98<SAMP>line</SAMP>=E2=80=99 mode can be useful for =
front-ends that are watching=20
the output of <CODE>make</CODE> to track when recipes are started and =
completed.=20
</P>
<P>Some programs invoked by <CODE>make</CODE> may behave differently if =
they=20
determine they=E2=80=99re writing output to a terminal versus a file =
(often described as=20
=E2=80=9Cinteractive=E2=80=9D vs. =E2=80=9Cnon-interactive=E2=80=9D =
modes). For example, many programs that can=20
display colorized output will not do so if they determine they are not =
writing=20
to a terminal. If your makefile invokes a program like this then using =
the=20
output synchronization options will cause the program to believe =
it=E2=80=99s running in=20
=E2=80=9Cnon-interactive=E2=80=9D mode even though the output will =
ultimately go to the=20
terminal. </P>
<HR>
<A name=3DParallel-Input></A>
<DIV class=3Dheader>
<P>Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel-Output=
"=20
rel=3Dprev>Parallel Output</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel"=20
rel=3Dup>Parallel</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DInput-During-Parallel-Execution></A>
<H4 class=3Dsubsection>5.4.2 Input During Parallel Execution</H4><A=20
name=3Dindex-input-during-parallel-execution></A><A=20
name=3Dindex-parallel-execution_002c-input-during></A><A=20
name=3Dindex-standard-input></A>
<P>Two processes cannot both take input from the same device at the same =
time.=20
To make sure that only one recipe tries to take input from the terminal =
at once,=20
<CODE>make</CODE> will invalidate the standard input streams of all but =
one=20
running recipe. If another recipe attempts to read from standard input =
it will=20
usually incur a fatal error (a =E2=80=98<SAMP>Broken =
pipe</SAMP>=E2=80=99 signal). <A=20
name=3Dindex-broken-pipe></A></P>
<P>It is unpredictable which recipe will have a valid standard input =
stream=20
(which will come from the terminal, or wherever you redirect the =
standard input=20
of <CODE>make</CODE>). The first recipe run will always get it first, =
and the=20
first recipe started after that one finishes will get it next, and so =
on. </P>
<P>We will change how this aspect of <CODE>make</CODE> works if we find =
a better=20
alternative. In the mean time, you should not rely on any recipe using =
standard=20
input at all if you are using the parallel execution feature; but if you =
are not=20
using this feature, then standard input works normally in all recipes. =
</P>
<HR>
<A name=3DErrors></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Interrupts"=20
rel=3Dnext>Interrupts</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel"=20
rel=3Dprev>Parallel</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipes"=20
rel=3Dup>Recipes</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DErrors-in-Recipes></A>
<H3 class=3Dsection>5.5 Errors in Recipes</H3><A=20
name=3Dindex-errors-_0028in-recipes_0029></A><A=20
name=3Dindex-recipes_002c-errors-in></A><A=20
name=3Dindex-exit-status-_0028errors_0029></A>
<P>After each shell invocation returns, <CODE>make</CODE> looks at its =
exit=20
status. If the shell completed successfully (the exit status is zero), =
the next=20
line in the recipe is executed in a new shell; after the last line is =
finished,=20
the rule is finished. </P>
<P>If there is an error (the exit status is nonzero), <CODE>make</CODE> =
gives up=20
on the current rule, and perhaps on all rules. </P>
<P>Sometimes the failure of a certain recipe line does not indicate a =
problem.=20
For example, you may use the <CODE>mkdir</CODE> command to ensure that a =

directory exists. If the directory already exists, <CODE>mkdir</CODE> =
will=20
report an error, but you probably want <CODE>make</CODE> to continue =
regardless.=20
</P><A name=3Dindex-_002d-_0028in-recipes_0029></A>
<P>To ignore errors in a recipe line, write a =
=E2=80=98<SAMP>-</SAMP>=E2=80=99 at the beginning=20
of the line=E2=80=99s text (after the initial tab). The =
=E2=80=98<SAMP>-</SAMP>=E2=80=99 is discarded=20
before the line is passed to the shell for execution. </P>
<P>For example, </P>
<DIV class=3Dexample><PRE class=3Dexample>clean:
        -rm -f *.o
</PRE></DIV><A name=3Dindex-rm-_0028shell-command_0029-3></A>
<P>This causes <CODE>make</CODE> to continue even if <CODE>rm</CODE> is =
unable=20
to remove a file. </P><A name=3Dindex-_002di></A><A=20
name=3Dindex-_002d_002dignore_002derrors></A><A =
name=3Dindex-_002eIGNORE-1></A>
<P>When you run <CODE>make</CODE> with the =
=E2=80=98<SAMP>-i</SAMP>=E2=80=99 or=20
=E2=80=98<SAMP>--ignore-errors</SAMP>=E2=80=99 flag, errors are ignored =
in all recipes of all=20
rules. A rule in the makefile for the special target =
<CODE>.IGNORE</CODE> has=20
the same effect, if there are no prerequisites. These ways of ignoring =
errors=20
are obsolete because =E2=80=98<SAMP>-</SAMP>=E2=80=99 is more flexible. =
</P>
<P>When errors are to be ignored, because of either a =
=E2=80=98<SAMP>-</SAMP>=E2=80=99 or the=20
=E2=80=98<SAMP>-i</SAMP>=E2=80=99 flag, <CODE>make</CODE> treats an =
error return just like=20
success, except that it prints out a message that tells you the status =
code the=20
shell exited with, and says that the error has been ignored. </P>
<P>When an error happens that <CODE>make</CODE> has not been told to =
ignore, it=20
implies that the current target cannot be correctly remade, and neither =
can any=20
other that depends on it either directly or indirectly. No further =
recipes will=20
be executed for these targets, since their preconditions have not been =
achieved.=20
</P><A name=3Dindex-_002dk></A><A =
name=3Dindex-_002d_002dkeep_002dgoing></A>
<P>Normally <CODE>make</CODE> gives up immediately in this circumstance, =

returning a nonzero status. However, if the =
=E2=80=98<SAMP>-k</SAMP>=E2=80=99 or=20
=E2=80=98<SAMP>--keep-going</SAMP>=E2=80=99 flag is specified, =
<CODE>make</CODE> continues to=20
consider the other prerequisites of the pending targets, remaking them =
if=20
necessary, before it gives up and returns nonzero status. For example, =
after an=20
error in compiling one object file, =E2=80=98<SAMP>make =
-k</SAMP>=E2=80=99 will continue=20
compiling other object files even though it already knows that linking =
them will=20
be impossible. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Summary=20
of Options</A>. </P>
<P>The usual behavior assumes that your purpose is to get the specified =
targets=20
up to date; once <CODE>make</CODE> learns that this is impossible, it =
might as=20
well report the failure immediately. The =
=E2=80=98<SAMP>-k</SAMP>=E2=80=99 option says that the=20
real purpose is to test as many of the changes made in the program as =
possible,=20
perhaps to find several independent problems so that you can correct =
them all=20
before the next attempt to compile. This is why Emacs=E2=80=99 =
<CODE>compile</CODE>=20
command passes the =E2=80=98<SAMP>-k</SAMP>=E2=80=99 flag by default. <A =

name=3Dindex-Emacs-_0028M_002dx-compile_0029></A></P><A=20
name=3Dindex-_002eDELETE_005fON_005fERROR-1></A><A=20
name=3Dindex-deletion-of-target-files></A><A=20
name=3Dindex-removal-of-target-files></A><A=20
name=3Dindex-target_002c-deleting-on-error></A>
<P>Usually when a recipe line fails, if it has changed the target file =
at all,=20
the file is corrupted and cannot be used=E2=80=94or at least it is not =
completely=20
updated. Yet the file=E2=80=99s time stamp says that it is now up to =
date, so the next=20
time <CODE>make</CODE> runs, it will not try to update that file. The =
situation=20
is just the same as when the shell is killed by a signal; see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Interrupts">Int=
errupts</A>.=20
So generally the right thing to do is to delete the target file if the =
recipe=20
fails after beginning to change the file. <CODE>make</CODE> will do this =
if=20
<CODE>.DELETE_ON_ERROR</CODE> appears as a target. This is almost always =
what=20
you want <CODE>make</CODE> to do, but it is not historical practice; so =
for=20
compatibility, you must explicitly request it. </P>
<HR>
<A name=3DInterrupts></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Recursion"=20
rel=3Dnext>Recursion</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Errors"=20
rel=3Dprev>Errors</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipes"=20
rel=3Dup>Recipes</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DInterrupting-or-Killing-make></A>
<H3 class=3Dsection>5.6 Interrupting or Killing <CODE>make</CODE></H3><A =

name=3Dindex-interrupt></A><A name=3Dindex-signal></A><A=20
name=3Dindex-deletion-of-target-files-1></A><A=20
name=3Dindex-removal-of-target-files-1></A><A=20
name=3Dindex-target_002c-deleting-on-interrupt></A><A=20
name=3Dindex-killing-_0028interruption_0029></A>
<P>If <CODE>make</CODE> gets a fatal signal while a shell is executing, =
it may=20
delete the target file that the recipe was supposed to update. This is =
done if=20
the target file=E2=80=99s last-modification time has changed since =
<CODE>make</CODE>=20
first checked it. </P>
<P>The purpose of deleting the target is to make sure that it is remade =
from=20
scratch when <CODE>make</CODE> is next run. Why is this? Suppose you =
type=20
<KBD>Ctrl-c</KBD> while a compiler is running, and it has begun to write =
an=20
object file <SAMP>foo.o</SAMP>. The <KBD>Ctrl-c</KBD> kills the =
compiler,=20
resulting in an incomplete file whose last-modification time is newer =
than the=20
source file <SAMP>foo.c</SAMP>. But <CODE>make</CODE> also receives the=20
<KBD>Ctrl-c</KBD> signal and deletes this incomplete file. If =
<CODE>make</CODE>=20
did not do this, the next invocation of <CODE>make</CODE> would think =
that=20
<SAMP>foo.o</SAMP> did not require updating=E2=80=94resulting in a =
strange error message=20
from the linker when it tries to link an object file half of which is =
missing.=20
</P><A name=3Dindex-_002ePRECIOUS-1></A>
<P>You can prevent the deletion of a target file in this way by making =
the=20
special target <CODE>.PRECIOUS</CODE> depend on it. Before remaking a =
target,=20
<CODE>make</CODE> checks to see whether it appears on the prerequisites =
of=20
<CODE>.PRECIOUS</CODE>, and thereby decides whether the target should be =
deleted=20
if a signal happens. Some reasons why you might do this are that the =
target is=20
updated in some atomic fashion, or exists only to record a =
modification-time=20
(its contents do not matter), or must exist at all times to prevent =
other sorts=20
of trouble. </P>
<HR>
<A name=3DRecursion></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Canned-Recipes"=
=20
rel=3Dnext>Canned Recipes</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Interrupts"=20
rel=3Dprev>Interrupts</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipes"=20
rel=3Dup>Recipes</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DRecursive-Use-of-make></A>
<H3 class=3Dsection>5.7 Recursive Use of <CODE>make</CODE></H3><A=20
name=3Dindex-recursion></A><A =
name=3Dindex-subdirectories_002c-recursion-for></A>
<P>Recursive use of <CODE>make</CODE> means using <CODE>make</CODE> as a =
command=20
in a makefile. This technique is useful when you want separate makefiles =
for=20
various subsystems that compose a larger system. For example, suppose =
you have a=20
sub-directory <SAMP>subdir</SAMP> which has its own makefile, and you =
would like=20
the containing directory=E2=80=99s makefile to run <CODE>make</CODE> on =
the=20
sub-directory. You can do it by writing this: </P>
<DIV class=3Dexample><PRE class=3Dexample>subsystem:
        cd subdir &amp;&amp; $(MAKE)
</PRE></DIV>
<P>or, equivalently, this (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Summary=20
of Options</A>): </P>
<DIV class=3Dexample><PRE class=3Dexample>subsystem:
        $(MAKE) -C subdir
</PRE></DIV><A name=3Dindex-_002dC></A><A =
name=3Dindex-_002d_002ddirectory></A>
<P>You can write recursive <CODE>make</CODE> commands just by copying =
this=20
example, but there are many things to know about how they work and why, =
and=20
about how the sub-<CODE>make</CODE> relates to the top-level =
<CODE>make</CODE>.=20
You may also find it useful to declare targets that invoke recursive=20
<CODE>make</CODE> commands as =E2=80=98<SAMP>.PHONY</SAMP>=E2=80=99 (for =
more discussion on when=20
this is useful, see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Phony-Targets">=
Phony=20
Targets</A>). </P><A name=3Dindex-CURDIR></A>
<P>For your convenience, when GNU <CODE>make</CODE> starts (after it has =

processed any <CODE>-C</CODE> options) it sets the variable =
<CODE>CURDIR</CODE>=20
to the pathname of the current working directory. This value is never =
touched by=20
<CODE>make</CODE> again: in particular note that if you include files =
from other=20
directories the value of <CODE>CURDIR</CODE> does not change. The value =
has the=20
same precedence it would have if it were set in the makefile (by =
default, an=20
environment variable <CODE>CURDIR</CODE> will not override this value). =
Note=20
that setting this variable has no impact on the operation of =
<CODE>make</CODE>=20
(it does not cause <CODE>make</CODE> to change its working directory, =
for=20
example). </P>
<TABLE class=3Dmenu border=3D0 cellSpacing=3D0>
  <TBODY>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D1=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#MAKE-Variable">=
MAKE=20
      Variable</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>The special effects of using=20
      =E2=80=98<SAMP>$(MAKE)</SAMP>=E2=80=99. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D2=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables_002fR=
ecursion">Variables/Recursion</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to communicate variables to a=20
      sub-<CODE>make</CODE>. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D3=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to communicate options to a=20
      sub-<CODE>make</CODE>. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D4=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#g_t_002dw-Optio=
n">-w=20
      Option</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How the =
=E2=80=98<SAMP>-w</SAMP>=E2=80=99 or=20
      =E2=80=98<SAMP>--print-directory</SAMP>=E2=80=99 option helps =
debug use of recursive=20
      <CODE>make</CODE> commands. </TD></TR></TBODY></TABLE>
<HR>
<A name=3DMAKE-Variable></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables_002fR=
ecursion"=20
rel=3Dnext>Variables/Recursion</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Recursion"=20
rel=3Dprev>Recursion</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Recursion"=20
rel=3Dup>Recursion</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DHow-the-MAKE-Variable-Works></A>
<H4 class=3Dsubsection>5.7.1 How the <CODE>MAKE</CODE> Variable =
Works</H4><A=20
name=3Dindex-MAKE></A><A =
name=3Dindex-recursion_002c-and-MAKE-variable></A>
<P>Recursive <CODE>make</CODE> commands should always use the variable=20
<CODE>MAKE</CODE>, not the explicit command name =
=E2=80=98<SAMP>make</SAMP>=E2=80=99, as shown=20
here: </P>
<DIV class=3Dexample><PRE class=3Dexample>subsystem:
        cd subdir &amp;&amp; $(MAKE)
</PRE></DIV>
<P>The value of this variable is the file name with which =
<CODE>make</CODE> was=20
invoked. If this file name was <SAMP>/bin/make</SAMP>, then the recipe =
executed=20
is =E2=80=98<SAMP>cd subdir &amp;&amp; /bin/make</SAMP>=E2=80=99. If you =
use a special version=20
of <CODE>make</CODE> to run the top-level makefile, the same special =
version=20
will be executed for recursive invocations. <A=20
name=3Dindex-cd-_0028shell-command_0029-1></A></P><A=20
name=3Dindex-_002b_002c-and-recipes></A>
<P>As a special feature, using the variable <CODE>MAKE</CODE> in the =
recipe of a=20
rule alters the effects of the =E2=80=98<SAMP>-t</SAMP>=E2=80=99 =
(=E2=80=98<SAMP>--touch</SAMP>=E2=80=99),=20
=E2=80=98<SAMP>-n</SAMP>=E2=80=99 =
(=E2=80=98<SAMP>--just-print</SAMP>=E2=80=99), or =
=E2=80=98<SAMP>-q</SAMP>=E2=80=99=20
(=E2=80=98<SAMP><SPAN =
class=3Dnolinebreak>--question</SPAN></SAMP>=E2=80=99<!-- /@w -->) =
option.=20
Using the <CODE>MAKE</CODE> variable has the same effect as using a=20
=E2=80=98<SAMP>+</SAMP>=E2=80=99 character at the beginning of the =
recipe line. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution">Instead=20
of Executing the Recipes</A>. This special feature is only enabled if =
the=20
<CODE>MAKE</CODE> variable appears directly in the recipe: it does not =
apply if=20
the <CODE>MAKE</CODE> variable is referenced through expansion of =
another=20
variable. In the latter case you must use the =
=E2=80=98<SAMP>+</SAMP>=E2=80=99 token to get=20
these special effects. </P>
<P>Consider the command =E2=80=98<SAMP>make -t</SAMP>=E2=80=99 in the =
above example. (The=20
=E2=80=98<SAMP>-t</SAMP>=E2=80=99 option marks targets as up to date =
without actually running=20
any recipes; see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution">Instead=20
of Execution</A>.) Following the usual definition of =
=E2=80=98<SAMP>-t</SAMP>=E2=80=99, a=20
=E2=80=98<SAMP>make -t</SAMP>=E2=80=99 command in the example would =
create a file named=20
<SAMP>subsystem</SAMP> and do nothing else. What you really want it to =
do is run=20
=E2=80=98<SAMP>cd&nbsp;subdir&nbsp;&amp;&amp;<!-- /@w --> =
make&nbsp;<SPAN=20
class=3Dnolinebreak>-t</SPAN><!-- /@w --></SAMP>=E2=80=99; but that =
would require=20
executing the recipe, and =E2=80=98<SAMP>-t</SAMP>=E2=80=99 says not to =
execute recipes. <A=20
name=3Dindex-_002dt_002c-and-recursion></A><A=20
name=3Dindex-recursion_002c-and-_002dt></A><A=20
name=3Dindex-_002d_002dtouch_002c-and-recursion></A></P>
<P>The special feature makes this do what you want: whenever a recipe =
line of a=20
rule contains the variable <CODE>MAKE</CODE>, the flags =
=E2=80=98<SAMP>-t</SAMP>=E2=80=99,=20
=E2=80=98<SAMP>-n</SAMP>=E2=80=99 and =E2=80=98<SAMP>-q</SAMP>=E2=80=99 =
do not apply to that line. Recipe lines=20
containing <CODE>MAKE</CODE> are executed normally despite the presence =
of a=20
flag that causes most recipes not to be run. The usual =
<CODE>MAKEFLAGS</CODE>=20
mechanism passes the flags to the sub-<CODE>make</CODE> (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Communicating=20
Options to a Sub-<CODE>make</CODE></A>), so your request to touch the =
files, or=20
print the recipes, is propagated to the subsystem. </P>
<HR>
<A name=3DVariables_002fRecursion></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion"=20
rel=3Dnext>Options/Recursion</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#MAKE-Variable" =

rel=3Dprev>MAKE Variable</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Recursion"=20
rel=3Dup>Recursion</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A=20
name=3DCommunicating-Variables-to-a-Sub_002dmake></A>
<H4 class=3Dsubsection>5.7.2 Communicating Variables to a=20
Sub-<CODE>make</CODE></H4><A name=3Dindex-sub_002dmake></A><A=20
name=3Dindex-environment_002c-and-recursion></A><A=20
name=3Dindex-exporting-variables></A><A=20
name=3Dindex-variables_002c-environment></A><A=20
name=3Dindex-variables_002c-exporting></A><A=20
name=3Dindex-recursion_002c-and-environment></A><A=20
name=3Dindex-recursion_002c-and-variables></A>
<P>Variable values of the top-level <CODE>make</CODE> can be passed to =
the=20
sub-<CODE>make</CODE> through the environment by explicit request. These =

variables are defined in the sub-<CODE>make</CODE> as defaults, but they =
do not=20
override variables defined in the makefile used by the =
sub-<CODE>make</CODE>=20
unless you use the =E2=80=98<SAMP>-e</SAMP>=E2=80=99 switch (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Summary=20
of Options</A>). </P>
<P>To pass down, or <EM>export</EM>, a variable, <CODE>make</CODE> adds =
the=20
variable and its value to the environment for running each line of the =
recipe.=20
The sub-<CODE>make</CODE>, in turn, uses the environment to initialize =
its table=20
of variable values. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Environment">Va=
riables=20
from the Environment</A>. </P>
<P>Except by explicit request, <CODE>make</CODE> exports a variable only =
if it=20
is either defined in the environment initially or set on the command =
line, and=20
if its name consists only of letters, numbers, and underscores. Some =
shells=20
cannot cope with environment variable names consisting of characters =
other than=20
letters, numbers, and underscores. </P><A=20
name=3Dindex-SHELL_002c-exported-value></A>
<P>The value of the <CODE>make</CODE> variable <CODE>SHELL</CODE> is not =

exported. Instead, the value of the <CODE>SHELL</CODE> variable from the =

invoking environment is passed to the sub-<CODE>make</CODE>. You can =
force=20
<CODE>make</CODE> to export its value for <CODE>SHELL</CODE> by using =
the=20
<CODE>export</CODE> directive, described below. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Choosing-the-Sh=
ell">Choosing=20
the Shell</A>. </P>
<P>The special variable <CODE>MAKEFLAGS</CODE> is always exported =
(unless you=20
unexport it). <CODE>MAKEFILES</CODE> is exported if you set it to =
anything. </P>
<P><CODE>make</CODE> automatically passes down variable values that were =
defined=20
on the command line, by putting them in the <CODE>MAKEFLAGS</CODE> =
variable. See=20
<A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A>.=20
</P>
<P>Variables are <EM>not</EM> normally passed down if they were created =
by=20
default by <CODE>make</CODE> (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Variables=20
Used by Implicit Rules</A>). The sub-<CODE>make</CODE> will define these =
for=20
itself. </P><A name=3Dindex-export></A>
<P>If you want to export specific variables to a sub-<CODE>make</CODE>, =
use the=20
<CODE>export</CODE> directive, like this: </P>
<DIV class=3Dexample><PRE class=3Dexample>export <VAR>variable</VAR> =
=E2=80=A6
</PRE></DIV><A name=3Dindex-unexport></A>
<P>If you want to <EM>prevent</EM> a variable from being exported, use =
the=20
<CODE>unexport</CODE> directive, like this: </P>
<DIV class=3Dexample><PRE class=3Dexample>unexport <VAR>variable</VAR> =
=E2=80=A6
</PRE></DIV>
<P>In both of these forms, the arguments to <CODE>export</CODE> and=20
<CODE>unexport</CODE> are expanded, and so could be variables or =
functions which=20
expand to a (list of) variable names to be (un)exported. </P>
<P>As a convenience, you can define a variable and export it at the same =
time by=20
doing: </P>
<DIV class=3Dexample><PRE class=3Dexample>export <VAR>variable</VAR> =3D =
value
</PRE></DIV>
<P>has the same result as: </P>
<DIV class=3Dexample><PRE class=3Dexample><VAR>variable</VAR> =3D value
export <VAR>variable</VAR>
</PRE></DIV>
<P>and </P>
<DIV class=3Dexample><PRE class=3Dexample>export <VAR>variable</VAR> =
:=3D value
</PRE></DIV>
<P>has the same result as: </P>
<DIV class=3Dexample><PRE class=3Dexample><VAR>variable</VAR> :=3D value
export <VAR>variable</VAR>
</PRE></DIV>
<P>Likewise, </P>
<DIV class=3Dexample><PRE class=3Dexample>export <VAR>variable</VAR> =
+=3D value
</PRE></DIV>
<P>is just like: </P>
<DIV class=3Dexample><PRE class=3Dexample><VAR>variable</VAR> +=3D value
export <VAR>variable</VAR>
</PRE></DIV>
<P>See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Appending">Appe=
nding=20
More Text to Variables</A>. </P>
<P>You may notice that the <CODE>export</CODE> and <CODE>unexport</CODE> =

directives work in <CODE>make</CODE> in the same way they work in the =
shell,=20
<CODE>sh</CODE>. </P>
<P>If you want all variables to be exported by default, you can use=20
<CODE>export</CODE> by itself: </P>
<DIV class=3Dexample><PRE class=3Dexample>export
</PRE></DIV>
<P>This tells <CODE>make</CODE> that variables which are not explicitly=20
mentioned in an <CODE>export</CODE> or <CODE>unexport</CODE> directive =
should be=20
exported. Any variable given in an <CODE>unexport</CODE> directive will =
still=20
<EM>not</EM> be exported. If you use <CODE>export</CODE> by itself to =
export=20
variables by default, variables whose names contain characters other =
than=20
alphanumerics and underscores will not be exported unless specifically =
mentioned=20
in an <CODE>export</CODE> directive. </P><A=20
name=3Dindex-_002eEXPORT_005fALL_005fVARIABLES-1></A>
<P>The behavior elicited by an <CODE>export</CODE> directive by itself =
was the=20
default in older versions of GNU <CODE>make</CODE>. If your makefiles =
depend on=20
this behavior and you want to be compatible with old versions of=20
<CODE>make</CODE>, you can write a rule for the special target=20
<CODE>.EXPORT_ALL_VARIABLES</CODE> instead of using the =
<CODE>export</CODE>=20
directive. This will be ignored by old <CODE>make</CODE>s, while the=20
<CODE>export</CODE> directive will cause a syntax error. <A=20
name=3Dindex-compatibility-in-exporting></A></P>
<P>Likewise, you can use <CODE>unexport</CODE> by itself to tell=20
<CODE>make</CODE> <EM>not</EM> to export variables by default. Since =
this is the=20
default behavior, you would only need to do this if <CODE>export</CODE> =
had been=20
used by itself earlier (in an included makefile, perhaps). You=20
<STRONG>cannot</STRONG> use <CODE>export</CODE> and =
<CODE>unexport</CODE> by=20
themselves to have variables exported for some recipes and not for =
others. The=20
last <CODE>export</CODE> or <CODE>unexport</CODE> directive that appears =
by=20
itself determines the behavior for the entire run of <CODE>make</CODE>. =
</P><A=20
name=3Dindex-MAKELEVEL></A><A name=3Dindex-recursion_002c-level-of></A>
<P>As a special feature, the variable <CODE>MAKELEVEL</CODE> is changed =
when it=20
is passed down from level to level. This variable=E2=80=99s value is a =
string which is=20
the depth of the level as a decimal number. The value is =
=E2=80=98<SAMP>0</SAMP>=E2=80=99 for=20
the top-level <CODE>make</CODE>; =E2=80=98<SAMP>1</SAMP>=E2=80=99 for a =
sub-<CODE>make</CODE>,=20
=E2=80=98<SAMP>2</SAMP>=E2=80=99 for a sub-sub-<CODE>make</CODE>, and so =
on. The incrementation=20
happens when <CODE>make</CODE> sets up the environment for a recipe. =
</P>
<P>The main use of <CODE>MAKELEVEL</CODE> is to test it in a conditional =

directive (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditionals">C=
onditional=20
Parts of Makefiles</A>); this way you can write a makefile that behaves =
one way=20
if run recursively and another way if run directly by you. </P><A=20
name=3Dindex-MAKEFILES-1></A>
<P>You can use the variable <CODE>MAKEFILES</CODE> to cause all=20
sub-<CODE>make</CODE> commands to use additional makefiles. The value of =

<CODE>MAKEFILES</CODE> is a whitespace-separated list of file names. =
This=20
variable, if defined in the outer-level makefile, is passed down through =
the=20
environment; then it serves as a list of extra makefiles for the=20
sub-<CODE>make</CODE> to read before the usual or specified ones. See <A =

href=3D"http://www.gnu.org/software/make/manual/make.html#MAKEFILES-Varia=
ble">The=20
Variable <CODE>MAKEFILES</CODE></A>. </P>
<HR>
<A name=3DOptions_002fRecursion></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#g_t_002dw-Optio=
n"=20
rel=3Dnext>-w Option</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables_002fR=
ecursion"=20
rel=3Dprev>Variables/Recursion</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Recursion"=20
rel=3Dup>Recursion</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A=20
name=3DCommunicating-Options-to-a-Sub_002dmake></A>
<H4 class=3Dsubsection>5.7.3 Communicating Options to a=20
Sub-<CODE>make</CODE></H4><A =
name=3Dindex-options_002c-and-recursion></A><A=20
name=3Dindex-recursion_002c-and-options></A><A =
name=3Dindex-MAKEFLAGS></A>
<P>Flags such as =E2=80=98<SAMP>-s</SAMP>=E2=80=99 and =
=E2=80=98<SAMP>-k</SAMP>=E2=80=99 are passed=20
automatically to the sub-<CODE>make</CODE> through the variable=20
<CODE>MAKEFLAGS</CODE>. This variable is set up automatically by=20
<CODE>make</CODE> to contain the flag letters that <CODE>make</CODE> =
received.=20
Thus, if you do =E2=80=98<SAMP>make&nbsp;<SPAN =
class=3Dnolinebreak>-ks</SPAN></SAMP>=E2=80=99<!-- /@w --> then =
<CODE>MAKEFLAGS</CODE>=20
gets the value =E2=80=98<SAMP>ks</SAMP>=E2=80=99. </P>
<P>As a consequence, every sub-<CODE>make</CODE> gets a value for=20
<CODE>MAKEFLAGS</CODE> in its environment. In response, it takes the =
flags from=20
that value and processes them as if they had been given as arguments. =
See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Summary=20
of Options</A>. </P><A=20
name=3Dindex-command-line-variable-definitions_002c-and-recursion></A><A =

name=3Dindex-variables_002c-command-line_002c-and-recursion></A><A=20
name=3Dindex-recursion_002c-and-command-line-variable-definitions></A>
<P>Likewise variables defined on the command line are passed to the=20
sub-<CODE>make</CODE> through <CODE>MAKEFLAGS</CODE>. Words in the value =
of=20
<CODE>MAKEFLAGS</CODE> that contain =E2=80=98<SAMP>=3D</SAMP>=E2=80=99, =
<CODE>make</CODE> treats=20
as variable definitions just as if they appeared on the command line. =
See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Overriding">Ove=
rriding=20
Variables</A>. </P><A name=3Dindex-_002dC_002c-and-recursion></A><A=20
name=3Dindex-_002df_002c-and-recursion></A><A=20
name=3Dindex-_002do_002c-and-recursion></A><A=20
name=3Dindex-_002dW_002c-and-recursion></A><A=20
name=3Dindex-_002d_002ddirectory_002c-and-recursion></A><A=20
name=3Dindex-_002d_002dfile_002c-and-recursion></A><A=20
name=3Dindex-_002d_002dold_002dfile_002c-and-recursion></A><A=20
name=3Dindex-_002d_002dassume_002dold_002c-and-recursion></A><A=20
name=3Dindex-_002d_002dassume_002dnew_002c-and-recursion></A><A=20
name=3Dindex-_002d_002dnew_002dfile_002c-and-recursion></A><A=20
name=3Dindex-recursion_002c-and-_002dC></A><A=20
name=3Dindex-recursion_002c-and-_002df></A><A=20
name=3Dindex-recursion_002c-and-_002do></A><A=20
name=3Dindex-recursion_002c-and-_002dW></A>
<P>The options =E2=80=98<SAMP>-C</SAMP>=E2=80=99, =
=E2=80=98<SAMP>-f</SAMP>=E2=80=99, =E2=80=98<SAMP>-o</SAMP>=E2=80=99, =
and=20
=E2=80=98<SAMP>-W</SAMP>=E2=80=99 are not put into =
<CODE>MAKEFLAGS</CODE>; these options are not=20
passed down. </P><A name=3Dindex-_002dj_002c-and-recursion></A><A=20
name=3Dindex-_002d_002djobs_002c-and-recursion></A><A=20
name=3Dindex-recursion_002c-and-_002dj></A><A=20
name=3Dindex-job-slots_002c-and-recursion></A>
<P>The =E2=80=98<SAMP>-j</SAMP>=E2=80=99 option is a special case (see =
<A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel">Paral=
lel=20
Execution</A>). If you set it to some numeric value =
=E2=80=98<SAMP>N</SAMP>=E2=80=99 and your=20
operating system supports it (most any UNIX system will; others =
typically=20
won=E2=80=99t), the parent <CODE>make</CODE> and all the =
sub-<CODE>make</CODE>s will=20
communicate to ensure that there are only =
=E2=80=98<SAMP>N</SAMP>=E2=80=99 jobs running at the=20
same time between them all. Note that any job that is marked recursive =
(see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution">Instead=20
of Executing Recipes</A>) doesn=E2=80=99t count against the total jobs =
(otherwise we=20
could get =E2=80=98<SAMP>N</SAMP>=E2=80=99 sub-<CODE>make</CODE>s =
running and have no slots left=20
over for any real work!) </P>
<P>If your operating system doesn=E2=80=99t support the above =
communication, then=20
=E2=80=98<SAMP>-j 1</SAMP>=E2=80=99 is always put into =
<CODE>MAKEFLAGS</CODE> instead of the=20
value you specified. This is because if the =E2=80=98<SAMP><SPAN=20
class=3Dnolinebreak>-j</SPAN></SAMP>=E2=80=99<!-- /@w --> option were =
passed down to=20
sub-<CODE>make</CODE>s, you would get many more jobs running in parallel =
than=20
you asked for. If you give =E2=80=98<SAMP>-j</SAMP>=E2=80=99 with no =
numeric argument, meaning=20
to run as many jobs as possible in parallel, this is passed down, since =
multiple=20
infinities are no more than one. </P>
<P>If you do not want to pass the other flags down, you must change the =
value of=20
<CODE>MAKEFLAGS</CODE>, like this: </P>
<DIV class=3Dexample><PRE class=3Dexample>subsystem:
        cd subdir &amp;&amp; $(MAKE) MAKEFLAGS=3D
</PRE></DIV><A name=3Dindex-MAKEOVERRIDES></A>
<P>The command line variable definitions really appear in the variable=20
<CODE>MAKEOVERRIDES</CODE>, and <CODE>MAKEFLAGS</CODE> contains a =
reference to=20
this variable. If you do want to pass flags down normally, but =
don=E2=80=99t want to=20
pass down the command line variable definitions, you can reset=20
<CODE>MAKEOVERRIDES</CODE> to empty, like this: </P>
<DIV class=3Dexample><PRE class=3Dexample>MAKEOVERRIDES =3D
</PRE></DIV><A name=3Dindex-Arg-list-too-long></A><A =
name=3Dindex-E2BIG></A>
<P>This is not usually useful to do. However, some systems have a small =
fixed=20
limit on the size of the environment, and putting so much information =
into the=20
value of <CODE>MAKEFLAGS</CODE> can exceed it. If you see the error =
message=20
=E2=80=98<SAMP>Arg list too long</SAMP>=E2=80=99, this may be the =
problem. <A=20
name=3Dindex-_002ePOSIX-1></A><A name=3Dindex-POSIX-1></A>(For strict =
compliance=20
with POSIX.2, changing <CODE>MAKEOVERRIDES</CODE> does not affect=20
<CODE>MAKEFLAGS</CODE> if the special target =
=E2=80=98<SAMP>.POSIX</SAMP>=E2=80=99 appears in=20
the makefile. You probably do not care about this.) </P><A=20
name=3Dindex-MFLAGS></A>
<P>A similar variable <CODE>MFLAGS</CODE> exists also, for historical=20
compatibility. It has the same value as <CODE>MAKEFLAGS</CODE> except =
that it=20
does not contain the command line variable definitions, and it always =
begins=20
with a hyphen unless it is empty (<CODE>MAKEFLAGS</CODE> begins with a =
hyphen=20
only when it begins with an option that has no single-letter version, =
such as=20
=E2=80=98<SAMP>--warn-undefined-variables</SAMP>=E2=80=99). =
<CODE>MFLAGS</CODE> was=20
traditionally used explicitly in the recursive <CODE>make</CODE> =
command, like=20
this: </P>
<DIV class=3Dexample><PRE class=3Dexample>subsystem:
        cd subdir &amp;&amp; $(MAKE) $(MFLAGS)
</PRE></DIV>
<P>but now <CODE>MAKEFLAGS</CODE> makes this usage redundant. If you =
want your=20
makefiles to be compatible with old <CODE>make</CODE> programs, use this =

technique; it will work fine with more modern <CODE>make</CODE> versions =
too.=20
</P><A name=3Dindex-setting-options-from-environment></A><A=20
name=3Dindex-options_002c-setting-from-environment></A><A=20
name=3Dindex-setting-options-in-makefiles></A><A=20
name=3Dindex-options_002c-setting-in-makefiles></A>
<P>The <CODE>MAKEFLAGS</CODE> variable can also be useful if you want to =
have=20
certain options, such as =E2=80=98<SAMP>-k</SAMP>=E2=80=99 (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Summary=20
of Options</A>), set each time you run <CODE>make</CODE>. You simply put =
a value=20
for <CODE>MAKEFLAGS</CODE> in your environment. You can also set=20
<CODE>MAKEFLAGS</CODE> in a makefile, to specify additional flags that =
should=20
also be in effect for that makefile. (Note that you cannot use=20
<CODE>MFLAGS</CODE> this way. That variable is set only for =
compatibility;=20
<CODE>make</CODE> does not interpret a value you set for it in any way.) =
</P>
<P>When <CODE>make</CODE> interprets the value of <CODE>MAKEFLAGS</CODE> =
(either=20
from the environment or from a makefile), it first prepends a hyphen if =
the=20
value does not already begin with one. Then it chops the value into =
words=20
separated by blanks, and parses these words as if they were options =
given on the=20
command line (except that =E2=80=98<SAMP>-C</SAMP>=E2=80=99, =
=E2=80=98<SAMP>-f</SAMP>=E2=80=99,=20
=E2=80=98<SAMP>-h</SAMP>=E2=80=99, =E2=80=98<SAMP>-o</SAMP>=E2=80=99, =
=E2=80=98<SAMP>-W</SAMP>=E2=80=99, and their long-named=20
versions are ignored; and there is no error for an invalid option). </P>
<P>If you do put <CODE>MAKEFLAGS</CODE> in your environment, you should =
be sure=20
not to include any options that will drastically affect the actions of=20
<CODE>make</CODE> and undermine the purpose of makefiles and of=20
<CODE>make</CODE> itself. For instance, the =
=E2=80=98<SAMP>-t</SAMP>=E2=80=99,=20
=E2=80=98<SAMP>-n</SAMP>=E2=80=99, and =E2=80=98<SAMP>-q</SAMP>=E2=80=99 =
options, if put in one of these=20
variables, could have disastrous consequences and would certainly have =
at least=20
surprising and probably annoying effects. </P>
<P>If you=E2=80=99d like to run other implementations of =
<CODE>make</CODE> in addition=20
to GNU <CODE>make</CODE>, and hence do not want to add GNU=20
<CODE>make</CODE>-specific flags to the <CODE>MAKEFLAGS</CODE> variable, =
you can=20
add them to the <CODE>GNUMAKEFLAGS</CODE> variable instead. This =
variable is=20
parsed just before <CODE>MAKEFLAGS</CODE>, in the same way as=20
<CODE>MAKEFLAGS</CODE>. When <CODE>make</CODE> constructs =
<CODE>MAKEFLAGS</CODE>=20
to pass to a recursive <CODE>make</CODE> it will include all flags, even =
those=20
taken from <CODE>GNUMAKEFLAGS</CODE>. As a result, after parsing=20
<CODE>GNUMAKEFLAGS</CODE> GNU <CODE>make</CODE> sets this variable to =
the empty=20
string to avoid duplicating flags during recursion. </P>
<P>It=E2=80=99s best to use <CODE>GNUMAKEFLAGS</CODE> only with flags =
which won=E2=80=99t=20
materially change the behavior of your makefiles. If your makefiles =
require GNU=20
make anyway then simply use <CODE>MAKEFLAGS</CODE>. Flags such as=20
=E2=80=98<SAMP>--no-print-directory</SAMP>=E2=80=99 or =
=E2=80=98<SAMP>--output-sync</SAMP>=E2=80=99 may be=20
appropriate for <CODE>GNUMAKEFLAGS</CODE>. </P>
<HR>
<A name=3Dg_t_002dw-Option></A>
<DIV class=3Dheader>
<P>Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion"=20
rel=3Dprev>Options/Recursion</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Recursion"=20
rel=3Dup>Recursion</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A=20
name=3DThe-_002d_002dprint_002ddirectory-Option></A>
<H4 class=3Dsubsection>5.7.4 The =
=E2=80=98<SAMP>--print-directory</SAMP>=E2=80=99 Option</H4><A=20
name=3Dindex-directories_002c-printing-them></A><A=20
name=3Dindex-printing-directories></A><A=20
name=3Dindex-recursion_002c-and-printing-directories></A>
<P>If you use several levels of recursive <CODE>make</CODE> invocations, =
the=20
=E2=80=98<SAMP>-w</SAMP>=E2=80=99 or =E2=80=98<SAMP><SPAN=20
class=3Dnolinebreak>--print-directory</SPAN></SAMP>=E2=80=99<!-- /@w --> =
option can make=20
the output a lot easier to understand by showing each directory as=20
<CODE>make</CODE> starts processing it and as <CODE>make</CODE> finishes =

processing it. For example, if =E2=80=98<SAMP>make -w</SAMP>=E2=80=99 is =
run in the directory=20
<SAMP>/u/gnu/make</SAMP>, <CODE>make</CODE> will print a line of the =
form: </P>
<DIV class=3Dexample><PRE class=3Dexample>make: Entering directory =
`/u/gnu/make'.
</PRE></DIV>
<P>before doing anything else, and a line of the form: </P>
<DIV class=3Dexample><PRE class=3Dexample>make: Leaving directory =
`/u/gnu/make'.
</PRE></DIV>
<P>when processing is completed. </P><A =
name=3Dindex-_002dC_002c-and-_002dw></A><A=20
name=3Dindex-_002d_002ddirectory_002c-and-_002d_002dprint_002ddirectory><=
/A><A=20
name=3Dindex-recursion_002c-and-_002dw></A><A=20
name=3Dindex-_002dw_002c-and-_002dC></A><A=20
name=3Dindex-_002dw_002c-and-recursion></A><A=20
name=3Dindex-_002d_002dprint_002ddirectory_002c-and-_002d_002ddirectory><=
/A><A=20
name=3Dindex-_002d_002dprint_002ddirectory_002c-and-recursion></A><A=20
name=3Dindex-_002d_002dno_002dprint_002ddirectory></A><A=20
name=3Dindex-_002d_002dprint_002ddirectory_002c-disabling></A><A=20
name=3Dindex-_002dw_002c-disabling></A>
<P>Normally, you do not need to specify this option because =
=E2=80=98<SAMP>make</SAMP>=E2=80=99=20
does it for you: =E2=80=98<SAMP>-w</SAMP>=E2=80=99 is turned on =
automatically when you use the=20
=E2=80=98<SAMP>-C</SAMP>=E2=80=99 option, and in sub-<CODE>make</CODE>s. =
<CODE>make</CODE> will=20
not automatically turn on =E2=80=98<SAMP>-w</SAMP>=E2=80=99 if you also =
use =E2=80=98<SAMP>-s</SAMP>=E2=80=99,=20
which says to be silent, or if you use =
=E2=80=98<SAMP>--no-print-directory</SAMP>=E2=80=99 to=20
explicitly disable it. </P>
<HR>
<A name=3DCanned-Recipes></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Empty-Recipes" =

rel=3Dnext>Empty Recipes</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Recursion"=20
rel=3Dprev>Recursion</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipes"=20
rel=3Dup>Recipes</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DDefining-Canned-Recipes></A>
<H3 class=3Dsection>5.8 Defining Canned Recipes</H3><A=20
name=3Dindex-canned-recipes></A><A =
name=3Dindex-recipes_002c-canned></A><A=20
name=3Dindex-sequences-of-commands></A><A=20
name=3Dindex-commands_002c-sequences-of></A>
<P>When the same sequence of commands is useful in making various =
targets, you=20
can define it as a canned sequence with the <CODE>define</CODE> =
directive, and=20
refer to the canned sequence from the recipes for those targets. The =
canned=20
sequence is actually a variable, so the name must not conflict with =
other=20
variable names. </P>
<P>Here is an example of defining a canned recipe: </P>
<DIV class=3Dexample><PRE class=3Dexample>define run-yacc =3D
yacc $(firstword $^)
mv y.tab.c $@
endef
</PRE></DIV><A name=3Dindex-yacc></A>
<P>Here <CODE>run-yacc</CODE> is the name of the variable being defined; =

<CODE>endef</CODE> marks the end of the definition; the lines in between =
are the=20
commands. The <CODE>define</CODE> directive does not expand variable =
references=20
and function calls in the canned sequence; the =
=E2=80=98<SAMP>$</SAMP>=E2=80=99 characters,=20
parentheses, variable names, and so on, all become part of the value of =
the=20
variable you are defining. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Multi_002dLine"=
>Defining=20
Multi-Line Variables</A>, for a complete explanation of =
<CODE>define</CODE>.=20
</P>
<P>The first command in this example runs Yacc on the first prerequisite =
of=20
whichever rule uses the canned sequence. The output file from Yacc is =
always=20
named <SAMP>y.tab.c</SAMP>. The second command moves the output to the =
rule=E2=80=99s=20
target file name. </P>
<P>To use the canned sequence, substitute the variable into the recipe =
of a=20
rule. You can substitute it like any other variable (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Reference">Basi=
cs of=20
Variable References</A>). Because variables defined by =
<CODE>define</CODE> are=20
recursively expanded variables, all the variable references you wrote =
inside the=20
<CODE>define</CODE> are expanded now. For example: </P>
<DIV class=3Dexample><PRE class=3Dexample>foo.c : foo.y
        $(run-yacc)
</PRE></DIV>
<P>=E2=80=98<SAMP>foo.y</SAMP>=E2=80=99 will be substituted for the =
variable =E2=80=98<SAMP>$^</SAMP>=E2=80=99=20
when it occurs in <CODE>run-yacc</CODE>=E2=80=99s value, and =
=E2=80=98<SAMP>foo.c</SAMP>=E2=80=99 for=20
=E2=80=98<SAMP>$@</SAMP>=E2=80=99. </P>
<P>This is a realistic example, but this particular one is not needed in =

practice because <CODE>make</CODE> has an implicit rule to figure out =
these=20
commands based on the file names involved (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rules"=
>Using=20
Implicit Rules</A>). </P><A name=3Dindex-_0040_002c-and-define></A><A=20
name=3Dindex-_002d_002c-and-define></A><A =
name=3Dindex-_002b_002c-and-define></A>
<P>In recipe execution, each line of a canned sequence is treated just =
as if the=20
line appeared on its own in the rule, preceded by a tab. In particular,=20
<CODE>make</CODE> invokes a separate sub-shell for each line. You can =
use the=20
special prefix characters that affect command lines =
(=E2=80=98<SAMP>@</SAMP>=E2=80=99,=20
=E2=80=98<SAMP>-</SAMP>=E2=80=99, and =E2=80=98<SAMP>+</SAMP>=E2=80=99) =
on each line of a canned sequence. See=20
<A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipes">Writin=
g=20
Recipes in Rules</A>. For example, using this canned sequence: </P>
<DIV class=3Dexample><PRE class=3Dexample>define frobnicate =3D
@echo "frobnicating target $@"
frob-step-1 $&lt; -o $@-step-1
frob-step-2 $@-step-1 -o $@
endef
</PRE></DIV>
<P><CODE>make</CODE> will not echo the first line, the <CODE>echo</CODE> =

command. But it <EM>will</EM> echo the following two recipe lines. </P>
<P>On the other hand, prefix characters on the recipe line that refers =
to a=20
canned sequence apply to every line in the sequence. So the rule: </P>
<DIV class=3Dexample><PRE class=3Dexample>frob.out: frob.in
        @$(frobnicate)
</PRE></DIV>
<P>does not echo <EM>any</EM> recipe lines. (See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Echoing">Recipe=
=20
Echoing</A>, for a full explanation of =
=E2=80=98<SAMP>@</SAMP>=E2=80=99.) </P>
<HR>
<A name=3DEmpty-Recipes></A>
<DIV class=3Dheader>
<P>Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Canned-Recipes"=
=20
rel=3Dprev>Canned Recipes</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipes"=20
rel=3Dup>Recipes</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DUsing-Empty-Recipes></A>
<H3 class=3Dsection>5.9 Using Empty Recipes</H3><A =
name=3Dindex-empty-recipes></A><A=20
name=3Dindex-recipes_002c-empty></A>
<P>It is sometimes useful to define recipes which do nothing. This is =
done=20
simply by giving a recipe that consists of nothing but whitespace. For =
example:=20
</P>
<DIV class=3Dexample><PRE class=3Dexample>target: ;
</PRE></DIV>
<P>defines an empty recipe for <SAMP>target</SAMP>. You could also use a =
line=20
beginning with a recipe prefix character to define an empty recipe, but =
this=20
would be confusing because such a line looks empty. </P><A=20
name=3Dindex-_002eDEFAULT_002c-and-empty-recipes></A>
<P>You may be wondering why you would want to define a recipe that does =
nothing.=20
The only reason this is useful is to prevent a target from getting =
implicit=20
recipes (from implicit rules or the <CODE>.DEFAULT</CODE> special =
target; see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rules"=
>Implicit=20
Rules</A> and see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Last-Resort">De=
fining=20
Last-Resort Default Rules</A>). </P>
<P>You may be inclined to define empty recipes for targets that are not =
actual=20
files, but only exist so that their prerequisites can be remade. =
However, this=20
is not the best way to do that, because the prerequisites may not be =
remade=20
properly if the target file actually does exist. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Phony-Targets">=
Phony=20
Targets</A>, for a better way to do this. </P>
<HR>
<A name=3DUsing-Variables></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditionals"=20
rel=3Dnext>Conditionals</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipes"=20
rel=3Dprev>Recipes</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Top" =
rel=3Dup>Top</A>=20
&nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DHow-to-Use-Variables></A>
<H2 class=3Dchapter>6 How to Use Variables</H2><A =
name=3Dindex-variable></A><A=20
name=3Dindex-value></A><A =
name=3Dindex-recursive-variable-expansion></A><A=20
name=3Dindex-simple-variable-expansion></A>
<P>A <EM>variable</EM> is a name defined in a makefile to represent a =
string of=20
text, called the variable=E2=80=99s <EM>value</EM>. These values are =
substituted by=20
explicit request into targets, prerequisites, recipes, and other parts =
of the=20
makefile. (In some other versions of <CODE>make</CODE>, variables are =
called=20
<EM>macros</EM>.) <A name=3Dindex-macro></A></P>
<P>Variables and functions in all parts of a makefile are expanded when =
read,=20
except for in recipes, the right-hand sides of variable definitions =
using=20
=E2=80=98<SAMP>=3D</SAMP>=E2=80=99, and the bodies of variable =
definitions using the=20
<CODE>define</CODE> directive. </P>
<P>Variables can represent lists of file names, options to pass to =
compilers,=20
programs to run, directories to look in for source files, directories to =
write=20
output in, or anything else you can imagine. </P>
<P>A variable name may be any sequence of characters not containing=20
=E2=80=98<SAMP>:</SAMP>=E2=80=99, =E2=80=98<SAMP>#</SAMP>=E2=80=99, =
=E2=80=98<SAMP>=3D</SAMP>=E2=80=99, or whitespace. However,=20
variable names containing characters other than letters, numbers, and=20
underscores should be considered carefully, as in some shells they =
cannot be=20
passed through the environment to a sub-<CODE>make</CODE> (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables_002fR=
ecursion">Communicating=20
Variables to a Sub-<CODE>make</CODE></A>). Variable names beginning with =

=E2=80=98<SAMP>.</SAMP>=E2=80=99 and an uppercase letter may be given =
special meaning in future=20
versions of <CODE>make</CODE>. </P>
<P>Variable names are case-sensitive. The names =
=E2=80=98<SAMP>foo</SAMP>=E2=80=99,=20
=E2=80=98<SAMP>FOO</SAMP>=E2=80=99, and =
=E2=80=98<SAMP>Foo</SAMP>=E2=80=99 all refer to different variables.=20
</P>
<P>It is traditional to use upper case letters in variable names, but we =

recommend using lower case letters for variable names that serve =
internal=20
purposes in the makefile, and reserving upper case for parameters that =
control=20
implicit rules or for parameters that the user should override with =
command=20
options (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Overriding">Ove=
rriding=20
Variables</A>). </P>
<P>A few variables have names that are a single punctuation character or =
just a=20
few characters. These are the <EM>automatic variables</EM>, and they =
have=20
particular specialized uses. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
Variables</A>. </P>
<TABLE class=3Dmenu border=3D0 cellSpacing=3D0>
  <TBODY>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D1=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Reference">Refe=
rence</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to use the value of a variable. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D2=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavors">Flavor=
s</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Variables come in two flavors. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D3=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Advanced">Advan=
ced</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Advanced features for referencing a =
variable.=20
  </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D4=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Values">Values<=
/A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>All the ways variables get their =
values. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D5=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Setting">Settin=
g</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to set a variable in the makefile. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D6=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Appending">Appe=
nding</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to append more text to the old =
value of a=20
      variable. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D7=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Override-Direct=
ive">Override=20
      Directive</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to set a variable in the makefile =
even if=20
      the user has set it with a command argument. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D8=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Multi_002dLine"=
>Multi-Line</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>An alternate way to set a variable to =
a=20
      multi-line string. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D9=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Undefine-Direct=
ive">Undefine=20
      Directive</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to undefine a variable so that it =
appears as=20
      if it was never set. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Environment">En=
vironment</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Variable values can come from the =
environment.=20
    </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Target_002dspec=
ific">Target-specific</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Variable values can be defined on a =
per-target=20
      basis. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern_002dspe=
cific">Pattern-specific</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Target-specific variable values can be =
applied=20
      to a group of targets that match a pattern. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Suppressing-Inh=
eritance">Suppressing=20
      Inheritance</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Suppress inheritance of variables. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Variabl=
es">Special=20
      Variables</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Variables with special meaning or =
behavior.=20
  </TD></TR></TBODY></TABLE>
<HR>
<A name=3DReference></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavors"=20
rel=3Dnext>Flavors</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Using-Variables=
"=20
rel=3Dprev>Using Variables</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Using-Variables=
"=20
rel=3Dup>Using Variables</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DBasics-of-Variable-References></A>
<H3 class=3Dsection>6.1 Basics of Variable References</H3><A=20
name=3Dindex-variables_002c-how-to-reference></A><A=20
name=3Dindex-reference-to-variables></A><A=20
name=3Dindex-_0024_002c-in-variable-reference></A><A=20
name=3Dindex-dollar-sign-_0028_0024_0029_002c-in-variable-reference></A>
<P>To substitute a variable=E2=80=99s value, write a dollar sign =
followed by the name of=20
the variable in parentheses or braces: either =
=E2=80=98<SAMP>$(foo)</SAMP>=E2=80=99 or=20
=E2=80=98<SAMP>${foo}</SAMP>=E2=80=99 is a valid reference to the =
variable <CODE>foo</CODE>.=20
This special significance of =E2=80=98<SAMP>$</SAMP>=E2=80=99 is why you =
must write=20
=E2=80=98<SAMP>$$</SAMP>=E2=80=99 to have the effect of a single dollar =
sign in a file name or=20
recipe. </P>
<P>Variable references can be used in any context: targets, =
prerequisites,=20
recipes, most directives, and new variable values. Here is an example of =
a=20
common case, where a variable holds the names of all the object files in =
a=20
program: </P>
<DIV class=3Dexample><PRE class=3Dexample>objects =3D program.o foo.o =
utils.o
program : $(objects)
        cc -o program $(objects)

$(objects) : defs.h
</PRE></DIV>
<P>Variable references work by strict textual substitution. Thus, the =
rule </P>
<DIV class=3Dexample><PRE class=3Dexample>foo =3D c
prog.o : prog.$(foo)
        $(foo)$(foo) -$(foo) prog.$(foo)
</PRE></DIV>
<P>could be used to compile a C program <SAMP>prog.c</SAMP>. Since =
spaces before=20
the variable value are ignored in variable assignments, the value of=20
<CODE>foo</CODE> is precisely =E2=80=98<SAMP>c</SAMP>=E2=80=99. =
(Don=E2=80=99t actually write your=20
makefiles this way!) </P>
<P>A dollar sign followed by a character other than a dollar sign,=20
open-parenthesis or open-brace treats that single character as the =
variable=20
name. Thus, you could reference the variable <CODE>x</CODE> with=20
=E2=80=98<SAMP>$x</SAMP>=E2=80=99. However, this practice is strongly =
discouraged, except in the=20
case of the automatic variables (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
Variables</A>). </P>
<HR>
<A name=3DFlavors></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Advanced"=20
rel=3Dnext>Advanced</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Reference"=20
rel=3Dprev>Reference</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Using-Variables=
"=20
rel=3Dup>Using Variables</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DThe-Two-Flavors-of-Variables></A>
<H3 class=3Dsection>6.2 The Two Flavors of Variables</H3><A=20
name=3Dindex-flavors-of-variables></A><A=20
name=3Dindex-recursive-variable-expansion-1></A><A=20
name=3Dindex-variables_002c-flavors></A><A=20
name=3Dindex-recursively-expanded-variables></A><A=20
name=3Dindex-variables_002c-recursively-expanded></A>
<P>There are two ways that a variable in GNU <CODE>make</CODE> can have =
a value;=20
we call them the two <EM>flavors</EM> of variables. The two flavors are=20
distinguished in how they are defined and in what they do when expanded. =
</P><A=20
name=3Dindex-_003d></A>
<P>The first flavor of variable is a <EM>recursively expanded</EM> =
variable.=20
Variables of this sort are defined by lines using =
=E2=80=98<SAMP>=3D</SAMP>=E2=80=99 (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Setting">Settin=
g=20
Variables</A>) or by the <CODE>define</CODE> directive (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Multi_002dLine"=
>Defining=20
Multi-Line Variables</A>). The value you specify is installed verbatim; =
if it=20
contains references to other variables, these references are expanded =
whenever=20
this variable is substituted (in the course of expanding some other =
string).=20
When this happens, it is called <EM>recursive expansion</EM>. </P>
<P>For example, </P>
<DIV class=3Dexample><PRE class=3Dexample>foo =3D $(bar)
bar =3D $(ugh)
ugh =3D Huh?

all:;echo $(foo)
</PRE></DIV>
<P>will echo =E2=80=98<SAMP>Huh?</SAMP>=E2=80=99: =
=E2=80=98<SAMP>$(foo)</SAMP>=E2=80=99 expands to=20
=E2=80=98<SAMP>$(bar)</SAMP>=E2=80=99 which expands to =
=E2=80=98<SAMP>$(ugh)</SAMP>=E2=80=99 which finally=20
expands to =E2=80=98<SAMP>Huh?</SAMP>=E2=80=99. </P>
<P>This flavor of variable is the only sort supported by most other =
versions of=20
<CODE>make</CODE>. It has its advantages and its disadvantages. An =
advantage=20
(most would say) is that: </P>
<DIV class=3Dexample><PRE class=3Dexample>CFLAGS =3D $(include_dirs) -O
include_dirs =3D -Ifoo -Ibar
</PRE></DIV>
<P>will do what was intended: when =E2=80=98<SAMP>CFLAGS</SAMP>=E2=80=99 =
is expanded in a=20
recipe, it will expand to =E2=80=98<SAMP>-Ifoo -Ibar -O</SAMP>=E2=80=99. =
A major disadvantage is=20
that you cannot append something on the end of a variable, as in </P>
<DIV class=3Dexample><PRE class=3Dexample>CFLAGS =3D $(CFLAGS) -O
</PRE></DIV>
<P>because it will cause an infinite loop in the variable expansion. =
(Actually=20
<CODE>make</CODE> detects the infinite loop and reports an error.) <A=20
name=3Dindex-loops-in-variable-expansion></A><A=20
name=3Dindex-variables_002c-loops-in-expansion></A></P>
<P>Another disadvantage is that any functions (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Functions">Func=
tions for=20
Transforming Text</A>) referenced in the definition will be executed =
every time=20
the variable is expanded. This makes <CODE>make</CODE> run slower; =
worse, it=20
causes the <CODE>wildcard</CODE> and <CODE>shell</CODE> functions to =
give=20
unpredictable results because you cannot easily control when they are =
called, or=20
even how many times. </P>
<P>To avoid all the problems and inconveniences of recursively expanded=20
variables, there is another flavor: simply expanded variables. </P><A=20
name=3Dindex-simply-expanded-variables></A><A=20
name=3Dindex-variables_002c-simply-expanded></A><A =
name=3Dindex-_003a_003d></A><A=20
name=3Dindex-_003a_003a_003d></A>
<P><EM>Simply expanded variables</EM> are defined by lines using=20
=E2=80=98<SAMP>:=3D</SAMP>=E2=80=99 or =
=E2=80=98<SAMP>::=3D</SAMP>=E2=80=99 (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Setting">Settin=
g=20
Variables</A>). Both forms are equivalent in GNU <CODE>make</CODE>; =
however only=20
the =E2=80=98<SAMP>::=3D</SAMP>=E2=80=99 form is described by the POSIX =
standard (support for=20
=E2=80=98<SAMP>::=3D</SAMP>=E2=80=99 was added to the POSIX standard in =
2012, so older versions of=20
<CODE>make</CODE> won=E2=80=99t accept this form either). </P>
<P>The value of a simply expanded variable is scanned once and for all,=20
expanding any references to other variables and functions, when the =
variable is=20
defined. The actual value of the simply expanded variable is the result =
of=20
expanding the text that you write. It does not contain any references to =
other=20
variables; it contains their values <EM>as of the time this variable was =

defined</EM>. Therefore, </P>
<DIV class=3Dexample><PRE class=3Dexample>x :=3D foo
y :=3D $(x) bar
x :=3D later
</PRE></DIV>
<P>is equivalent to </P>
<DIV class=3Dexample><PRE class=3Dexample>y :=3D foo bar
x :=3D later
</PRE></DIV>
<P>When a simply expanded variable is referenced, its value is =
substituted=20
verbatim. </P>
<P>Here is a somewhat more complicated example, illustrating the use of=20
=E2=80=98<SAMP>:=3D</SAMP>=E2=80=99 in conjunction with the =
<CODE>shell</CODE> function. (See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Shell-Function"=
>The=20
<CODE>shell</CODE> Function</A>.) This example also shows use of the =
variable=20
<CODE>MAKELEVEL</CODE>, which is changed when it is passed down from =
level to=20
level. (See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables_002fR=
ecursion">Communicating=20
Variables to a Sub-<CODE>make</CODE></A>, for information about=20
<CODE>MAKELEVEL</CODE>.) </P><A name=3Dindex-MAKELEVEL-1></A><A=20
name=3Dindex-MAKE-1></A>
<DIV class=3Dexample><PRE class=3Dexample>ifeq (0,${MAKELEVEL})
whoami    :=3D $(shell whoami)
host-type :=3D $(shell arch)
MAKE :=3D ${MAKE} host-type=3D${host-type} whoami=3D${whoami}
endif
</PRE></DIV>
<P>An advantage of this use of =E2=80=98<SAMP>:=3D</SAMP>=E2=80=99 is =
that a typical =E2=80=98descend into=20
a directory=E2=80=99 recipe then looks like this: </P>
<DIV class=3Dexample><PRE class=3Dexample>${subdirs}:
        ${MAKE} -C $@ all
</PRE></DIV>
<P>Simply expanded variables generally make complicated makefile =
programming=20
more predictable because they work like variables in most programming =
languages.=20
They allow you to redefine a variable using its own value (or its value=20
processed in some way by one of the expansion functions) and to use the=20
expansion functions much more efficiently (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Functions">Func=
tions for=20
Transforming Text</A>). </P><A =
name=3Dindex-spaces_002c-in-variable-values></A><A=20
name=3Dindex-whitespace_002c-in-variable-values></A><A=20
name=3Dindex-variables_002c-spaces-in-values></A>
<P>You can also use them to introduce controlled leading whitespace into =

variable values. Leading whitespace characters are discarded from your =
input=20
before substitution of variable references and function calls; this =
means you=20
can include leading spaces in a variable value by protecting them with =
variable=20
references, like this: </P>
<DIV class=3Dexample><PRE class=3Dexample>nullstring :=3D
space :=3D $(nullstring) # end of the line
</PRE></DIV>
<P>Here the value of the variable <CODE>space</CODE> is precisely one =
space. The=20
comment =
=E2=80=98<SAMP>#&nbsp;end&nbsp;of&nbsp;the&nbsp;line</SAMP>=E2=80=99<!-- =
/@w --> is=20
included here just for clarity. Since trailing space characters are =
<EM>not</EM>=20
stripped from variable values, just a space at the end of the line would =
have=20
the same effect (but be rather hard to read). If you put whitespace at =
the end=20
of a variable value, it is a good idea to put a comment like that at the =
end of=20
the line to make your intent clear. Conversely, if you do <EM>not</EM> =
want any=20
whitespace characters at the end of your variable value, you must =
remember not=20
to put a random comment on the end of the line after some whitespace, =
such as=20
this: </P>
<DIV class=3Dexample><PRE class=3Dexample>dir :=3D /foo/bar    # =
directory to put the frobs in
</PRE></DIV>
<P>Here the value of the variable <CODE>dir</CODE> is=20
=E2=80=98<SAMP>/foo/bar&nbsp;&nbsp;&nbsp;&nbsp;</SAMP>=E2=80=99<!-- /@w =
--> (with four trailing=20
spaces), which was probably not the intention. (Imagine something like=20
=E2=80=98<SAMP>$(dir)/file</SAMP>=E2=80=99<!-- /@w --> with this =
definition!) </P><A=20
name=3Dindex-conditional-variable-assignment></A><A=20
name=3Dindex-variables_002c-conditional-assignment></A><A=20
name=3Dindex-_003f_003d></A>
<P>There is another assignment operator for variables, =
=E2=80=98<SAMP>?=3D</SAMP>=E2=80=99. This=20
is called a conditional variable assignment operator, because it only =
has an=20
effect if the variable is not yet defined. This statement: </P>
<DIV class=3Dexample><PRE class=3Dexample>FOO ?=3D bar
</PRE></DIV>
<P>is exactly equivalent to this (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Origin-Function=
">The=20
<CODE>origin</CODE> Function</A>): </P>
<DIV class=3Dexample><PRE class=3Dexample>ifeq ($(origin FOO), =
undefined)
  FOO =3D bar
endif
</PRE></DIV>
<P>Note that a variable set to an empty value is still defined, so=20
=E2=80=98<SAMP>?=3D</SAMP>=E2=80=99 will not set that variable. </P>
<HR>
<A name=3DAdvanced></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Values"=20
rel=3Dnext>Values</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavors"=20
rel=3Dprev>Flavors</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Using-Variables=
"=20
rel=3Dup>Using Variables</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A=20
name=3DAdvanced-Features-for-Reference-to-Variables></A>
<H3 class=3Dsection>6.3 Advanced Features for Reference to =
Variables</H3><A=20
name=3Dindex-reference-to-variables-1></A>
<P>This section describes some advanced features you can use to =
reference=20
variables in more flexible ways. </P>
<TABLE class=3Dmenu border=3D0 cellSpacing=3D0>
  <TBODY>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D1=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Substitution-Re=
fs">Substitution=20
      Refs</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Referencing a variable with =
substitutions on the=20
      value. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D2=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Computed-Names"=
>Computed=20
      Names</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Computing the name of the variable to =
refer to.=20
    </TD></TR></TBODY></TABLE>
<HR>
<A name=3DSubstitution-Refs></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Computed-Names"=
=20
rel=3Dnext>Computed Names</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Advanced"=20
rel=3Dprev>Advanced</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Advanced"=20
rel=3Dup>Advanced</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DSubstitution-References></A>
<H4 class=3Dsubsection>6.3.1 Substitution References</H4><A=20
name=3Dindex-modified-variable-reference></A><A=20
name=3Dindex-substitution-variable-reference></A><A=20
name=3Dindex-variables_002c-modified-reference></A><A=20
name=3Dindex-variables_002c-substitution-reference></A><A=20
name=3Dindex-variables_002c-substituting-suffix-in></A><A=20
name=3Dindex-suffix_002c-substituting-in-variables></A>
<P>A <EM>substitution reference</EM> substitutes the value of a variable =
with=20
alterations that you specify. It has the form=20
=E2=80=98<SAMP>$(<VAR>var</VAR>:<VAR>a</VAR>=3D<VAR>b</VAR>)</SAMP>=E2=80=
=99 (or=20
=E2=80=98<SAMP>${<VAR>var</VAR>:<VAR>a</VAR>=3D<VAR>b</VAR>}</SAMP>=E2=80=
=99) and its meaning is=20
to take the value of the variable <VAR>var</VAR>, replace every =
<VAR>a</VAR> at=20
the end of a word with <VAR>b</VAR> in that value, and substitute the =
resulting=20
string. </P>
<P>When we say =E2=80=9Cat the end of a word=E2=80=9D, we mean that =
<VAR>a</VAR> must appear=20
either followed by whitespace or at the end of the value in order to be=20
replaced; other occurrences of <VAR>a</VAR> in the value are unaltered. =
For=20
example: </P>
<DIV class=3Dexample><PRE class=3Dexample>foo :=3D a.o b.o c.o
bar :=3D $(foo:.o=3D.c)
</PRE></DIV>
<P>sets =E2=80=98<SAMP>bar</SAMP>=E2=80=99 to =E2=80=98<SAMP>a.c b.c =
c.c</SAMP>=E2=80=99. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Setting">Settin=
g=20
Variables</A>. </P>
<P>A substitution reference is actually an abbreviation for use of the=20
<CODE>patsubst</CODE> expansion function (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Functions=20
for String Substitution and Analysis</A>). We provide substitution =
references as=20
well as <CODE>patsubst</CODE> for compatibility with other =
implementations of=20
<CODE>make</CODE>. </P><A name=3Dindex-patsubst></A>
<P>Another type of substitution reference lets you use the full power of =
the=20
<CODE>patsubst</CODE> function. It has the same form=20
=E2=80=98<SAMP>$(<VAR>var</VAR>:<VAR>a</VAR>=3D<VAR>b</VAR>)</SAMP>=E2=80=
=99 described above,=20
except that now <VAR>a</VAR> must contain a single =
=E2=80=98<SAMP>%</SAMP>=E2=80=99 character.=20
This case is equivalent to =E2=80=98<SAMP>$(patsubst=20
<VAR>a</VAR>,<VAR>b</VAR>,$(<VAR>var</VAR>))</SAMP>=E2=80=99. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Functions=20
for String Substitution and Analysis</A>, for a description of the=20
<CODE>patsubst</CODE> function. </P>
<DIV class=3Dexample><PRE class=3Dexample>For example:
</PRE><PRE class=3Dexample>foo :=3D a.o b.o c.o
bar :=3D $(foo:%.o=3D%.c)
</PRE></DIV>
<P>sets =E2=80=98<SAMP>bar</SAMP>=E2=80=99 to =E2=80=98<SAMP>a.c b.c =
c.c</SAMP>=E2=80=99. </P>
<HR>
<A name=3DComputed-Names></A>
<DIV class=3Dheader>
<P>Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Substitution-Re=
fs"=20
rel=3Dprev>Substitution Refs</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Advanced"=20
rel=3Dup>Advanced</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DComputed-Variable-Names></A>
<H4 class=3Dsubsection>6.3.2 Computed Variable Names</H4><A=20
name=3Dindex-nested-variable-reference></A><A=20
name=3Dindex-computed-variable-name></A><A=20
name=3Dindex-variables_002c-computed-names></A><A=20
name=3Dindex-variables_002c-nested-references></A><A=20
name=3Dindex-variables_002c-_0024-in-name></A><A=20
name=3Dindex-_0024_002c-in-variable-name></A><A=20
name=3Dindex-dollar-sign-_0028_0024_0029_002c-in-variable-name></A>
<P>Computed variable names are a complicated concept needed only for=20
sophisticated makefile programming. For most purposes you need not =
consider=20
them, except to know that making a variable with a dollar sign in its =
name might=20
have strange results. However, if you are the type that wants to =
understand=20
everything, or you are actually interested in what they do, read on. =
</P>
<P>Variables may be referenced inside the name of a variable. This is =
called a=20
<EM>computed variable name</EM> or a <EM>nested variable reference</EM>. =
For=20
example, </P>
<DIV class=3Dexample><PRE class=3Dexample>x =3D y
y =3D z
a :=3D $($(x))
</PRE></DIV>
<P>defines <CODE>a</CODE> as =E2=80=98<SAMP>z</SAMP>=E2=80=99: the =
=E2=80=98<SAMP>$(x)</SAMP>=E2=80=99 inside=20
=E2=80=98<SAMP>$($(x))</SAMP>=E2=80=99 expands to =
=E2=80=98<SAMP>y</SAMP>=E2=80=99, so =
=E2=80=98<SAMP>$($(x))</SAMP>=E2=80=99=20
expands to =E2=80=98<SAMP>$(y)</SAMP>=E2=80=99 which in turn expands to =
=E2=80=98<SAMP>z</SAMP>=E2=80=99. Here=20
the name of the variable to reference is not stated explicitly; it is =
computed=20
by expansion of =E2=80=98<SAMP>$(x)</SAMP>=E2=80=99. The reference =
=E2=80=98<SAMP>$(x)</SAMP>=E2=80=99 here is=20
nested within the outer variable reference. </P>
<P>The previous example shows two levels of nesting, but any number of =
levels is=20
possible. For example, here are three levels: </P>
<DIV class=3Dexample><PRE class=3Dexample>x =3D y
y =3D z
z =3D u
a :=3D $($($(x)))
</PRE></DIV>
<P>Here the innermost =E2=80=98<SAMP>$(x)</SAMP>=E2=80=99 expands to =
=E2=80=98<SAMP>y</SAMP>=E2=80=99, so=20
=E2=80=98<SAMP>$($(x))</SAMP>=E2=80=99 expands to =
=E2=80=98<SAMP>$(y)</SAMP>=E2=80=99 which in turn expands to=20
=E2=80=98<SAMP>z</SAMP>=E2=80=99; now we have =
=E2=80=98<SAMP>$(z)</SAMP>=E2=80=99, which becomes=20
=E2=80=98<SAMP>u</SAMP>=E2=80=99. </P>
<P>References to recursively-expanded variables within a variable name =
are=20
re-expanded in the usual fashion. For example: </P>
<DIV class=3Dexample><PRE class=3Dexample>x =3D $(y)
y =3D z
z =3D Hello
a :=3D $($(x))
</PRE></DIV>
<P>defines <CODE>a</CODE> as =E2=80=98<SAMP>Hello</SAMP>=E2=80=99: =
=E2=80=98<SAMP>$($(x))</SAMP>=E2=80=99=20
becomes =E2=80=98<SAMP>$($(y))</SAMP>=E2=80=99 which becomes =
=E2=80=98<SAMP>$(z)</SAMP>=E2=80=99 which becomes=20
=E2=80=98<SAMP>Hello</SAMP>=E2=80=99. </P>
<P>Nested variable references can also contain modified references and =
function=20
invocations (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Functions">Func=
tions for=20
Transforming Text</A>), just like any other reference. For example, =
using the=20
<CODE>subst</CODE> function (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Functions=20
for String Substitution and Analysis</A>): </P>
<DIV class=3Dexample><PRE class=3Dexample>x =3D variable1
variable2 :=3D Hello
y =3D $(subst 1,2,$(x))
z =3D y
a :=3D $($($(z)))
</PRE></DIV>
<P>eventually defines <CODE>a</CODE> as =
=E2=80=98<SAMP>Hello</SAMP>=E2=80=99. It is doubtful=20
that anyone would ever want to write a nested reference as convoluted as =
this=20
one, but it works: =E2=80=98<SAMP>$($($(z)))</SAMP>=E2=80=99 expands to =
=E2=80=98<SAMP>$($(y))</SAMP>=E2=80=99=20
which becomes =E2=80=98<SAMP>$($(subst 1,2,$(x)))</SAMP>=E2=80=99. This =
gets the value=20
=E2=80=98<SAMP>variable1</SAMP>=E2=80=99 from <CODE>x</CODE> and changes =
it by substitution to=20
=E2=80=98<SAMP>variable2</SAMP>=E2=80=99, so that the entire string =
becomes=20
=E2=80=98<SAMP>$(variable2)</SAMP>=E2=80=99, a simple variable reference =
whose value is=20
=E2=80=98<SAMP>Hello</SAMP>=E2=80=99. </P>
<P>A computed variable name need not consist entirely of a single =
variable=20
reference. It can contain several variable references, as well as some =
invariant=20
text. For example, </P>
<DIV class=3Dexample><PRE class=3Dexample>a_dirs :=3D dira dirb
1_dirs :=3D dir1 dir2
</PRE><PRE class=3Dexample></PRE><PRE class=3Dexample>a_files :=3D filea =
fileb
1_files :=3D file1 file2
</PRE><PRE class=3Dexample></PRE><PRE class=3Dexample>ifeq "$(use_a)" =
"yes"
a1 :=3D a
else
a1 :=3D 1
endif
</PRE><PRE class=3Dexample></PRE><PRE class=3Dexample>ifeq "$(use_dirs)" =
"yes"
df :=3D dirs
else
df :=3D files
endif

dirs :=3D $($(a1)_$(df))
</PRE></DIV>
<P>will give <CODE>dirs</CODE> the same value as <CODE>a_dirs</CODE>,=20
<CODE>1_dirs</CODE>, <CODE>a_files</CODE> or <CODE>1_files</CODE> =
depending on=20
the settings of <CODE>use_a</CODE> and <CODE>use_dirs</CODE>. </P>
<P>Computed variable names can also be used in substitution references: =
</P>
<DIV class=3Dexample><PRE class=3Dexample>a_objects :=3D a.o b.o c.o
1_objects :=3D 1.o 2.o 3.o

sources :=3D $($(a1)_objects:.o=3D.c)
</PRE></DIV>
<P>defines <CODE>sources</CODE> as either =E2=80=98<SAMP>a.c b.c =
c.c</SAMP>=E2=80=99 or=20
=E2=80=98<SAMP>1.c 2.c 3.c</SAMP>=E2=80=99, depending on the value of =
<CODE>a1</CODE>. </P>
<P>The only restriction on this sort of use of nested variable =
references is=20
that they cannot specify part of the name of a function to be called. =
This is=20
because the test for a recognized function name is done before the =
expansion of=20
nested references. For example, </P>
<DIV class=3Dexample><PRE class=3Dexample>ifdef do_sort
func :=3D sort
else
func :=3D strip
endif
</PRE><PRE class=3Dexample></PRE><PRE class=3Dexample>bar :=3D a d b g q =
c
</PRE><PRE class=3Dexample></PRE><PRE class=3Dexample>foo :=3D $($(func) =
$(bar))
</PRE></DIV>
<P>attempts to give =E2=80=98<SAMP>foo</SAMP>=E2=80=99 the value of the =
variable =E2=80=98<SAMP>sort a d=20
b g q c</SAMP>=E2=80=99 or =E2=80=98<SAMP>strip a d b g q =
c</SAMP>=E2=80=99, rather than giving =E2=80=98<SAMP>a=20
d b g q c</SAMP>=E2=80=99 as the argument to either the =
<CODE>sort</CODE> or the=20
<CODE>strip</CODE> function. This restriction could be removed in the =
future if=20
that change is shown to be a good idea. </P>
<P>You can also use computed variable names in the left-hand side of a =
variable=20
assignment, or in a <CODE>define</CODE> directive, as in: </P>
<DIV class=3Dexample><PRE class=3Dexample>dir =3D foo
$(dir)_sources :=3D $(wildcard $(dir)/*.c)
define $(dir)_print =3D
lpr $($(dir)_sources)
endef
</PRE></DIV>
<P>This example defines the variables =
=E2=80=98<SAMP>dir</SAMP>=E2=80=99,=20
=E2=80=98<SAMP>foo_sources</SAMP>=E2=80=99, and =
=E2=80=98<SAMP>foo_print</SAMP>=E2=80=99. </P>
<P>Note that <EM>nested variable references</EM> are quite different =
from=20
<EM>recursively expanded variables</EM> (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavors">The =
Two Flavors=20
of Variables</A>), though both are used together in complex ways when =
doing=20
makefile programming. </P>
<HR>
<A name=3DValues></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Setting"=20
rel=3Dnext>Setting</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Advanced"=20
rel=3Dprev>Advanced</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Using-Variables=
"=20
rel=3Dup>Using Variables</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DHow-Variables-Get-Their-Values></A>
<H3 class=3Dsection>6.4 How Variables Get Their Values</H3><A=20
name=3Dindex-variables_002c-how-they-get-their-values></A><A=20
name=3Dindex-value_002c-how-a-variable-gets-it></A>
<P>Variables can get values in several different ways: </P>
<UL>
  <LI>You can specify an overriding value when you run =
<CODE>make</CODE>. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Overriding">Ove=
rriding=20
  Variables</A>. </LI>
  <LI>You can specify a value in the makefile, either with an assignment =
(see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Setting">Settin=
g=20
  Variables</A>) or with a verbatim definition (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Multi_002dLine"=
>Defining=20
  Multi-Line Variables</A>). </LI>
  <LI>Variables in the environment become <CODE>make</CODE> variables. =
See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Environment">Va=
riables=20
  from the Environment</A>. </LI>
  <LI>Several <EM>automatic</EM> variables are given new values for each =
rule.=20
  Each of these has a single conventional use. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
  Variables</A>. </LI>
  <LI>Several variables have constant initial values. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Variables=20
  Used by Implicit Rules</A>. </LI></UL>
<HR>
<A name=3DSetting></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Appending"=20
rel=3Dnext>Appending</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Values"=20
rel=3Dprev>Values</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Using-Variables=
"=20
rel=3Dup>Using Variables</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DSetting-Variables></A>
<H3 class=3Dsection>6.5 Setting Variables</H3><A=20
name=3Dindex-setting-variables></A><A =
name=3Dindex-variables_002c-setting></A><A=20
name=3Dindex-_003d-1></A><A name=3Dindex-_003a_003d-1></A><A=20
name=3Dindex-_003a_003a_003d-1></A><A name=3Dindex-_003f_003d-1></A><A=20
name=3Dindex-_0021_003d></A>
<P>To set a variable from the makefile, write a line starting with the =
variable=20
name followed by =E2=80=98<SAMP>=3D</SAMP>=E2=80=99 =
=E2=80=98<SAMP>:=3D</SAMP>=E2=80=99, or =
=E2=80=98<SAMP>::=3D</SAMP>=E2=80=99.=20
Whatever follows the =E2=80=98<SAMP>=3D</SAMP>=E2=80=99, =
=E2=80=98<SAMP>:=3D</SAMP>=E2=80=99, or =
=E2=80=98<SAMP>::=3D</SAMP>=E2=80=99=20
on the line becomes the value. For example, </P>
<DIV class=3Dexample><PRE class=3Dexample>objects =3D main.o foo.o bar.o =
utils.o
</PRE></DIV>
<P>defines a variable named <CODE>objects</CODE>. Whitespace around the =
variable=20
name and immediately after the =E2=80=98<SAMP>=3D</SAMP>=E2=80=99 is =
ignored. </P>
<P>Variables defined with =E2=80=98<SAMP>=3D</SAMP>=E2=80=99 are =
<EM>recursively expanded</EM>=20
variables. Variables defined with =E2=80=98<SAMP>:=3D</SAMP>=E2=80=99 or =
=E2=80=98<SAMP>::=3D</SAMP>=E2=80=99 are=20
<EM>simply expanded</EM> variables; these definitions can contain =
variable=20
references which will be expanded before the definition is made. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavors">The =
Two Flavors=20
of Variables</A>. </P>
<P>The variable name may contain function and variable references, which =
are=20
expanded when the line is read to find the actual variable name to use. =
</P>
<P>There is no limit on the length of the value of a variable except the =
amount=20
of memory on the computer. You can split the value of a variable into =
multiple=20
physical lines for readability (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Splitting-Lines=
">Splitting=20
Long Lines</A>). </P>
<P>Most variable names are considered to have the empty string as a =
value if you=20
have never set them. Several variables have built-in initial values that =
are not=20
empty, but you can set them in the usual ways (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Variables=20
Used by Implicit Rules</A>). Several special variables are set =
automatically to=20
a new value for each rule; these are called the <EM>automatic</EM> =
variables=20
(see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
Variables</A>). </P>
<P>If you=E2=80=99d like a variable to be set to a value only if =
it=E2=80=99s not already set,=20
then you can use the shorthand operator =
=E2=80=98<SAMP>?=3D</SAMP>=E2=80=99 instead of=20
=E2=80=98<SAMP>=3D</SAMP>=E2=80=99. These two settings of the variable =
=E2=80=98<SAMP>FOO</SAMP>=E2=80=99 are=20
identical (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Origin-Function=
">The=20
<CODE>origin</CODE> Function</A>): </P>
<DIV class=3Dexample><PRE class=3Dexample>FOO ?=3D bar
</PRE></DIV>
<P>and </P>
<DIV class=3Dexample><PRE class=3Dexample>ifeq ($(origin FOO), =
undefined)
FOO =3D bar
endif
</PRE></DIV>
<P>The shell assignment operator =E2=80=98<SAMP>!=3D</SAMP>=E2=80=99 can =
be used to execute a=20
program and set a variable to its output. This operator first evaluates =
the=20
right-hand side, then passes that result to the shell for execution. If =
the=20
result of the execution ends in a newline, that one newline is removed; =
all=20
other newlines are replaced by spaces. The resulting string is then =
placed into=20
the named recursively-expanded variable. For example: </P>
<DIV class=3Dexample><PRE class=3Dexample>hash !=3D printf '\043'
file_list !=3D find . -name '*.c'
</PRE></DIV>
<P>If the result of the execution could produce a <CODE>$</CODE>, and =
you don=E2=80=99t=20
intend what follows that to be interpreted as a make variable or =
function=20
reference, then you must replace every <CODE>$</CODE> with =
<CODE>$$</CODE> as=20
part of the execution. Alternatively, you can set a simply expanded =
variable to=20
the result of running a program using the <CODE>shell</CODE> function =
call. See=20
<A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Shell-Function"=
>The=20
<CODE>shell</CODE> Function</A>. For example: </P>
<DIV class=3Dexample><PRE class=3Dexample>hash :=3D $(shell printf =
'\043')
var :=3D $(shell find . -name "*.c")
</PRE></DIV>
<HR>
<A name=3DAppending></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Override-Direct=
ive"=20
rel=3Dnext>Override Directive</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Setting"=20
rel=3Dprev>Setting</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Using-Variables=
"=20
rel=3Dup>Using Variables</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DAppending-More-Text-to-Variables></A>
<H3 class=3Dsection>6.6 Appending More Text to Variables</H3><A=20
name=3Dindex-_002b_003d></A><A =
name=3Dindex-appending-to-variables></A><A=20
name=3Dindex-variables_002c-appending-to></A>
<P>Often it is useful to add more text to the value of a variable =
already=20
defined. You do this with a line containing =
=E2=80=98<SAMP>+=3D</SAMP>=E2=80=99, like this: </P>
<DIV class=3Dexample><PRE class=3Dexample>objects +=3D another.o
</PRE></DIV>
<P>This takes the value of the variable <CODE>objects</CODE>, and adds =
the text=20
=E2=80=98<SAMP>another.o</SAMP>=E2=80=99 to it (preceded by a single =
space). Thus: </P>
<DIV class=3Dexample><PRE class=3Dexample>objects =3D main.o foo.o bar.o =
utils.o
objects +=3D another.o
</PRE></DIV>
<P>sets <CODE>objects</CODE> to =E2=80=98<SAMP>main.o foo.o bar.o =
utils.o=20
another.o</SAMP>=E2=80=99. </P>
<P>Using =E2=80=98<SAMP>+=3D</SAMP>=E2=80=99 is similar to: </P>
<DIV class=3Dexample><PRE class=3Dexample>objects =3D main.o foo.o bar.o =
utils.o
objects :=3D $(objects) another.o
</PRE></DIV>
<P>but differs in ways that become important when you use more complex =
values.=20
</P>
<P>When the variable in question has not been defined before, =
=E2=80=98<SAMP>+=3D</SAMP>=E2=80=99=20
acts just like normal =E2=80=98<SAMP>=3D</SAMP>=E2=80=99: it defines a =
recursively-expanded=20
variable. However, when there <EM>is</EM> a previous definition, exactly =
what=20
=E2=80=98<SAMP>+=3D</SAMP>=E2=80=99 does depends on what flavor of =
variable you defined=20
originally. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavors">The =
Two Flavors=20
of Variables</A>, for an explanation of the two flavors of variables. =
</P>
<P>When you add to a variable=E2=80=99s value with =
=E2=80=98<SAMP>+=3D</SAMP>=E2=80=99, <CODE>make</CODE>=20
acts essentially as if you had included the extra text in the initial =
definition=20
of the variable. If you defined it first with =
=E2=80=98<SAMP>:=3D</SAMP>=E2=80=99 or=20
=E2=80=98<SAMP>::=3D</SAMP>=E2=80=99, making it a simply-expanded =
variable, =E2=80=98<SAMP>+=3D</SAMP>=E2=80=99 adds=20
to that simply-expanded definition, and expands the new text before =
appending it=20
to the old value just as =E2=80=98<SAMP>:=3D</SAMP>=E2=80=99 does (see =
<A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Setting">Settin=
g=20
Variables</A>, for a full explanation of =
=E2=80=98<SAMP>:=3D</SAMP>=E2=80=99 or=20
=E2=80=98<SAMP>::=3D</SAMP>=E2=80=99). In fact, </P>
<DIV class=3Dexample><PRE class=3Dexample>variable :=3D value
variable +=3D more
</PRE></DIV>
<P>is exactly equivalent to: </P>
<DIV class=3Dexample><PRE class=3Dexample>variable :=3D value
variable :=3D $(variable) more
</PRE></DIV>
<P>On the other hand, when you use =E2=80=98<SAMP>+=3D</SAMP>=E2=80=99 =
with a variable that you=20
defined first to be recursively-expanded using plain =
=E2=80=98<SAMP>=3D</SAMP>=E2=80=99,=20
<CODE>make</CODE> does something a bit different. Recall that when you =
define a=20
recursively-expanded variable, <CODE>make</CODE> does not expand the =
value you=20
set for variable and function references immediately. Instead it stores =
the text=20
verbatim, and saves these variable and function references to be =
expanded later,=20
when you refer to the new variable (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavors">The =
Two Flavors=20
of Variables</A>). When you use =E2=80=98<SAMP>+=3D</SAMP>=E2=80=99 on a =
recursively-expanded=20
variable, it is this unexpanded text to which <CODE>make</CODE> appends =
the new=20
text you specify. </P>
<DIV class=3Dexample><PRE class=3Dexample>variable =3D value
variable +=3D more
</PRE></DIV>
<P>is roughly equivalent to: </P>
<DIV class=3Dexample><PRE class=3Dexample>temp =3D value
variable =3D $(temp) more
</PRE></DIV>
<P>except that of course it never defines a variable called =
<CODE>temp</CODE>.=20
The importance of this comes when the variable=E2=80=99s old value =
contains variable=20
references. Take this common example: </P>
<DIV class=3Dexample><PRE class=3Dexample>CFLAGS =3D $(includes) -O
=E2=80=A6
CFLAGS +=3D -pg # enable profiling
</PRE></DIV>
<P>The first line defines the <CODE>CFLAGS</CODE> variable with a =
reference to=20
another variable, <CODE>includes</CODE>. (<CODE>CFLAGS</CODE> is used by =
the=20
rules for C compilation; see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
of Built-In Rules</A>.) Using =E2=80=98<SAMP>=3D</SAMP>=E2=80=99 for the =
definition makes=20
<CODE>CFLAGS</CODE> a recursively-expanded variable, meaning=20
=E2=80=98<SAMP>$(includes)&nbsp;<SPAN =
class=3Dnolinebreak>-O</SPAN></SAMP>=E2=80=99<!-- /@w --> is=20
<EM>not</EM> expanded when <CODE>make</CODE> processes the definition of =

<CODE>CFLAGS</CODE>. Thus, <CODE>includes</CODE> need not be defined yet =
for its=20
value to take effect. It only has to be defined before any reference to=20
<CODE>CFLAGS</CODE>. If we tried to append to the value of =
<CODE>CFLAGS</CODE>=20
without using =E2=80=98<SAMP>+=3D</SAMP>=E2=80=99, we might do it like =
this: </P>
<DIV class=3Dexample><PRE class=3Dexample>CFLAGS :=3D $(CFLAGS) -pg # =
enable profiling
</PRE></DIV>
<P>This is pretty close, but not quite what we want. Using =
=E2=80=98<SAMP>:=3D</SAMP>=E2=80=99=20
redefines <CODE>CFLAGS</CODE> as a simply-expanded variable; this means=20
<CODE>make</CODE> expands the text =E2=80=98<SAMP>$(CFLAGS)&nbsp;<SPAN=20
class=3Dnolinebreak>-pg</SPAN></SAMP>=E2=80=99<!-- /@w --> before =
setting the variable. If=20
<CODE>includes</CODE> is not yet defined, we get =
=E2=80=98<SAMP>&nbsp;<SPAN=20
class=3Dnolinebreak>-O</SPAN>&nbsp;<SPAN =
class=3Dnolinebreak>-pg</SPAN></SAMP>=E2=80=99<!-- /@w -->, and a later =
definition of=20
<CODE>includes</CODE> will have no effect. Conversely, by using=20
=E2=80=98<SAMP>+=3D</SAMP>=E2=80=99 we set <CODE>CFLAGS</CODE> to the =
<EM>unexpanded</EM> value=20
=E2=80=98<SAMP>$(includes)&nbsp;<SPAN =
class=3Dnolinebreak>-O</SPAN>&nbsp;<SPAN=20
class=3Dnolinebreak>-pg</SPAN></SAMP>=E2=80=99<!-- /@w -->. Thus we =
preserve the reference=20
to <CODE>includes</CODE>, so if that variable gets defined at any later =
point, a=20
reference like =E2=80=98<SAMP>$(CFLAGS)</SAMP>=E2=80=99 still uses its =
value. </P>
<HR>
<A name=3DOverride-Directive></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Multi_002dLine"=
=20
rel=3Dnext>Multi-Line</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Appending"=20
rel=3Dprev>Appending</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Using-Variables=
"=20
rel=3Dup>Using Variables</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DThe-override-Directive></A>
<H3 class=3Dsection>6.7 The <CODE>override</CODE> Directive</H3><A=20
name=3Dindex-override></A><A =
name=3Dindex-overriding-with-override></A><A=20
name=3Dindex-variables_002c-overriding></A>
<P>If a variable has been set with a command argument (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Overriding">Ove=
rriding=20
Variables</A>), then ordinary assignments in the makefile are ignored. =
If you=20
want to set the variable in the makefile even though it was set with a =
command=20
argument, you can use an <CODE>override</CODE> directive, which is a =
line that=20
looks like this: </P>
<DIV class=3Dexample><PRE class=3Dexample>override <VAR>variable</VAR> =
=3D <VAR>value</VAR>
</PRE></DIV>
<P>or </P>
<DIV class=3Dexample><PRE class=3Dexample>override <VAR>variable</VAR> =
:=3D <VAR>value</VAR>
</PRE></DIV>
<P>To append more text to a variable defined on the command line, use: =
</P>
<DIV class=3Dexample><PRE class=3Dexample>override <VAR>variable</VAR> =
+=3D <VAR>more text</VAR>
</PRE></DIV>
<P>See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Appending">Appe=
nding=20
More Text to Variables</A>. </P>
<P>Variable assignments marked with the <CODE>override</CODE> flag have =
a higher=20
priority than all other assignments, except another =
<CODE>override</CODE>.=20
Subsequent assignments or appends to this variable which are not marked=20
<CODE>override</CODE> will be ignored. </P>
<P>The <CODE>override</CODE> directive was not invented for escalation =
in the=20
war between makefiles and command arguments. It was invented so you can =
alter=20
and add to values that the user specifies with command arguments. </P>
<P>For example, suppose you always want the =
=E2=80=98<SAMP>-g</SAMP>=E2=80=99 switch when you=20
run the C compiler, but you would like to allow the user to specify the =
other=20
switches with a command argument just as usual. You could use this=20
<CODE>override</CODE> directive: </P>
<DIV class=3Dexample><PRE class=3Dexample>override CFLAGS +=3D -g
</PRE></DIV>
<P>You can also use <CODE>override</CODE> directives with =
<CODE>define</CODE>=20
directives. This is done as you might expect: </P>
<DIV class=3Dexample><PRE class=3Dexample>override define foo =3D
bar
endef
</PRE></DIV>
<P>See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Multi_002dLine"=
>Defining=20
Multi-Line Variables</A>. </P>
<HR>
<A name=3DMulti_002dLine></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Undefine-Direct=
ive"=20
rel=3Dnext>Undefine Directive</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Override-Direct=
ive"=20
rel=3Dprev>Override Directive</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Using-Variables=
"=20
rel=3Dup>Using Variables</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DDefining-Multi_002dLine-Variables></A>
<H3 class=3Dsection>6.8 Defining Multi-Line Variables</H3><A=20
name=3Dindex-define></A><A name=3Dindex-endef></A><A=20
name=3Dindex-multi_002dline-variable-definition></A><A=20
name=3Dindex-variables_002c-multi_002dline></A><A=20
name=3Dindex-verbatim-variable-definition></A><A=20
name=3Dindex-defining-variables-verbatim></A><A=20
name=3Dindex-variables_002c-defining-verbatim></A>
<P>Another way to set the value of a variable is to use the =
<CODE>define</CODE>=20
directive. This directive has an unusual syntax which allows newline =
characters=20
to be included in the value, which is convenient for defining both =
canned=20
sequences of commands (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Canned-Recipes"=
>Defining=20
Canned Recipes</A>), and also sections of makefile syntax to use with=20
<CODE>eval</CODE> (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Eval-Function">=
Eval=20
Function</A>). </P>
<P>The <CODE>define</CODE> directive is followed on the same line by the =
name of=20
the variable being defined and an (optional) assignment operator, and =
nothing=20
more. The value to give the variable appears on the following lines. The =
end of=20
the value is marked by a line containing just the word =
<CODE>endef</CODE>. Aside=20
from this difference in syntax, <CODE>define</CODE> works just like any =
other=20
variable definition. The variable name may contain function and variable =

references, which are expanded when the directive is read to find the =
actual=20
variable name to use. </P>
<P>You may omit the variable assignment operator if you prefer. If =
omitted,=20
<CODE>make</CODE> assumes it to be =E2=80=98<SAMP>=3D</SAMP>=E2=80=99 =
and creates a=20
recursively-expanded variable (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavors">The =
Two Flavors=20
of Variables</A>). When using a =E2=80=98<SAMP>+=3D</SAMP>=E2=80=99 =
operator, the value is=20
appended to the previous value as with any other append operation: with =
a single=20
space separating the old and new values. </P>
<P>You may nest <CODE>define</CODE> directives: <CODE>make</CODE> will =
keep=20
track of nested directives and report an error if they are not all =
properly=20
closed with <CODE>endef</CODE>. Note that lines beginning with the =
recipe prefix=20
character are considered part of a recipe, so any <CODE>define</CODE> or =

<CODE>endef</CODE> strings appearing on such a line will not be =
considered=20
<CODE>make</CODE> directives. </P>
<DIV class=3Dexample><PRE class=3Dexample>define two-lines =3D
echo foo
echo $(bar)
endef
</PRE></DIV>
<P>The value in an ordinary assignment cannot contain a newline; but the =

newlines that separate the lines of the value in a <CODE>define</CODE> =
become=20
part of the variable=E2=80=99s value (except for the final newline which =
precedes the=20
<CODE>endef</CODE> and is not considered part of the value). </P>
<P>When used in a recipe, the previous example is functionally =
equivalent to=20
this: </P>
<DIV class=3Dexample><PRE class=3Dexample>two-lines =3D echo foo; echo =
$(bar)
</PRE></DIV>
<P>since two commands separated by semicolon behave much like two =
separate shell=20
commands. However, note that using two separate lines means =
<CODE>make</CODE>=20
will invoke the shell twice, running an independent sub-shell for each =
line. See=20
<A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Execution">Reci=
pe=20
Execution</A>. </P>
<P>If you want variable definitions made with <CODE>define</CODE> to =
take=20
precedence over command-line variable definitions, you can use the=20
<CODE>override</CODE> directive together with <CODE>define</CODE>: </P>
<DIV class=3Dexample><PRE class=3Dexample>override define two-lines =3D
foo
$(bar)
endef
</PRE></DIV>
<P>See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Override-Direct=
ive">The=20
<CODE>override</CODE> Directive</A>. </P>
<HR>
<A name=3DUndefine-Directive></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Environment"=20
rel=3Dnext>Environment</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Multi_002dLine"=
=20
rel=3Dprev>Multi-Line</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Using-Variables=
"=20
rel=3Dup>Using Variables</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DUndefining-Variables></A>
<H3 class=3Dsection>6.9 Undefining Variables</H3><A =
name=3Dindex-undefine></A><A=20
name=3Dindex-undefining-variable></A>
<P>If you want to clear a variable, setting its value to empty is =
usually=20
sufficient. Expanding such a variable will yield the same result (empty =
string)=20
regardless of whether it was set or not. However, if you are using the=20
<CODE>flavor</CODE> (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavor-Function=
">Flavor=20
Function</A>) and <CODE>origin</CODE> (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Origin-Function=
">Origin=20
Function</A>) functions, there is a difference between a variable that =
was never=20
set and a variable with an empty value. In such situations you may want =
to use=20
the <CODE>undefine</CODE> directive to make a variable appear as if it =
was never=20
set. For example: </P>
<DIV class=3Dexample><PRE class=3Dexample>foo :=3D foo
bar =3D bar

undefine foo
undefine bar

$(info $(origin foo))
$(info $(flavor bar))
</PRE></DIV>
<P>This example will print =E2=80=9Cundefined=E2=80=9D for both =
variables. </P>
<P>If you want to undefine a command-line variable definition, you can =
use the=20
<CODE>override</CODE> directive together with <CODE>undefine</CODE>, =
similar to=20
how this is done for variable definitions: </P>
<DIV class=3Dexample><PRE class=3Dexample>override undefine CFLAGS
</PRE></DIV>
<HR>
<A name=3DEnvironment></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Target_002dspec=
ific"=20
rel=3Dnext>Target-specific</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Undefine-Direct=
ive"=20
rel=3Dprev>Undefine Directive</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Using-Variables=
"=20
rel=3Dup>Using Variables</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DVariables-from-the-Environment></A>
<H3 class=3Dsection>6.10 Variables from the Environment</H3><A=20
name=3Dindex-variables_002c-environment-1></A><A =
name=3Dindex-environment></A>
<P>Variables in <CODE>make</CODE> can come from the environment in which =

<CODE>make</CODE> is run. Every environment variable that =
<CODE>make</CODE> sees=20
when it starts up is transformed into a <CODE>make</CODE> variable with =
the same=20
name and value. However, an explicit assignment in the makefile, or with =
a=20
command argument, overrides the environment. (If the =
=E2=80=98<SAMP>-e</SAMP>=E2=80=99 flag is=20
specified, then values from the environment override assignments in the=20
makefile. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Summary=20
of Options</A>. But this is not recommended practice.) </P>
<P>Thus, by setting the variable <CODE>CFLAGS</CODE> in your =
environment, you=20
can cause all C compilations in most makefiles to use the compiler =
switches you=20
prefer. This is safe for variables with standard or conventional =
meanings=20
because you know that no makefile will use them for other things. (Note =
this is=20
not totally reliable; some makefiles set <CODE>CFLAGS</CODE> explicitly =
and=20
therefore are not affected by the value in the environment.) </P>
<P>When <CODE>make</CODE> runs a recipe, variables defined in the =
makefile are=20
placed into the environment of each shell. This allows you to pass =
values to=20
sub-<CODE>make</CODE> invocations (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Recursion">Recu=
rsive Use=20
of <CODE>make</CODE></A>). By default, only variables that came from the =

environment or the command line are passed to recursive invocations. You =
can use=20
the <CODE>export</CODE> directive to pass other variables. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables_002fR=
ecursion">Communicating=20
Variables to a Sub-<CODE>make</CODE></A>, for full details. </P>
<P>Other use of variables from the environment is not recommended. It is =
not=20
wise for makefiles to depend for their functioning on environment =
variables set=20
up outside their control, since this would cause different users to get=20
different results from the same makefile. This is against the whole =
purpose of=20
most makefiles. </P><A =
name=3Dindex-SHELL_002c-import-from-environment></A>
<P>Such problems would be especially likely with the variable=20
<CODE>SHELL</CODE>, which is normally present in the environment to =
specify the=20
user=E2=80=99s choice of interactive shell. It would be very undesirable =
for this choice=20
to affect <CODE>make</CODE>; so, <CODE>make</CODE> handles the=20
<CODE>SHELL</CODE> environment variable in a special way; see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Choosing-the-Sh=
ell">Choosing=20
the Shell</A>. </P>
<HR>
<A name=3DTarget_002dspecific></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern_002dspe=
cific"=20
rel=3Dnext>Pattern-specific</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Environment"=20
rel=3Dprev>Environment</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Using-Variables=
"=20
rel=3Dup>Using Variables</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DTarget_002dspecific-Variable-Values></A>
<H3 class=3Dsection>6.11 Target-specific Variable Values</H3><A=20
name=3Dindex-target_002dspecific-variables></A><A=20
name=3Dindex-variables_002c-target_002dspecific></A>
<P>Variable values in <CODE>make</CODE> are usually global; that is, =
they are=20
the same regardless of where they are evaluated (unless they=E2=80=99re =
reset, of=20
course). One exception to that is automatic variables (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
Variables</A>). </P>
<P>The other exception is <EM>target-specific variable values</EM>. This =
feature=20
allows you to define different values for the same variable, based on =
the target=20
that <CODE>make</CODE> is currently building. As with automatic =
variables, these=20
values are only available within the context of a target=E2=80=99s =
recipe (and in other=20
target-specific assignments). </P>
<P>Set a target-specific variable value like this: </P>
<DIV class=3Dexample><PRE class=3Dexample><VAR>target</VAR> =E2=80=A6 : =
<VAR>variable-assignment</VAR>
</PRE></DIV>
<P>Target-specific variable assignments can be prefixed with any or all =
of the=20
special keywords <CODE>export</CODE>, <CODE>override</CODE>, or=20
<CODE>private</CODE>; these apply their normal behavior to this instance =
of the=20
variable only. </P>
<P>Multiple <VAR>target</VAR> values create a target-specific variable =
value for=20
each member of the target list individually. </P>
<P>The <VAR>variable-assignment</VAR> can be any valid form of =
assignment;=20
recursive (=E2=80=98<SAMP>=3D</SAMP>=E2=80=99), simple =
(=E2=80=98<SAMP>:=3D</SAMP>=E2=80=99 or =
=E2=80=98<SAMP>::=3D</SAMP>=E2=80=99),=20
appending (=E2=80=98<SAMP>+=3D</SAMP>=E2=80=99), or conditional =
(=E2=80=98<SAMP>?=3D</SAMP>=E2=80=99). All variables=20
that appear within the <VAR>variable-assignment</VAR> are evaluated =
within the=20
context of the target: thus, any previously-defined target-specific =
variable=20
values will be in effect. Note that this variable is actually distinct =
from any=20
=E2=80=9Cglobal=E2=80=9D value: the two variables do not have to have =
the same flavor (recursive=20
vs. simple). </P>
<P>Target-specific variables have the same priority as any other =
makefile=20
variable. Variables provided on the command line (and in the environment =
if the=20
=E2=80=98<SAMP>-e</SAMP>=E2=80=99 option is in force) will take =
precedence. Specifying the=20
<CODE>override</CODE> directive will allow the target-specific variable =
value to=20
be preferred. </P>
<P>There is one more special feature of target-specific variables: when =
you=20
define a target-specific variable that variable value is also in effect =
for all=20
prerequisites of this target, and all their prerequisites, etc. (unless =
those=20
prerequisites override that variable with their own target-specific =
variable=20
value). So, for example, a statement like this: </P>
<DIV class=3Dexample><PRE class=3Dexample>prog : CFLAGS =3D -g
prog : prog.o foo.o bar.o
</PRE></DIV>
<P>will set <CODE>CFLAGS</CODE> to =E2=80=98<SAMP>-g</SAMP>=E2=80=99 in =
the recipe for=20
<SAMP>prog</SAMP>, but it will also set <CODE>CFLAGS</CODE> to =
=E2=80=98<SAMP>-g</SAMP>=E2=80=99=20
in the recipes that create <SAMP>prog.o</SAMP>, <SAMP>foo.o</SAMP>, and=20
<SAMP>bar.o</SAMP>, and any recipes which create their prerequisites. =
</P>
<P>Be aware that a given prerequisite will only be built once per =
invocation of=20
make, at most. If the same file is a prerequisite of multiple targets, =
and each=20
of those targets has a different value for the same target-specific =
variable,=20
then the first target to be built will cause that prerequisite to be =
built and=20
the prerequisite will inherit the target-specific value from the first =
target.=20
It will ignore the target-specific values from any other targets. </P>
<HR>
<A name=3DPattern_002dspecific></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Suppressing-Inh=
eritance"=20
rel=3Dnext>Suppressing Inheritance</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Target_002dspec=
ific"=20
rel=3Dprev>Target-specific</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Using-Variables=
"=20
rel=3Dup>Using Variables</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DPattern_002dspecific-Variable-Values></A>
<H3 class=3Dsection>6.12 Pattern-specific Variable Values</H3><A=20
name=3Dindex-pattern_002dspecific-variables></A><A=20
name=3Dindex-variables_002c-pattern_002dspecific></A>
<P>In addition to target-specific variable values (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Target_002dspec=
ific">Target-specific=20
Variable Values</A>), GNU <CODE>make</CODE> supports pattern-specific =
variable=20
values. In this form, the variable is defined for any target that =
matches the=20
pattern specified. </P>
<P>Set a pattern-specific variable value like this: </P>
<DIV class=3Dexample><PRE class=3Dexample><VAR>pattern</VAR> =E2=80=A6 : =
<VAR>variable-assignment</VAR>
</PRE></DIV>
<P>where <VAR>pattern</VAR> is a %-pattern. As with target-specific =
variable=20
values, multiple <VAR>pattern</VAR> values create a pattern-specific =
variable=20
value for each pattern individually. The <VAR>variable-assignment</VAR> =
can be=20
any valid form of assignment. Any command line variable setting will =
take=20
precedence, unless <CODE>override</CODE> is specified. </P>
<P>For example: </P>
<DIV class=3Dexample><PRE class=3Dexample>%.o : CFLAGS =3D -O
</PRE></DIV>
<P>will assign <CODE>CFLAGS</CODE> the value of =
=E2=80=98<SAMP>-O</SAMP>=E2=80=99 for all=20
targets matching the pattern <CODE>%.o</CODE>. </P>
<P>If a target matches more than one pattern, the matching =
pattern-specific=20
variables with longer stems are interpreted first. This results in more =
specific=20
variables taking precedence over the more generic ones, for example: =
</P>
<DIV class=3Dexample><PRE class=3Dexample>%.o: %.c
        $(CC) -c $(CFLAGS) $(CPPFLAGS) $&lt; -o $@

lib/%.o: CFLAGS :=3D -fPIC -g
%.o: CFLAGS :=3D -g

all: foo.o lib/bar.o
</PRE></DIV>
<P>In this example the first definition of the <CODE>CFLAGS</CODE> =
variable will=20
be used to update <SAMP>lib/bar.o</SAMP> even though the second one also =
applies=20
to this target. Pattern-specific variables which result in the same stem =
length=20
are considered in the order in which they were defined in the makefile. =
</P>
<P>Pattern-specific variables are searched after any target-specific =
variables=20
defined explicitly for that target, and before target-specific variables =
defined=20
for the parent target. </P>
<HR>
<A name=3DSuppressing-Inheritance></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Variabl=
es"=20
rel=3Dnext>Special Variables</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern_002dspe=
cific"=20
rel=3Dprev>Pattern-specific</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Using-Variables=
"=20
rel=3Dup>Using Variables</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DSuppressing-Inheritance-1></A>
<H3 class=3Dsection>6.13 Suppressing Inheritance</H3><A =
name=3Dindex-private></A><A=20
name=3Dindex-suppressing-inheritance></A><A=20
name=3Dindex-inheritance_002c-suppressing></A>
<P>As described in previous sections, <CODE>make</CODE> variables are =
inherited=20
by prerequisites. This capability allows you to modify the behavior of a =

prerequisite based on which targets caused it to be rebuilt. For =
example, you=20
might set a target-specific variable on a <CODE>debug</CODE> target, =
then=20
running =E2=80=98<SAMP>make debug</SAMP>=E2=80=99 will cause that =
variable to be inherited by=20
all prerequisites of <CODE>debug</CODE>, while just running =
=E2=80=98<SAMP>make=20
all</SAMP>=E2=80=99 (for example) would not have that assignment. </P>
<P>Sometimes, however, you may not want a variable to be inherited. For =
these=20
situations, <CODE>make</CODE> provides the <CODE>private</CODE> =
modifier.=20
Although this modifier can be used with any variable assignment, it =
makes the=20
most sense with target- and pattern-specific variables. Any variable =
marked=20
<CODE>private</CODE> will be visible to its local target but will not be =

inherited by prerequisites of that target. A global variable marked=20
<CODE>private</CODE> will be visible in the global scope but will not be =

inherited by any target, and hence will not be visible in any recipe. =
</P>
<P>As an example, consider this makefile: </P>
<DIV class=3Dexample><PRE class=3Dexample>EXTRA_CFLAGS =3D

prog: private EXTRA_CFLAGS =3D -L/usr/local/lib
prog: a.o b.o
</PRE></DIV>
<P>Due to the <CODE>private</CODE> modifier, <CODE>a.o</CODE> and=20
<CODE>b.o</CODE> will not inherit the <CODE>EXTRA_CFLAGS</CODE> variable =

assignment from the <CODE>prog</CODE> target. </P>
<HR>
<A name=3DSpecial-Variables></A>
<DIV class=3Dheader>
<P>Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Suppressing-Inh=
eritance"=20
rel=3Dprev>Suppressing Inheritance</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Using-Variables=
"=20
rel=3Dup>Using Variables</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DOther-Special-Variables></A>
<H3 class=3Dsection>6.14 Other Special Variables</H3><A=20
name=3Dindex-makefiles_002c-and-special-variables></A><A=20
name=3Dindex-special-variables></A>
<P>GNU <CODE>make</CODE> supports some variables that have special =
properties.=20
</P>
<DL compact>
  <DD><A =
name=3Dindex-MAKEFILE_005fLIST-_0028list-of-parsed-makefiles_0029></A><A =

  name=3Dindex-makefiles_002c-and-MAKEFILE_005fLIST-variable></A><A=20
  name=3Dindex-including-_0028MAKEFILE_005fLIST-variable_0029></A></DD>
  <DT><CODE>MAKEFILE_LIST</CODE></DT>
  <DD>
  <P>Contains the name of each makefile that is parsed by =
<CODE>make</CODE>, in=20
  the order in which it was parsed. The name is appended just before=20
  <CODE>make</CODE> begins to parse the makefile. Thus, if the first =
thing a=20
  makefile does is examine the last word in this variable, it will be =
the name=20
  of the current makefile. Once the current makefile has used=20
  <CODE>include</CODE>, however, the last word will be the just-included =

  makefile. </P>
  <P>If a makefile named <CODE>Makefile</CODE> has this content: </P>
  <DIV class=3Dexample><PRE class=3Dexample>name1 :=3D $(lastword =
$(MAKEFILE_LIST))

include inc.mk

name2 :=3D $(lastword $(MAKEFILE_LIST))

all:
        @echo name1 =3D $(name1)
        @echo name2 =3D $(name2)
</PRE></DIV>
  <P>then you would expect to see this output: </P>
  <DIV class=3Dexample><PRE class=3Dexample>name1 =3D Makefile
name2 =3D inc.mk
</PRE></DIV><A=20
  =
name=3Dindex-_002eDEFAULT_005fGOAL-_0028define-default-goal_0029></A></DD=
>
  <DT><CODE>.DEFAULT_GOAL</CODE></DT>
  <DD>
  <P>Sets the default goal to be used if no targets were specified on =
the=20
  command line (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Goals">Argument=
s to=20
  Specify the Goals</A>). The <CODE>.DEFAULT_GOAL</CODE> variable allows =
you to=20
  discover the current default goal, restart the default goal selection=20
  algorithm by clearing its value, or to explicitly set the default =
goal. The=20
  following example illustrates these cases: </P>
  <DIV class=3Dexample><PRE class=3Dexample># Query the default goal.
ifeq ($(.DEFAULT_GOAL),)
  $(warning no default goal is set)
endif

.PHONY: foo
foo: ; @echo $@

$(warning default goal is $(.DEFAULT_GOAL))

# Reset the default goal.
.DEFAULT_GOAL :=3D

.PHONY: bar
bar: ; @echo $@

$(warning default goal is $(.DEFAULT_GOAL))

# Set our own.
.DEFAULT_GOAL :=3D foo
</PRE></DIV>
  <P>This makefile prints: </P>
  <DIV class=3Dexample><PRE class=3Dexample>no default goal is set
default goal is foo
default goal is bar
foo
</PRE></DIV>
  <P>Note that assigning more than one target name to =
<CODE>.DEFAULT_GOAL</CODE>=20
  is invalid and will result in an error. </P><A=20
  =
name=3Dindex-MAKE_005fRESTARTS-_0028number-of-times-make-has-restarted_00=
29></A></DD>
  <DT><CODE>MAKE_RESTARTS</CODE></DT>
  <DD>
  <P>This variable is set only if this instance of <CODE>make</CODE> has =

  restarted (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Remaking-Makefi=
les">How=20
  Makefiles Are Remade</A>): it will contain the number of times this =
instance=20
  has restarted. Note this is not the same as recursion (counted by the=20
  <CODE>MAKELEVEL</CODE> variable). You should not set, modify, or =
export this=20
  variable. </P><A=20
  =
name=3Dindex-MAKE_005fTERMOUT-_0028whether-stdout-is-a-terminal_0029></A>=
<A=20
  =
name=3Dindex-MAKE_005fTERMERR-_0028whether-stderr-is-a-terminal_0029></A>=
</DD>
  <DT><CODE>MAKE_TERMOUT</CODE></DT>
  <DT><CODE>MAKE_TERMERR</CODE></DT>
  <DD>
  <P>When <CODE>make</CODE> starts it will check whether stdout and =
stderr will=20
  show their output on a terminal. If so, it will set =
<CODE>MAKE_TERMOUT</CODE>=20
  and <CODE>MAKE_TERMERR</CODE>, respectively, to the name of the =
terminal=20
  device (or <CODE>true</CODE> if this cannot be determined). If set =
these=20
  variables will be marked for export. These variables will not be =
changed by=20
  <CODE>make</CODE> and they will not be modified if already set. </P>
  <P>These values can be used (particularly in combination with output=20
  synchronization (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel-Output=
">Output=20
  During Parallel Execution</A>) to determine whether <CODE>make</CODE> =
itself=20
  is writing to a terminal; they can be tested to decide whether to =
force recipe=20
  commands to generate colorized output for example. </P>
  <P>If you invoke a sub-<CODE>make</CODE> and redirect its stdout or =
stderr it=20
  is your responsibility to reset or unexport these variables as well, =
if your=20
  makefiles rely on them. </P><A=20
  =
name=3Dindex-_002eRECIPEPREFIX-_0028change-the-recipe-prefix-character_00=
29></A></DD>
  <DT><CODE>.RECIPEPREFIX</CODE></DT>
  <DD>
  <P>The first character of the value of this variable is used as the =
character=20
  make assumes is introducing a recipe line. If the variable is empty =
(as it is=20
  by default) that character is the standard tab character. For example, =
this is=20
  a valid makefile: </P>
  <DIV class=3Dexample><PRE class=3Dexample>.RECIPEPREFIX =3D &gt;
all:
&gt; @echo Hello, world
</PRE></DIV>
  <P>The value of <CODE>.RECIPEPREFIX</CODE> can be changed multiple =
times; once=20
  set it stays in effect for all rules parsed until it is modified. =
</P><A=20
  name=3Dindex-_002eVARIABLES-_0028list-of-variables_0029></A></DD>
  <DT><CODE>.VARIABLES</CODE></DT>
  <DD>
  <P>Expands to a list of the <EM>names</EM> of all global variables =
defined so=20
  far. This includes variables which have empty values, as well as =
built-in=20
  variables (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Variables=20
  Used by Implicit Rules</A>), but does not include any variables which =
are only=20
  defined in a target-specific context. Note that any value you assign =
to this=20
  variable will be ignored; it will always return its special value. =
</P><A=20
  =
name=3Dindex-_002eFEATURES-_0028list-of-supported-features_0029></A></DD>=

  <DT><CODE>.FEATURES</CODE></DT>
  <DD>
  <P>Expands to a list of special features supported by this version of=20
  <CODE>make</CODE>. Possible values include, but are not limited to: =
</P>
  <DL compact>
    <DT>=E2=80=98<SAMP>archives</SAMP>=E2=80=99</DT>
    <DD>
    <P>Supports <CODE>ar</CODE> (archive) files using special file name =
syntax.=20
    See <A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archives">Using=
=20
    <CODE>make</CODE> to Update Archive Files</A>. </P></DD>
    <DT>=E2=80=98<SAMP>check-symlink</SAMP>=E2=80=99</DT>
    <DD>
    <P>Supports the <CODE>-L</CODE> (<CODE>--check-symlink-times</CODE>) =
flag.=20
    See <A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Summary=20
    of Options</A>. </P></DD>
    <DT>=E2=80=98<SAMP>else-if</SAMP>=E2=80=99</DT>
    <DD>
    <P>Supports =E2=80=9Celse if=E2=80=9D non-nested conditionals. See =
<A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditional-Syn=
tax">Syntax=20
    of Conditionals</A>. </P></DD>
    <DT>=E2=80=98<SAMP>jobserver</SAMP>=E2=80=99</DT>
    <DD>
    <P>Supports =E2=80=9Cjob server=E2=80=9D enhanced parallel builds. =
See <A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel">Paral=
lel=20
    Execution</A>. </P></DD>
    <DT>=E2=80=98<SAMP>oneshell</SAMP>=E2=80=99</DT>
    <DD>
    <P>Supports the <CODE>.ONESHELL</CODE> special target. See <A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#One-Shell">Usin=
g One=20
    Shell</A>. </P></DD>
    <DT>=E2=80=98<SAMP>order-only</SAMP>=E2=80=99</DT>
    <DD>
    <P>Supports order-only prerequisites. See <A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Prerequisite-Ty=
pes">Types=20
    of Prerequisites</A>. </P></DD>
    <DT>=E2=80=98<SAMP>second-expansion</SAMP>=E2=80=99</DT>
    <DD>
    <P>Supports secondary expansion of prerequisite lists. </P></DD>
    <DT>=E2=80=98<SAMP>shortest-stem</SAMP>=E2=80=99</DT>
    <DD>
    <P>Uses the =E2=80=9Cshortest stem=E2=80=9D method of choosing which =
pattern, of multiple=20
    applicable options, will be used. See <A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Match">=
How=20
    Patterns Match</A>. </P></DD>
    <DT>=E2=80=98<SAMP>target-specific</SAMP>=E2=80=99</DT>
    <DD>
    <P>Supports target-specific and pattern-specific variable =
assignments. See=20
    <A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Target_002dspec=
ific">Target-specific=20
    Variable Values</A>. </P></DD>
    <DT>=E2=80=98<SAMP>undefine</SAMP>=E2=80=99</DT>
    <DD>
    <P>Supports the <CODE>undefine</CODE> directive. See <A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Undefine-Direct=
ive">Undefine=20
    Directive</A>. </P></DD>
    <DT>=E2=80=98<SAMP>guile</SAMP>=E2=80=99</DT>
    <DD>
    <P>Has GNU Guile available as an embedded extension language. See <A =

    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Integrati=
on">GNU=20
    Guile Integration</A>. </P></DD>
    <DT>=E2=80=98<SAMP>load</SAMP>=E2=80=99</DT>
    <DD>
    <P>Supports dynamically loadable objects for creating custom =
extensions. See=20
    <A=20
    =
href=3D"http://www.gnu.org/software/make/manual/make.html#Loading-Objects=
">Loading=20
    Dynamic Objects</A>. </P></DD></DL><A=20
  =
name=3Dindex-_002eINCLUDE_005fDIRS-_0028list-of-include-directories_0029>=
</A></DD>
  <DT><CODE>.INCLUDE_DIRS</CODE></DT>
  <DD>
  <P>Expands to a list of directories that <CODE>make</CODE> searches =
for=20
  included makefiles (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Include">Includ=
ing=20
  Other Makefiles</A>). </P></DD></DL>
<HR>
<A name=3DConditionals></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Functions"=20
rel=3Dnext>Functions</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Using-Variables=
"=20
rel=3Dprev>Using Variables</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Top" =
rel=3Dup>Top</A>=20
&nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DConditional-Parts-of-Makefiles></A>
<H2 class=3Dchapter>7 Conditional Parts of Makefiles</H2><A=20
name=3Dindex-conditionals></A>
<P>A <EM>conditional</EM> directive causes part of a makefile to be =
obeyed or=20
ignored depending on the values of variables. Conditionals can compare =
the value=20
of one variable to another, or the value of a variable to a constant =
string.=20
Conditionals control what <CODE>make</CODE> actually =
=E2=80=9Csees=E2=80=9D in the makefile, so=20
they <EM>cannot</EM> be used to control recipes at the time of =
execution. </P>
<TABLE class=3Dmenu border=3D0 cellSpacing=3D0>
  <TBODY>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D1=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditional-Exa=
mple">Conditional=20
      Example</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Example of a conditional </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D2=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditional-Syn=
tax">Conditional=20
      Syntax</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>The syntax of conditionals. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D3=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Testing-Flags">=
Testing=20
      Flags</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Conditionals that test flags.=20
</TD></TR></TBODY></TABLE>
<HR>
<A name=3DConditional-Example></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditional-Syn=
tax"=20
rel=3Dnext>Conditional Syntax</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditionals"=20
rel=3Dprev>Conditionals</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditionals"=20
rel=3Dup>Conditionals</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DExample-of-a-Conditional></A>
<H3 class=3Dsection>7.1 Example of a Conditional</H3>
<P>The following example of a conditional tells <CODE>make</CODE> to use =
one set=20
of libraries if the <CODE>CC</CODE> variable is =
=E2=80=98<SAMP>gcc</SAMP>=E2=80=99, and a=20
different set of libraries otherwise. It works by controlling which of =
two=20
recipe lines will be used for the rule. The result is that =
=E2=80=98<SAMP>CC=3Dgcc</SAMP>=E2=80=99=20
as an argument to <CODE>make</CODE> changes not only which compiler is =
used but=20
also which libraries are linked. </P>
<DIV class=3Dexample><PRE class=3Dexample>libs_for_gcc =3D -lgnu
normal_libs =3D

foo: $(objects)
ifeq ($(CC),gcc)
        $(CC) -o foo $(objects) $(libs_for_gcc)
else
        $(CC) -o foo $(objects) $(normal_libs)
endif
</PRE></DIV>
<P>This conditional uses three directives: one <CODE>ifeq</CODE>, one=20
<CODE>else</CODE> and one <CODE>endif</CODE>. </P>
<P>The <CODE>ifeq</CODE> directive begins the conditional, and specifies =
the=20
condition. It contains two arguments, separated by a comma and =
surrounded by=20
parentheses. Variable substitution is performed on both arguments and =
then they=20
are compared. The lines of the makefile following the <CODE>ifeq</CODE> =
are=20
obeyed if the two arguments match; otherwise they are ignored. </P>
<P>The <CODE>else</CODE> directive causes the following lines to be =
obeyed if=20
the previous conditional failed. In the example above, this means that =
the=20
second alternative linking command is used whenever the first =
alternative is not=20
used. It is optional to have an <CODE>else</CODE> in a conditional. </P>
<P>The <CODE>endif</CODE> directive ends the conditional. Every =
conditional must=20
end with an <CODE>endif</CODE>. Unconditional makefile text follows. =
</P>
<P>As this example illustrates, conditionals work at the textual level: =
the=20
lines of the conditional are treated as part of the makefile, or =
ignored,=20
according to the condition. This is why the larger syntactic units of =
the=20
makefile, such as rules, may cross the beginning or the end of the =
conditional.=20
</P>
<P>When the variable <CODE>CC</CODE> has the value =
=E2=80=98<SAMP>gcc</SAMP>=E2=80=99, the above=20
example has this effect: </P>
<DIV class=3Dexample><PRE class=3Dexample>foo: $(objects)
        $(CC) -o foo $(objects) $(libs_for_gcc)
</PRE></DIV>
<P>When the variable <CODE>CC</CODE> has any other value, the effect is =
this:=20
</P>
<DIV class=3Dexample><PRE class=3Dexample>foo: $(objects)
        $(CC) -o foo $(objects) $(normal_libs)
</PRE></DIV>
<P>Equivalent results can be obtained in another way by conditionalizing =
a=20
variable assignment and then using the variable unconditionally: </P>
<DIV class=3Dexample><PRE class=3Dexample>libs_for_gcc =3D -lgnu
normal_libs =3D

ifeq ($(CC),gcc)
  libs=3D$(libs_for_gcc)
else
  libs=3D$(normal_libs)
endif

foo: $(objects)
        $(CC) -o foo $(objects) $(libs)
</PRE></DIV>
<HR>
<A name=3DConditional-Syntax></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Testing-Flags" =

rel=3Dnext>Testing Flags</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditional-Exa=
mple"=20
rel=3Dprev>Conditional Example</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditionals"=20
rel=3Dup>Conditionals</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DSyntax-of-Conditionals></A>
<H3 class=3Dsection>7.2 Syntax of Conditionals</H3><A =
name=3Dindex-ifdef></A><A=20
name=3Dindex-ifeq></A><A name=3Dindex-ifndef></A><A =
name=3Dindex-ifneq></A><A=20
name=3Dindex-else></A><A name=3Dindex-endif></A>
<P>The syntax of a simple conditional with no <CODE>else</CODE> is as =
follows:=20
</P>
<DIV class=3Dexample><PRE =
class=3Dexample><VAR>conditional-directive</VAR>
<VAR>text-if-true</VAR>
endif
</PRE></DIV>
<P>The <VAR>text-if-true</VAR> may be any lines of text, to be =
considered as=20
part of the makefile if the condition is true. If the condition is =
false, no=20
text is used instead. </P>
<P>The syntax of a complex conditional is as follows: </P>
<DIV class=3Dexample><PRE =
class=3Dexample><VAR>conditional-directive</VAR>
<VAR>text-if-true</VAR>
else
<VAR>text-if-false</VAR>
endif
</PRE></DIV>
<P>or: </P>
<DIV class=3Dexample><PRE =
class=3Dexample><VAR>conditional-directive-one</VAR>
<VAR>text-if-one-is-true</VAR>
else <VAR>conditional-directive-two</VAR>
<VAR>text-if-two-is-true</VAR>
else
<VAR>text-if-one-and-two-are-false</VAR>
endif
</PRE></DIV>
<P>There can be as many =E2=80=9C<CODE>else</CODE> =
<VAR>conditional-directive</VAR>=E2=80=9D=20
clauses as necessary. Once a given condition is true, =
<VAR>text-if-true</VAR> is=20
used and no other clause is used; if no condition is true then=20
<VAR>text-if-false</VAR> is used. The <VAR>text-if-true</VAR> and=20
<VAR>text-if-false</VAR> can be any number of lines of text. </P>
<P>The syntax of the <VAR>conditional-directive</VAR> is the same =
whether the=20
conditional is simple or complex; after an <CODE>else</CODE> or not. =
There are=20
four different directives that test different conditions. Here is a =
table of=20
them: </P>
<DL compact>
  <DT><CODE>ifeq (<VAR>arg1</VAR>, <VAR>arg2</VAR>)</CODE></DT>
  <DT><CODE>ifeq '<VAR>arg1</VAR>' '<VAR>arg2</VAR>'</CODE></DT>
  <DT><CODE>ifeq "<VAR>arg1</VAR>" "<VAR>arg2</VAR>"</CODE></DT>
  <DT><CODE>ifeq "<VAR>arg1</VAR>" '<VAR>arg2</VAR>'</CODE></DT>
  <DT><CODE>ifeq '<VAR>arg1</VAR>' "<VAR>arg2</VAR>"</CODE></DT>
  <DD>
  <P>Expand all variable references in <VAR>arg1</VAR> and =
<VAR>arg2</VAR> and=20
  compare them. If they are identical, the <VAR>text-if-true</VAR> is =
effective;=20
  otherwise, the <VAR>text-if-false</VAR>, if any, is effective. </P>
  <P>Often you want to test if a variable has a non-empty value. When =
the value=20
  results from complex expansions of variables and functions, expansions =
you=20
  would consider empty may actually contain whitespace characters and =
thus are=20
  not seen as empty. However, you can use the <CODE>strip</CODE> =
function (see=20
  <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
  Functions</A>) to avoid interpreting whitespace as a non-empty value. =
For=20
  example: </P>
  <DIV class=3Dexample><PRE class=3Dexample>ifeq ($(strip $(foo)),)
<VAR>text-if-empty</VAR>
endif
</PRE></DIV>
  <P>will evaluate <VAR>text-if-empty</VAR> even if the expansion of=20
  <CODE>$(foo)</CODE> contains whitespace characters. </P></DD>
  <DT><CODE>ifneq (<VAR>arg1</VAR>, <VAR>arg2</VAR>)</CODE></DT>
  <DT><CODE>ifneq '<VAR>arg1</VAR>' '<VAR>arg2</VAR>'</CODE></DT>
  <DT><CODE>ifneq "<VAR>arg1</VAR>" "<VAR>arg2</VAR>"</CODE></DT>
  <DT><CODE>ifneq "<VAR>arg1</VAR>" '<VAR>arg2</VAR>'</CODE></DT>
  <DT><CODE>ifneq '<VAR>arg1</VAR>' "<VAR>arg2</VAR>"</CODE></DT>
  <DD>
  <P>Expand all variable references in <VAR>arg1</VAR> and =
<VAR>arg2</VAR> and=20
  compare them. If they are different, the <VAR>text-if-true</VAR> is =
effective;=20
  otherwise, the <VAR>text-if-false</VAR>, if any, is effective. =
</P></DD>
  <DT><CODE>ifdef <VAR>variable-name</VAR></CODE></DT>
  <DD>
  <P>The <CODE>ifdef</CODE> form takes the <EM>name</EM> of a variable =
as its=20
  argument, not a reference to a variable. The value of that variable =
has a=20
  non-empty value, the <VAR>text-if-true</VAR> is effective; otherwise, =
the=20
  <VAR>text-if-false</VAR>, if any, is effective. Variables that have =
never been=20
  defined have an empty value. The text <VAR>variable-name</VAR> is =
expanded, so=20
  it could be a variable or function that expands to the name of a =
variable. For=20
  example: </P>
  <DIV class=3Dexample><PRE class=3Dexample>bar =3D true
foo =3D bar
ifdef $(foo)
frobozz =3D yes
endif
</PRE></DIV>
  <P>The variable reference <CODE>$(foo)</CODE> is expanded, yielding=20
  <CODE>bar</CODE>, which is considered to be the name of a variable. =
The=20
  variable <CODE>bar</CODE> is not expanded, but its value is examined =
to=20
  determine if it is non-empty. </P>
  <P>Note that <CODE>ifdef</CODE> only tests whether a variable has a =
value. It=20
  does not expand the variable to see if that value is nonempty. =
Consequently,=20
  tests using <CODE>ifdef</CODE> return true for all definitions except =
those=20
  like <CODE>foo =3D</CODE>. To test for an empty value, use=20
  <CODE>ifeq&nbsp;($(foo),)</CODE><!-- /@w -->. For example, </P>
  <DIV class=3Dexample><PRE class=3Dexample>bar =3D
foo =3D $(bar)
ifdef foo
frobozz =3D yes
else
frobozz =3D no
endif
</PRE></DIV>
  <P>sets =E2=80=98<SAMP>frobozz</SAMP>=E2=80=99 to =
=E2=80=98<SAMP>yes</SAMP>=E2=80=99, while: </P>
  <DIV class=3Dexample><PRE class=3Dexample>foo =3D
ifdef foo
frobozz =3D yes
else
frobozz =3D no
endif
</PRE></DIV>
  <P>sets =E2=80=98<SAMP>frobozz</SAMP>=E2=80=99 to =
=E2=80=98<SAMP>no</SAMP>=E2=80=99. </P></DD>
  <DT><CODE>ifndef <VAR>variable-name</VAR></CODE></DT>
  <DD>
  <P>If the variable <VAR>variable-name</VAR> has an empty value, the=20
  <VAR>text-if-true</VAR> is effective; otherwise, the =
<VAR>text-if-false</VAR>,=20
  if any, is effective. The rules for expansion and testing of=20
  <VAR>variable-name</VAR> are identical to the <CODE>ifdef</CODE> =
directive.=20
  </P></DD></DL>
<P>Extra spaces are allowed and ignored at the beginning of the =
conditional=20
directive line, but a tab is not allowed. (If the line begins with a =
tab, it=20
will be considered part of a recipe for a rule.) Aside from this, extra =
spaces=20
or tabs may be inserted with no effect anywhere except within the =
directive name=20
or within an argument. A comment starting with =
=E2=80=98<SAMP>#</SAMP>=E2=80=99 may appear at=20
the end of the line. </P>
<P>The other two directives that play a part in a conditional are=20
<CODE>else</CODE> and <CODE>endif</CODE>. Each of these directives is =
written as=20
one word, with no arguments. Extra spaces are allowed and ignored at the =

beginning of the line, and spaces or tabs at the end. A comment starting =
with=20
=E2=80=98<SAMP>#</SAMP>=E2=80=99 may appear at the end of the line. </P>
<P>Conditionals affect which lines of the makefile <CODE>make</CODE> =
uses. If=20
the condition is true, <CODE>make</CODE> reads the lines of the=20
<VAR>text-if-true</VAR> as part of the makefile; if the condition is =
false,=20
<CODE>make</CODE> ignores those lines completely. It follows that =
syntactic=20
units of the makefile, such as rules, may safely be split across the =
beginning=20
or the end of the conditional. </P>
<P><CODE>make</CODE> evaluates conditionals when it reads a makefile.=20
Consequently, you cannot use automatic variables in the tests of =
conditionals=20
because they are not defined until recipes are run (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
Variables</A>). </P>
<P>To prevent intolerable confusion, it is not permitted to start a =
conditional=20
in one makefile and end it in another. However, you may write an=20
<CODE>include</CODE> directive within a conditional, provided you do not =
attempt=20
to terminate the conditional inside the included file. </P>
<HR>
<A name=3DTesting-Flags></A>
<DIV class=3Dheader>
<P>Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditional-Syn=
tax"=20
rel=3Dprev>Conditional Syntax</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditionals"=20
rel=3Dup>Conditionals</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DConditionals-that-Test-Flags></A>
<H3 class=3Dsection>7.3 Conditionals that Test Flags</H3>
<P>You can write a conditional that tests <CODE>make</CODE> command =
flags such=20
as =E2=80=98<SAMP>-t</SAMP>=E2=80=99 by using the variable =
<CODE>MAKEFLAGS</CODE> together with=20
the <CODE>findstring</CODE> function (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Functions=20
for String Substitution and Analysis</A>). This is useful when=20
<CODE>touch</CODE> is not enough to make a file appear up to date. </P>
<P>The <CODE>findstring</CODE> function determines whether one string =
appears as=20
a substring of another. If you want to test for the =
=E2=80=98<SAMP>-t</SAMP>=E2=80=99 flag, use=20
=E2=80=98<SAMP>t</SAMP>=E2=80=99 as the first string and the value of =
<CODE>MAKEFLAGS</CODE> as=20
the other. </P>
<P>For example, here is how to arrange to use =E2=80=98<SAMP>ranlib =
-t</SAMP>=E2=80=99 to finish=20
marking an archive file up to date: </P>
<DIV class=3Dexample><PRE class=3Dexample>archive.a: =E2=80=A6
ifneq (,$(findstring t,$(MAKEFLAGS)))
        +touch archive.a
        +ranlib -t archive.a
else
        ranlib archive.a
endif
</PRE></DIV>
<P>The =E2=80=98<SAMP>+</SAMP>=E2=80=99 prefix marks those recipe lines =
as =E2=80=9Crecursive=E2=80=9D so that=20
they will be executed despite use of the =
=E2=80=98<SAMP>-t</SAMP>=E2=80=99 flag. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Recursion">Recu=
rsive Use=20
of <CODE>make</CODE></A>. </P>
<HR>
<A name=3DFunctions></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Running"=20
rel=3Dnext>Running</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditionals"=20
rel=3Dprev>Conditionals</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Top" =
rel=3Dup>Top</A>=20
&nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DFunctions-for-Transforming-Text></A>
<H2 class=3Dchapter>8 Functions for Transforming Text</H2><A=20
name=3Dindex-functions></A>
<P><EM>Functions</EM> allow you to do text processing in the makefile to =
compute=20
the files to operate on or the commands to use in recipes. You use a =
function in=20
a <EM>function call</EM>, where you give the name of the function and =
some text=20
(the <EM>arguments</EM>) for the function to operate on. The result of =
the=20
function=E2=80=99s processing is substituted into the makefile at the =
point of the call,=20
just as a variable might be substituted. </P>
<TABLE class=3Dmenu border=3D0 cellSpacing=3D0>
  <TBODY>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D1=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Syntax-of-Funct=
ions">Syntax=20
      of Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to write a function call. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D2=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>General-purpose text manipulation =
functions.=20
  </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D3=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">File=20
      Name Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Functions for manipulating file names. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D4=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditional-Fun=
ctions">Conditional=20
      Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Functions that implement conditions. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D5=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Foreach-Functio=
n">Foreach=20
      Function</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Repeat some text with controlled =
variation.=20
  </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D6=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Function">=
File=20
      Function</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Write text to a file. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D7=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Call-Function">=
Call=20
      Function</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Expand a user-defined function. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D8=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Value-Function"=
>Value=20
      Function</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Return the un-expanded value of a =
variable.=20
  </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D9=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Eval-Function">=
Eval=20
      Function</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Evaluate the arguments as makefile =
syntax.=20
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Origin-Function=
">Origin=20
      Function</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Find where a variable got its value. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavor-Function=
">Flavor=20
      Function</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Find out the flavor of a variable. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Make-Control-Fu=
nctions">Make=20
      Control Functions</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Functions that control how make runs. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Shell-Function"=
>Shell=20
      Function</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Substitute the output of a shell =
command. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Function"=
>Guile=20
      Function</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Use GNU Guile embedded scripting =
language.=20
  </TD></TR></TBODY></TABLE>
<HR>
<A name=3DSyntax-of-Functions></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
=20
rel=3Dnext>Text Functions</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Functions"=20
rel=3Dprev>Functions</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Functions"=20
rel=3Dup>Functions</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DFunction-Call-Syntax></A>
<H3 class=3Dsection>8.1 Function Call Syntax</H3><A=20
name=3Dindex-_0024_002c-in-function-call></A><A=20
name=3Dindex-dollar-sign-_0028_0024_0029_002c-in-function-call></A><A=20
name=3Dindex-arguments-of-functions></A><A=20
name=3Dindex-functions_002c-syntax-of></A>
<P>A function call resembles a variable reference. It can appear =
anywhere a=20
variable reference can appear, and it is expanded using the same rules =
as=20
variable references. A function call looks like this: </P>
<DIV class=3Dexample><PRE class=3Dexample>$(<VAR>function</VAR> =
<VAR>arguments</VAR>)
</PRE></DIV>
<P>or like this: </P>
<DIV class=3Dexample><PRE class=3Dexample>${<VAR>function</VAR> =
<VAR>arguments</VAR>}
</PRE></DIV>
<P>Here <VAR>function</VAR> is a function name; one of a short list of =
names=20
that are part of <CODE>make</CODE>. You can also essentially create your =
own=20
functions by using the <CODE>call</CODE> built-in function. </P>
<P>The <VAR>arguments</VAR> are the arguments of the function. They are=20
separated from the function name by one or more spaces or tabs, and if =
there is=20
more than one argument, then they are separated by commas. Such =
whitespace and=20
commas are not part of an argument=E2=80=99s value. The delimiters which =
you use to=20
surround the function call, whether parentheses or braces, can appear in =
an=20
argument only in matching pairs; the other kind of delimiters may appear =
singly.=20
If the arguments themselves contain other function calls or variable =
references,=20
it is wisest to use the same kind of delimiters for all the references; =
write=20
=E2=80=98<SAMP>$(subst&nbsp;a,b,$(x))</SAMP>=E2=80=99<!-- /@w -->, not=20
=E2=80=98<SAMP>$(subst&nbsp;a,b,${x})</SAMP>=E2=80=99<!-- /@w -->. This =
is because it is=20
clearer, and because only one type of delimiter is matched to find the =
end of=20
the reference. </P>
<P>The text written for each argument is processed by substitution of =
variables=20
and function calls to produce the argument value, which is the text on =
which the=20
function acts. The substitution is done in the order in which the =
arguments=20
appear. </P>
<P>Commas and unmatched parentheses or braces cannot appear in the text =
of an=20
argument as written; leading spaces cannot appear in the text of the =
first=20
argument as written. These characters can be put into the argument value =
by=20
variable substitution. First define variables <CODE>comma</CODE> and=20
<CODE>space</CODE> whose values are isolated comma and space characters, =
then=20
substitute these variables where such characters are wanted, like this: =
</P>
<DIV class=3Dexample><PRE class=3Dexample>comma:=3D ,
empty:=3D
space:=3D $(empty) $(empty)
foo:=3D a b c
bar:=3D $(subst $(space),$(comma),$(foo))
# <SPAN class=3Droman>bar is now =E2=80=98a,b,c=E2=80=99.</SPAN>
</PRE></DIV>
<P>Here the <CODE>subst</CODE> function replaces each space with a =
comma,=20
through the value of <CODE>foo</CODE>, and substitutes the result. </P>
<HR>
<A name=3DText-Functions></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions"=20
rel=3Dnext>File Name Functions</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Syntax-of-Funct=
ions"=20
rel=3Dprev>Syntax of Functions</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Functions"=20
rel=3Dup>Functions</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A=20
name=3DFunctions-for-String-Substitution-and-Analysis></A>
<H3 class=3Dsection>8.2 Functions for String Substitution and =
Analysis</H3><A=20
name=3Dindex-functions_002c-for-text></A>
<P>Here are some functions that operate on strings: </P>
<DL compact>
  <DT><CODE>$(subst =
<VAR>from</VAR>,<VAR>to</VAR>,<VAR>text</VAR>)</CODE></DT>
  <DD><A name=3Dindex-subst-1></A>
  <P>Performs a textual replacement on the text <VAR>text</VAR>: each =
occurrence=20
  of <VAR>from</VAR> is replaced by <VAR>to</VAR>. The result is =
substituted for=20
  the function call. For example, </P>
  <DIV class=3Dexample><PRE class=3Dexample>$(subst ee,EE,feet on the =
street)
</PRE></DIV>
  <P>substitutes the string =E2=80=98<SAMP>fEEt on the =
strEEt</SAMP>=E2=80=99. </P></DD>
  <DT><CODE>$(patsubst=20
  <VAR>pattern</VAR>,<VAR>replacement</VAR>,<VAR>text</VAR>)</CODE></DT>
  <DD><A name=3Dindex-patsubst-1></A>
  <P>Finds whitespace-separated words in <VAR>text</VAR> that match=20
  <VAR>pattern</VAR> and replaces them with <VAR>replacement</VAR>. Here =

  <VAR>pattern</VAR> may contain a =E2=80=98<SAMP>%</SAMP>=E2=80=99 =
which acts as a wildcard,=20
  matching any number of any characters within a word. If =
<VAR>replacement</VAR>=20
  also contains a =E2=80=98<SAMP>%</SAMP>=E2=80=99, the =
=E2=80=98<SAMP>%</SAMP>=E2=80=99 is replaced by the text=20
  that matched the =E2=80=98<SAMP>%</SAMP>=E2=80=99 in =
<VAR>pattern</VAR>. Only the first=20
  =E2=80=98<SAMP>%</SAMP>=E2=80=99 in the <VAR>pattern</VAR> and =
<VAR>replacement</VAR> is=20
  treated this way; any subsequent =E2=80=98<SAMP>%</SAMP>=E2=80=99 is =
unchanged. </P><A=20
  name=3Dindex-_0025_002c-quoting-in-patsubst></A><A=20
  =
name=3Dindex-_0025_002c-quoting-with-_005c-_0028backslash_0029-2></A><A=20
  name=3Dindex-_005c-_0028backslash_0029_002c-to-quote-_0025-2></A><A=20
  name=3Dindex-backslash-_0028_005c_0029_002c-to-quote-_0025-2></A><A=20
  name=3Dindex-quoting-_0025_002c-in-patsubst></A>
  <P>=E2=80=98<SAMP>%</SAMP>=E2=80=99 characters in =
<CODE>patsubst</CODE> function invocations=20
  can be quoted with preceding backslashes =
(=E2=80=98<SAMP>\</SAMP>=E2=80=99). Backslashes that=20
  would otherwise quote =E2=80=98<SAMP>%</SAMP>=E2=80=99 characters can =
be quoted with more=20
  backslashes. Backslashes that quote =E2=80=98<SAMP>%</SAMP>=E2=80=99 =
characters or other=20
  backslashes are removed from the pattern before it is compared file =
names or=20
  has a stem substituted into it. Backslashes that are not in danger of =
quoting=20
  =E2=80=98<SAMP>%</SAMP>=E2=80=99 characters go unmolested. For =
example, the pattern=20
  <SAMP>the\%weird\\%pattern\\</SAMP> has =
=E2=80=98<SAMP>the%weird\</SAMP>=E2=80=99 preceding=20
  the operative =E2=80=98<SAMP>%</SAMP>=E2=80=99 character, and =
=E2=80=98<SAMP>pattern\\</SAMP>=E2=80=99=20
  following it. The final two backslashes are left alone because they =
cannot=20
  affect any =E2=80=98<SAMP>%</SAMP>=E2=80=99 character. </P>
  <P>Whitespace between words is folded into single space characters; =
leading=20
  and trailing whitespace is discarded. </P>
  <P>For example, </P>
  <DIV class=3Dexample><PRE class=3Dexample>$(patsubst %.c,%.o,x.c.c =
bar.c)
</PRE></DIV>
  <P>produces the value =E2=80=98<SAMP>x.c.o bar.o</SAMP>=E2=80=99. </P>
  <P>Substitution references (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Substitution-Re=
fs">Substitution=20
  References</A>) are a simpler way to get the effect of the=20
  <CODE>patsubst</CODE> function: </P>
  <DIV class=3Dexample><PRE =
class=3Dexample>$(<VAR>var</VAR>:<VAR>pattern</VAR>=3D<VAR>replacement</V=
AR>)
</PRE></DIV>
  <P>is equivalent to </P>
  <DIV class=3Dexample><PRE class=3Dexample>$(patsubst =
<VAR>pattern</VAR>,<VAR>replacement</VAR>,$(<VAR>var</VAR>))
</PRE></DIV>
  <P>The second shorthand simplifies one of the most common uses of=20
  <CODE>patsubst</CODE>: replacing the suffix at the end of file names. =
</P>
  <DIV class=3Dexample><PRE =
class=3Dexample>$(<VAR>var</VAR>:<VAR>suffix</VAR>=3D<VAR>replacement</VA=
R>)
</PRE></DIV>
  <P>is equivalent to </P>
  <DIV class=3Dexample><PRE class=3Dexample>$(patsubst =
%<VAR>suffix</VAR>,%<VAR>replacement</VAR>,$(<VAR>var</VAR>))
</PRE></DIV>
  <P>For example, you might have a list of object files: </P>
  <DIV class=3Dexample><PRE class=3Dexample>objects =3D foo.o bar.o =
baz.o
</PRE></DIV>
  <P>To get the list of corresponding source files, you could simply =
write: </P>
  <DIV class=3Dexample><PRE class=3Dexample>$(objects:.o=3D.c)
</PRE></DIV>
  <P>instead of using the general form: </P>
  <DIV class=3Dexample><PRE class=3Dexample>$(patsubst =
%.o,%.c,$(objects))
</PRE></DIV></DD>
  <DT><CODE>$(strip <VAR>string</VAR>)</CODE></DT>
  <DD><A name=3Dindex-stripping-whitespace></A><A=20
  name=3Dindex-whitespace_002c-stripping></A><A=20
  name=3Dindex-spaces_002c-stripping></A><A name=3Dindex-strip></A>
  <P>Removes leading and trailing whitespace from <VAR>string</VAR> and =
replaces=20
  each internal sequence of one or more whitespace characters with a =
single=20
  space. Thus, =E2=80=98<SAMP>$(strip a b c )</SAMP>=E2=80=99 results in =

  =E2=80=98<SAMP>a&nbsp;b&nbsp;c</SAMP>=E2=80=99<!-- /@w -->. </P>
  <P>The function <CODE>strip</CODE> can be very useful when used in =
conjunction=20
  with conditionals. When comparing something with the empty string=20
  =E2=80=98<SAMP></SAMP>=E2=80=99 using <CODE>ifeq</CODE> or =
<CODE>ifneq</CODE>, you usually=20
  want a string of just whitespace to match the empty string (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditionals">C=
onditionals</A>).=20
  </P>
  <P>Thus, the following may fail to have the desired results: </P>
  <DIV class=3Dexample><PRE class=3Dexample>.PHONY: all
ifneq   "$(needs_made)" ""
all: $(needs_made)
else
all:;@echo 'Nothing to make!'
endif
</PRE></DIV>
  <P>Replacing the variable reference =E2=80=98<SAMP><SPAN=20
  class=3Dnolinebreak>$(needs_made)</SPAN></SAMP>=E2=80=99<!-- /@w --> =
with the function=20
  call =E2=80=98<SAMP>$(strip&nbsp;<SPAN =
class=3Dnolinebreak>$(needs_made))</SPAN></SAMP>=E2=80=99<!-- /@w --> in =
the=20
  <CODE>ifneq</CODE> directive would make it more robust. </P></DD>
  <DT><CODE>$(findstring <VAR>find</VAR>,<VAR>in</VAR>)</CODE></DT>
  <DD><A name=3Dindex-findstring></A><A =
name=3Dindex-searching-for-strings></A><A=20
  name=3Dindex-finding-strings></A><A =
name=3Dindex-strings_002c-searching-for></A>
  <P>Searches <VAR>in</VAR> for an occurrence of <VAR>find</VAR>. If it =
occurs,=20
  the value is <VAR>find</VAR>; otherwise, the value is empty. You can =
use this=20
  function in a conditional to test for the presence of a specific =
substring in=20
  a given string. Thus, the two examples, </P>
  <DIV class=3Dexample><PRE class=3Dexample>$(findstring a,a b c)
$(findstring a,b c)
</PRE></DIV>
  <P>produce the values =E2=80=98<SAMP>a</SAMP>=E2=80=99 and =
=E2=80=98<SAMP></SAMP>=E2=80=99 (the empty string),=20
  respectively. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Testing-Flags">=
Testing=20
  Flags</A>, for a practical application of <CODE>findstring</CODE>. =
</P><A=20
  name=3Dindex-filter></A><A name=3Dindex-filtering-words></A><A=20
  name=3Dindex-words_002c-filtering></A></DD>
  <DT><CODE>$(filter =
<VAR>pattern</VAR>=E2=80=A6,<VAR>text</VAR>)</CODE></DT>
  <DD>
  <P>Returns all whitespace-separated words in <VAR>text</VAR> that =
<EM>do</EM>=20
  match any of the <VAR>pattern</VAR> words, removing any words that =
<EM>do=20
  not</EM> match. The patterns are written using =
=E2=80=98<SAMP>%</SAMP>=E2=80=99, just like the=20
  patterns used in the <CODE>patsubst</CODE> function above. </P>
  <P>The <CODE>filter</CODE> function can be used to separate out =
different=20
  types of strings (such as file names) in a variable. For example: </P>
  <DIV class=3Dexample><PRE class=3Dexample>sources :=3D foo.c bar.c =
baz.s ugh.h
foo: $(sources)
        cc $(filter %.c %.s,$(sources)) -o foo
</PRE></DIV>
  <P>says that <SAMP>foo</SAMP> depends of <SAMP>foo.c</SAMP>,=20
  <SAMP>bar.c</SAMP>, <SAMP>baz.s</SAMP> and <SAMP>ugh.h</SAMP> but only =

  <SAMP>foo.c</SAMP>, <SAMP>bar.c</SAMP> and <SAMP>baz.s</SAMP> should =
be=20
  specified in the command to the compiler. </P></DD>
  <DT><CODE>$(filter-out =
<VAR>pattern</VAR>=E2=80=A6,<VAR>text</VAR>)</CODE></DT>
  <DD><A name=3Dindex-filter_002dout></A><A =
name=3Dindex-filtering-out-words></A><A=20
  name=3Dindex-words_002c-filtering-out></A>
  <P>Returns all whitespace-separated words in <VAR>text</VAR> that =
<EM>do=20
  not</EM> match any of the <VAR>pattern</VAR> words, removing the words =
that=20
  <EM>do</EM> match one or more. This is the exact opposite of the=20
  <CODE>filter</CODE> function. </P>
  <P>For example, given: </P>
  <DIV class=3Dexample><PRE class=3Dexample>objects=3Dmain1.o foo.o =
main2.o bar.o
mains=3Dmain1.o main2.o
</PRE></DIV>
  <P>the following generates a list which contains all the object files =
not in=20
  =E2=80=98<SAMP>mains</SAMP>=E2=80=99: </P>
  <DIV class=3Dexample><PRE class=3Dexample>$(filter-out =
$(mains),$(objects))
</PRE></DIV><A name=3Dindex-sort></A><A =
name=3Dindex-sorting-words></A></DD>
  <DT><CODE>$(sort <VAR>list</VAR>)</CODE></DT>
  <DD>
  <P>Sorts the words of <VAR>list</VAR> in lexical order, removing =
duplicate=20
  words. The output is a list of words separated by single spaces. Thus, =
</P>
  <DIV class=3Dexample><PRE class=3Dexample>$(sort foo bar lose)
</PRE></DIV>
  <P>returns the value =E2=80=98<SAMP>bar foo lose</SAMP>=E2=80=99. =
</P><A=20
  name=3Dindex-removing-duplicate-words></A><A=20
  name=3Dindex-duplicate-words_002c-removing></A><A=20
  name=3Dindex-words_002c-removing-duplicates></A>
  <P>Incidentally, since <CODE>sort</CODE> removes duplicate words, you =
can use=20
  it for this purpose even if you don=E2=80=99t care about the sort =
order. </P></DD>
  <DT><CODE>$(word <VAR>n</VAR>,<VAR>text</VAR>)</CODE></DT>
  <DD><A name=3Dindex-word></A><A =
name=3Dindex-word_002c-selecting-a></A><A=20
  name=3Dindex-selecting-a-word></A>
  <P>Returns the <VAR>n</VAR>th word of <VAR>text</VAR>. The legitimate =
values=20
  of <VAR>n</VAR> start from 1. If <VAR>n</VAR> is bigger than the =
number of=20
  words in <VAR>text</VAR>, the value is empty. For example, </P>
  <DIV class=3Dexample><PRE class=3Dexample>$(word 2, foo bar baz)
</PRE></DIV>
  <P>returns =E2=80=98<SAMP>bar</SAMP>=E2=80=99. </P></DD>
  <DT><CODE>$(wordlist =
<VAR>s</VAR>,<VAR>e</VAR>,<VAR>text</VAR>)</CODE></DT>
  <DD><A name=3Dindex-wordlist></A><A=20
  name=3Dindex-words_002c-selecting-lists-of></A><A=20
  name=3Dindex-selecting-word-lists></A>
  <P>Returns the list of words in <VAR>text</VAR> starting with word=20
  <VAR>s</VAR> and ending with word <VAR>e</VAR> (inclusive). The =
legitimate=20
  values of <VAR>s</VAR> start from 1; <VAR>e</VAR> may start from 0. If =

  <VAR>s</VAR> is bigger than the number of words in <VAR>text</VAR>, =
the value=20
  is empty. If <VAR>e</VAR> is bigger than the number of words in=20
  <VAR>text</VAR>, words up to the end of <VAR>text</VAR> are returned. =
If=20
  <VAR>s</VAR> is greater than <VAR>e</VAR>, nothing is returned. For =
example,=20
  </P>
  <DIV class=3Dexample><PRE class=3Dexample>$(wordlist 2, 3, foo bar =
baz)
</PRE></DIV>
  <P>returns =E2=80=98<SAMP>bar baz</SAMP>=E2=80=99. </P></DD>
  <DT><CODE>$(words <VAR>text</VAR>)</CODE></DT>
  <DD><A name=3Dindex-words></A><A =
name=3Dindex-words_002c-finding-number></A>
  <P>Returns the number of words in <VAR>text</VAR>. Thus, the last word =
of=20
  <VAR>text</VAR> is=20
  =
<CODE>$(word&nbsp;$(words&nbsp;<VAR>text</VAR>),<VAR>text</VAR>)</CODE><!=
-- /@w -->.=20
  </P></DD>
  <DT><CODE>$(firstword <VAR>names</VAR>=E2=80=A6)</CODE></DT>
  <DD><A name=3Dindex-firstword></A><A =
name=3Dindex-words_002c-extracting-first></A>
  <P>The argument <VAR>names</VAR> is regarded as a series of names, =
separated=20
  by whitespace. The value is the first name in the series. The rest of =
the=20
  names are ignored. </P>
  <P>For example, </P>
  <DIV class=3Dexample><PRE class=3Dexample>$(firstword foo bar)
</PRE></DIV>
  <P>produces the result =E2=80=98<SAMP>foo</SAMP>=E2=80=99. Although =
<CODE>$(firstword=20
  <VAR>text</VAR>)</CODE> is the same as <CODE>$(word =
1,<VAR>text</VAR>)</CODE>,=20
  the <CODE>firstword</CODE> function is retained for its simplicity. =
</P></DD>
  <DT><CODE>$(lastword <VAR>names</VAR>=E2=80=A6)</CODE></DT>
  <DD><A name=3Dindex-lastword></A><A =
name=3Dindex-words_002c-extracting-last></A>
  <P>The argument <VAR>names</VAR> is regarded as a series of names, =
separated=20
  by whitespace. The value is the last name in the series. </P>
  <P>For example, </P>
  <DIV class=3Dexample><PRE class=3Dexample>$(lastword foo bar)
</PRE></DIV>
  <P>produces the result =E2=80=98<SAMP>bar</SAMP>=E2=80=99. Although =
<CODE>$(lastword=20
  <VAR>text</VAR>)</CODE> is the same as <CODE>$(word $(words=20
  <VAR>text</VAR>),<VAR>text</VAR>)</CODE>, the <CODE>lastword</CODE> =
function=20
  was added for its simplicity and better performance. </P></DD></DL>
<P>Here is a realistic example of the use of <CODE>subst</CODE> and=20
<CODE>patsubst</CODE>. Suppose that a makefile uses the =
<CODE>VPATH</CODE>=20
variable to specify a list of directories that <CODE>make</CODE> should =
search=20
for prerequisite files (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#General-Search"=
><CODE>VPATH</CODE>=20
Search Path for All Prerequisites</A>). This example shows how to tell =
the C=20
compiler to search for header files in the same list of directories. =
</P>
<P>The value of <CODE>VPATH</CODE> is a list of directories separated by =
colons,=20
such as =E2=80=98<SAMP>src:../headers</SAMP>=E2=80=99. First, the =
<CODE>subst</CODE> function is=20
used to change the colons to spaces: </P>
<DIV class=3Dexample><PRE class=3Dexample>$(subst :, ,$(VPATH))
</PRE></DIV>
<P>This produces =E2=80=98<SAMP>src ../headers</SAMP>=E2=80=99. Then =
<CODE>patsubst</CODE> is=20
used to turn each directory name into a =
=E2=80=98<SAMP>-I</SAMP>=E2=80=99 flag. These can be=20
added to the value of the variable <CODE>CFLAGS</CODE>, which is passed=20
automatically to the C compiler, like this: </P>
<DIV class=3Dexample><PRE class=3Dexample>override CFLAGS +=3D =
$(patsubst %,-I%,$(subst :, ,$(VPATH)))
</PRE></DIV>
<P>The effect is to append the text =E2=80=98<SAMP>-Isrc =
-I../headers</SAMP>=E2=80=99 to the=20
previously given value of <CODE>CFLAGS</CODE>. The <CODE>override</CODE> =

directive is used so that the new value is assigned even if the previous =
value=20
of <CODE>CFLAGS</CODE> was specified with a command argument (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Override-Direct=
ive">The=20
<CODE>override</CODE> Directive</A>). </P>
<HR>
<A name=3DFile-Name-Functions></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditional-Fun=
ctions"=20
rel=3Dnext>Conditional Functions</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
=20
rel=3Dprev>Text Functions</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Functions"=20
rel=3Dup>Functions</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DFunctions-for-File-Names></A>
<H3 class=3Dsection>8.3 Functions for File Names</H3><A=20
name=3Dindex-functions_002c-for-file-names></A><A=20
name=3Dindex-file-name-functions></A>
<P>Several of the built-in expansion functions relate specifically to =
taking=20
apart file names or lists of file names. </P>
<P>Each of the following functions performs a specific transformation on =
a file=20
name. The argument of the function is regarded as a series of file =
names,=20
separated by whitespace. (Leading and trailing whitespace is ignored.) =
Each file=20
name in the series is transformed in the same way and the results are=20
concatenated with single spaces between them. </P>
<DL compact>
  <DT><CODE>$(dir <VAR>names</VAR>=E2=80=A6)</CODE></DT>
  <DD><A name=3Dindex-dir></A><A name=3Dindex-directory-part></A><A=20
  name=3Dindex-file-name_002c-directory-part></A>
  <P>Extracts the directory-part of each file name in <VAR>names</VAR>. =
The=20
  directory-part of the file name is everything up through (and =
including) the=20
  last slash in it. If the file name contains no slash, the directory =
part is=20
  the string =E2=80=98<SAMP>./</SAMP>=E2=80=99. For example, </P>
  <DIV class=3Dexample><PRE class=3Dexample>$(dir src/foo.c hacks)
</PRE></DIV>
  <P>produces the result =E2=80=98<SAMP>src/ ./</SAMP>=E2=80=99. =
</P></DD>
  <DT><CODE>$(notdir <VAR>names</VAR>=E2=80=A6)</CODE></DT>
  <DD><A name=3Dindex-notdir></A><A=20
  name=3Dindex-file-name_002c-nondirectory-part></A><A=20
  name=3Dindex-nondirectory-part></A>
  <P>Extracts all but the directory-part of each file name in =
<VAR>names</VAR>.=20
  If the file name contains no slash, it is left unchanged. Otherwise,=20
  everything through the last slash is removed from it. </P>
  <P>A file name that ends with a slash becomes an empty string. This is =

  unfortunate, because it means that the result does not always have the =
same=20
  number of whitespace-separated file names as the argument had; but we =
do not=20
  see any other valid alternative. </P>
  <P>For example, </P>
  <DIV class=3Dexample><PRE class=3Dexample>$(notdir src/foo.c hacks)
</PRE></DIV>
  <P>produces the result =E2=80=98<SAMP>foo.c hacks</SAMP>=E2=80=99. =
</P></DD>
  <DT><CODE>$(suffix <VAR>names</VAR>=E2=80=A6)</CODE></DT>
  <DD><A name=3Dindex-suffix></A><A =
name=3Dindex-suffix_002c-function-to-find></A><A=20
  name=3Dindex-file-name-suffix></A>
  <P>Extracts the suffix of each file name in <VAR>names</VAR>. If the =
file name=20
  contains a period, the suffix is everything starting with the last =
period.=20
  Otherwise, the suffix is the empty string. This frequently means that =
the=20
  result will be empty when <VAR>names</VAR> is not, and if =
<VAR>names</VAR>=20
  contains multiple file names, the result may contain fewer file names. =
</P>
  <P>For example, </P>
  <DIV class=3Dexample><PRE class=3Dexample>$(suffix src/foo.c =
src-1.0/bar.c hacks)
</PRE></DIV>
  <P>produces the result =E2=80=98<SAMP>.c .c</SAMP>=E2=80=99. </P></DD>
  <DT><CODE>$(basename <VAR>names</VAR>=E2=80=A6)</CODE></DT>
  <DD><A name=3Dindex-basename-1></A><A name=3Dindex-basename></A><A=20
  name=3Dindex-file-name_002c-basename-of></A>
  <P>Extracts all but the suffix of each file name in <VAR>names</VAR>. =
If the=20
  file name contains a period, the basename is everything starting up to =
(and=20
  not including) the last period. Periods in the directory part are =
ignored. If=20
  there is no period, the basename is the entire file name. For example, =
</P>
  <DIV class=3Dexample><PRE class=3Dexample>$(basename src/foo.c =
src-1.0/bar hacks)
</PRE></DIV>
  <P>produces the result =E2=80=98<SAMP>src/foo src-1.0/bar =
hacks</SAMP>=E2=80=99. </P></DD>
  <DT><CODE>$(addsuffix =
<VAR>suffix</VAR>,<VAR>names</VAR>=E2=80=A6)</CODE></DT>
  <DD><A name=3Dindex-addsuffix></A><A =
name=3Dindex-suffix_002c-adding></A><A=20
  name=3Dindex-file-name-suffix_002c-adding></A>
  <P>The argument <VAR>names</VAR> is regarded as a series of names, =
separated=20
  by whitespace; <VAR>suffix</VAR> is used as a unit. The value of=20
  <VAR>suffix</VAR> is appended to the end of each individual name and =
the=20
  resulting larger names are concatenated with single spaces between =
them. For=20
  example, </P>
  <DIV class=3Dexample><PRE class=3Dexample>$(addsuffix .c,foo bar)
</PRE></DIV>
  <P>produces the result =E2=80=98<SAMP>foo.c bar.c</SAMP>=E2=80=99. =
</P></DD>
  <DT><CODE>$(addprefix =
<VAR>prefix</VAR>,<VAR>names</VAR>=E2=80=A6)</CODE></DT>
  <DD><A name=3Dindex-addprefix></A><A =
name=3Dindex-prefix_002c-adding></A><A=20
  name=3Dindex-file-name-prefix_002c-adding></A>
  <P>The argument <VAR>names</VAR> is regarded as a series of names, =
separated=20
  by whitespace; <VAR>prefix</VAR> is used as a unit. The value of=20
  <VAR>prefix</VAR> is prepended to the front of each individual name =
and the=20
  resulting larger names are concatenated with single spaces between =
them. For=20
  example, </P>
  <DIV class=3Dexample><PRE class=3Dexample>$(addprefix src/,foo bar)
</PRE></DIV>
  <P>produces the result =E2=80=98<SAMP>src/foo src/bar</SAMP>=E2=80=99. =
</P></DD>
  <DT><CODE>$(join <VAR>list1</VAR>,<VAR>list2</VAR>)</CODE></DT>
  <DD><A name=3Dindex-join></A><A =
name=3Dindex-joining-lists-of-words></A><A=20
  name=3Dindex-words_002c-joining-lists></A>
  <P>Concatenates the two arguments word by word: the two first words =
(one from=20
  each argument) concatenated form the first word of the result, the two =
second=20
  words form the second word of the result, and so on. So the =
<VAR>n</VAR>th=20
  word of the result comes from the <VAR>n</VAR>th word of each =
argument. If one=20
  argument has more words that the other, the extra words are copied =
unchanged=20
  into the result. </P>
  <P>For example, =E2=80=98<SAMP>$(join a b,.c .o)</SAMP>=E2=80=99 =
produces =E2=80=98<SAMP>a.c=20
  b.o</SAMP>=E2=80=99. </P>
  <P>Whitespace between the words in the lists is not preserved; it is =
replaced=20
  with a single space. </P>
  <P>This function can merge the results of the <CODE>dir</CODE> and=20
  <CODE>notdir</CODE> functions, to produce the original list of files =
which was=20
  given to those two functions. </P></DD>
  <DT><CODE>$(wildcard <VAR>pattern</VAR>)</CODE></DT>
  <DD><A name=3Dindex-wildcard-2></A><A =
name=3Dindex-wildcard_002c-function></A>
  <P>The argument <VAR>pattern</VAR> is a file name pattern, typically=20
  containing wildcard characters (as in shell file name patterns). The =
result of=20
  <CODE>wildcard</CODE> is a space-separated list of the names of =
existing files=20
  that match the pattern. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcards">Usin=
g=20
  Wildcard Characters in File Names</A>. </P></DD>
  <DT><CODE>$(realpath <VAR>names</VAR>=E2=80=A6)</CODE></DT>
  <DD><A name=3Dindex-realpath-1></A><A name=3Dindex-realpath></A><A=20
  name=3Dindex-file-name_002c-realpath-of></A>
  <P>For each file name in <VAR>names</VAR> return the canonical =
absolute name.=20
  A canonical name does not contain any <CODE>.</CODE> or =
<CODE>..</CODE>=20
  components, nor any repeated path separators (<CODE>/</CODE>) or =
symlinks. In=20
  case of a failure the empty string is returned. Consult the=20
  <CODE>realpath(3)</CODE> documentation for a list of possible failure =
causes.=20
  </P></DD>
  <DT><CODE>$(abspath <VAR>names</VAR>=E2=80=A6)</CODE></DT>
  <DD><A name=3Dindex-abspath-1></A><A name=3Dindex-abspath></A><A=20
  name=3Dindex-file-name_002c-abspath-of></A>
  <P>For each file name in <VAR>names</VAR> return an absolute name that =
does=20
  not contain any <CODE>.</CODE> or <CODE>..</CODE> components, nor any =
repeated=20
  path separators (<CODE>/</CODE>). Note that, in contrast to=20
  <CODE>realpath</CODE> function, <CODE>abspath</CODE> does not resolve =
symlinks=20
  and does not require the file names to refer to an existing file or =
directory.=20
  Use the <CODE>wildcard</CODE> function to test for existence. =
</P></DD></DL>
<HR>
<A name=3DConditional-Functions></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Foreach-Functio=
n"=20
rel=3Dnext>Foreach Function</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions"=20
rel=3Dprev>File Name Functions</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Functions"=20
rel=3Dup>Functions</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DFunctions-for-Conditionals></A>
<H3 class=3Dsection>8.4 Functions for Conditionals</H3><A =
name=3Dindex-if></A><A=20
name=3Dindex-conditional-expansion></A>
<P>There are three functions that provide conditional expansion. A key =
aspect of=20
these functions is that not all of the arguments are expanded initially. =
Only=20
those arguments which need to be expanded, will be expanded. </P>
<DL compact>
  <DT><CODE>$(if=20
  =
<VAR>condition</VAR>,<VAR>then-part</VAR>[,<VAR>else-part</VAR>])</CODE><=
/DT>
  <DD><A name=3Dindex-if-1></A>
  <P>The <CODE>if</CODE> function provides support for conditional =
expansion in=20
  a functional context (as opposed to the GNU <CODE>make</CODE> makefile =

  conditionals such as <CODE>ifeq</CODE> (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditional-Syn=
tax">Syntax=20
  of Conditionals</A>). </P>
  <P>The first argument, <VAR>condition</VAR>, first has all preceding =
and=20
  trailing whitespace stripped, then is expanded. If it expands to any =
non-empty=20
  string, then the condition is considered to be true. If it expands to =
an empty=20
  string, the condition is considered to be false. </P>
  <P>If the condition is true then the second argument, =
<VAR>then-part</VAR>, is=20
  evaluated and this is used as the result of the evaluation of the =
entire=20
  <CODE>if</CODE> function. </P>
  <P>If the condition is false then the third argument, =
<VAR>else-part</VAR>, is=20
  evaluated and this is the result of the <CODE>if</CODE> function. If =
there is=20
  no third argument, the <CODE>if</CODE> function evaluates to nothing =
(the=20
  empty string). </P>
  <P>Note that only one of the <VAR>then-part</VAR> or the =
<VAR>else-part</VAR>=20
  will be evaluated, never both. Thus, either can contain side-effects =
(such as=20
  <CODE>shell</CODE> function calls, etc.) </P></DD>
  <DT><CODE>$(or=20
  =
<VAR>condition1</VAR>[,<VAR>condition2</VAR>[,<VAR>condition3</VAR>=E2=80=
=A6]])</CODE></DT>
  <DD><A name=3Dindex-or></A>
  <P>The <CODE>or</CODE> function provides a =
=E2=80=9Cshort-circuiting=E2=80=9D OR operation.=20
  Each argument is expanded, in order. If an argument expands to a =
non-empty=20
  string the processing stops and the result of the expansion is that =
string.=20
  If, after all arguments are expanded, all of them are false (empty), =
then the=20
  result of the expansion is the empty string. </P></DD>
  <DT><CODE>$(and=20
  =
<VAR>condition1</VAR>[,<VAR>condition2</VAR>[,<VAR>condition3</VAR>=E2=80=
=A6]])</CODE></DT>
  <DD><A name=3Dindex-and></A>
  <P>The <CODE>and</CODE> function provides a =
=E2=80=9Cshort-circuiting=E2=80=9D AND operation.=20
  Each argument is expanded, in order. If an argument expands to an =
empty string=20
  the processing stops and the result of the expansion is the empty =
string. If=20
  all arguments expand to a non-empty string then the result of the =
expansion is=20
  the expansion of the last argument. </P></DD></DL>
<HR>
<A name=3DForeach-Function></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Function" =

rel=3Dnext>File Function</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditional-Fun=
ctions"=20
rel=3Dprev>Conditional Functions</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Functions"=20
rel=3Dup>Functions</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DThe-foreach-Function></A>
<H3 class=3Dsection>8.5 The <CODE>foreach</CODE> Function</H3><A=20
name=3Dindex-foreach></A><A name=3Dindex-words_002c-iterating-over></A>
<P>The <CODE>foreach</CODE> function is very different from other =
functions. It=20
causes one piece of text to be used repeatedly, each time with a =
different=20
substitution performed on it. It resembles the <CODE>for</CODE> command =
in the=20
shell <CODE>sh</CODE> and the <CODE>foreach</CODE> command in the =
C-shell=20
<CODE>csh</CODE>. </P>
<P>The syntax of the <CODE>foreach</CODE> function is: </P>
<DIV class=3Dexample><PRE class=3Dexample>$(foreach =
<VAR>var</VAR>,<VAR>list</VAR>,<VAR>text</VAR>)
</PRE></DIV>
<P>The first two arguments, <VAR>var</VAR> and <VAR>list</VAR>, are =
expanded=20
before anything else is done; note that the last argument, =
<VAR>text</VAR>, is=20
<STRONG>not</STRONG> expanded at the same time. Then for each word of =
the=20
expanded value of <VAR>list</VAR>, the variable named by the expanded =
value of=20
<VAR>var</VAR> is set to that word, and <VAR>text</VAR> is expanded. =
Presumably=20
<VAR>text</VAR> contains references to that variable, so its expansion =
will be=20
different each time. </P>
<P>The result is that <VAR>text</VAR> is expanded as many times as there =
are=20
whitespace-separated words in <VAR>list</VAR>. The multiple expansions =
of=20
<VAR>text</VAR> are concatenated, with spaces between them, to make the =
result=20
of <CODE>foreach</CODE>. </P>
<P>This simple example sets the variable =
=E2=80=98<SAMP>files</SAMP>=E2=80=99 to the list of all=20
files in the directories in the list =
=E2=80=98<SAMP>dirs</SAMP>=E2=80=99: </P>
<DIV class=3Dexample><PRE class=3Dexample>dirs :=3D a b c d
files :=3D $(foreach dir,$(dirs),$(wildcard $(dir)/*))
</PRE></DIV>
<P>Here <VAR>text</VAR> is =E2=80=98<SAMP>$(wildcard =
$(dir)/*)</SAMP>=E2=80=99. The first=20
repetition finds the value =E2=80=98<SAMP>a</SAMP>=E2=80=99 for =
<CODE>dir</CODE>, so it produces=20
the same result as =E2=80=98<SAMP>$(wildcard a/*)</SAMP>=E2=80=99; the =
second repetition=20
produces the result of =E2=80=98<SAMP>$(wildcard b/*)</SAMP>=E2=80=99; =
and the third, that of=20
=E2=80=98<SAMP>$(wildcard c/*)</SAMP>=E2=80=99. </P>
<P>This example has the same result (except for setting =
=E2=80=98<SAMP>dirs</SAMP>=E2=80=99) as=20
the following example: </P>
<DIV class=3Dexample><PRE class=3Dexample>files :=3D $(wildcard a/* b/* =
c/* d/*)
</PRE></DIV>
<P>When <VAR>text</VAR> is complicated, you can improve readability by =
giving it=20
a name, with an additional variable: </P>
<DIV class=3Dexample><PRE class=3Dexample>find_files =3D $(wildcard =
$(dir)/*)
dirs :=3D a b c d
files :=3D $(foreach dir,$(dirs),$(find_files))
</PRE></DIV>
<P>Here we use the variable <CODE>find_files</CODE> this way. We use =
plain=20
=E2=80=98<SAMP>=3D</SAMP>=E2=80=99 to define a recursively-expanding =
variable, so that its value=20
contains an actual function call to be re-expanded under the control of=20
<CODE>foreach</CODE>; a simply-expanded variable would not do, since=20
<CODE>wildcard</CODE> would be called only once at the time of defining=20
<CODE>find_files</CODE>. </P>
<P>The <CODE>foreach</CODE> function has no permanent effect on the =
variable=20
<VAR>var</VAR>; its value and flavor after the <CODE>foreach</CODE> =
function=20
call are the same as they were beforehand. The other values which are =
taken from=20
<VAR>list</VAR> are in effect only temporarily, during the execution of=20
<CODE>foreach</CODE>. The variable <VAR>var</VAR> is a simply-expanded =
variable=20
during the execution of <CODE>foreach</CODE>. If <VAR>var</VAR> was =
undefined=20
before the <CODE>foreach</CODE> function call, it is undefined after the =
call.=20
See <A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavors">The =
Two=20
Flavors of Variables</A>. </P>
<P>You must take care when using complex variable expressions that =
result in=20
variable names because many strange things are valid variable names, but =
are=20
probably not what you intended. For example, </P>
<DIV class=3Dsmallexample><PRE class=3Dsmallexample>files :=3D $(foreach =
Esta-escrito-en-espanol!,b c ch,$(find_files))
</PRE></DIV>
<P>might be useful if the value of <CODE>find_files</CODE> references =
the=20
variable whose name is =
=E2=80=98<SAMP>Esta-escrito-en-espanol!</SAMP>=E2=80=99 (es un nombre=20
bastante largo, no?), but it is more likely to be a mistake. </P>
<HR>
<A name=3DFile-Function></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Call-Function" =

rel=3Dnext>Call Function</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Foreach-Functio=
n"=20
rel=3Dprev>Foreach Function</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Functions"=20
rel=3Dup>Functions</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DThe-file-Function></A>
<H3 class=3Dsection>8.6 The <CODE>file</CODE> Function</H3><A=20
name=3Dindex-file></A><A name=3Dindex-writing-to-a-file></A><A=20
name=3Dindex-file_002c-writing-to></A>
<P>The <CODE>file</CODE> function allows the makefile to write to a =
file. Two=20
modes of writing are supported: overwrite, where the text is written to =
the=20
beginning of the file and any existing content is lost, and append, =
where the=20
text is written to the end of the file, preserving the existing content. =
In all=20
cases the file is created if it does not exist. </P>
<P>The syntax of the <CODE>file</CODE> function is: </P>
<DIV class=3Dexample><PRE class=3Dexample>$(file <VAR>op</VAR> =
<VAR>filename</VAR>[,<VAR>text</VAR>])
</PRE></DIV>
<P>The operator <VAR>op</VAR> can be either <CODE>&gt;</CODE> which =
indicates=20
overwrite mode, or <CODE>&gt;&gt;</CODE> which indicates append mode. =
The=20
<VAR>filename</VAR> indicates the file to be written to. There may =
optionally be=20
whitespace between the operator and the file name. </P>
<P>When the <CODE>file</CODE> function is expanded all its arguments are =

expanded first, then the file indicated by <VAR>filename</VAR> will be =
opened in=20
the mode described by <VAR>op</VAR>. Finally <VAR>text</VAR> will be =
written to=20
the file. If <VAR>text</VAR> does not already end in a newline, even if =
empty, a=20
final newline will be written. If the <VAR>text</VAR> argument is not =
given,=20
nothing will be written. The result of evaluating the <CODE>file</CODE> =
function=20
is always the empty string. </P>
<P>It is a fatal error if the file cannot be opened for writing, or if =
the write=20
operation fails. </P>
<P>For example, the <CODE>file</CODE> function can be useful if your =
build=20
system has a limited command line size and your recipe runs a command =
that can=20
accept arguments from a file as well. Many commands use the convention =
that an=20
argument prefixed with an <CODE>@</CODE> specifies a file containing =
more=20
arguments. Then you might write your recipe in this way: </P>
<DIV class=3Dexample><PRE class=3Dexample>program: $(OBJECTS)
        $(file &gt;$@.in,$^)
        $(CMD) $(CMDFLAGS) @$@.in
        @rm $@.in
</PRE></DIV>
<P>If the command required each argument to be on a separate line of the =
input=20
file, you might write your recipe like this: </P>
<DIV class=3Dexample><PRE class=3Dexample>program: $(OBJECTS)
        $(file &gt;$@.in) $(foreach O,$^,$(file &gt;&gt;$@.in,$O))
        $(CMD) $(CMDFLAGS) @$@.in
        @rm $@.in
</PRE></DIV>
<HR>
<A name=3DCall-Function></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Value-Function"=
=20
rel=3Dnext>Value Function</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Function" =

rel=3Dprev>File Function</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Functions"=20
rel=3Dup>Functions</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DThe-call-Function></A>
<H3 class=3Dsection>8.7 The <CODE>call</CODE> Function</H3><A=20
name=3Dindex-call></A><A name=3Dindex-functions_002c-user-defined></A><A =

name=3Dindex-user-defined-functions></A>
<P>The <CODE>call</CODE> function is unique in that it can be used to =
create new=20
parameterized functions. You can write a complex expression as the value =
of a=20
variable, then use <CODE>call</CODE> to expand it with different values. =
</P>
<P>The syntax of the <CODE>call</CODE> function is: </P>
<DIV class=3Dexample><PRE class=3Dexample>$(call =
<VAR>variable</VAR>,<VAR>param</VAR>,<VAR>param</VAR>,=E2=80=A6)
</PRE></DIV>
<P>When <CODE>make</CODE> expands this function, it assigns each=20
<VAR>param</VAR> to temporary variables <CODE>$(1)</CODE>, =
<CODE>$(2)</CODE>,=20
etc. The variable <CODE>$(0)</CODE> will contain <VAR>variable</VAR>. =
There is=20
no maximum number of parameter arguments. There is no minimum, either, =
but it=20
doesn=E2=80=99t make sense to use <CODE>call</CODE> with no parameters. =
</P>
<P>Then <VAR>variable</VAR> is expanded as a <CODE>make</CODE> variable =
in the=20
context of these temporary assignments. Thus, any reference to =
<CODE>$(1)</CODE>=20
in the value of <VAR>variable</VAR> will resolve to the first =
<VAR>param</VAR>=20
in the invocation of <CODE>call</CODE>. </P>
<P>Note that <VAR>variable</VAR> is the <EM>name</EM> of a variable, not =
a=20
<EM>reference</EM> to that variable. Therefore you would not normally =
use a=20
=E2=80=98<SAMP>$</SAMP>=E2=80=99 or parentheses when writing it. (You =
can, however, use a=20
variable reference in the name if you want the name not to be a =
constant.) </P>
<P>If <VAR>variable</VAR> is the name of a built-in function, the =
built-in=20
function is always invoked (even if a <CODE>make</CODE> variable by that =
name=20
also exists). </P>
<P>The <CODE>call</CODE> function expands the <VAR>param</VAR> arguments =
before=20
assigning them to temporary variables. This means that =
<VAR>variable</VAR>=20
values containing references to built-in functions that have special =
expansion=20
rules, like <CODE>foreach</CODE> or <CODE>if</CODE>, may not work as you =
expect.=20
</P>
<P>Some examples may make this clearer. </P>
<P>This macro simply reverses its arguments: </P>
<DIV class=3Dsmallexample><PRE class=3Dsmallexample>reverse =3D $(2) =
$(1)

foo =3D $(call reverse,a,b)
</PRE></DIV>
<P>Here <VAR>foo</VAR> will contain =E2=80=98<SAMP>b a</SAMP>=E2=80=99. =
</P>
<P>This one is slightly more interesting: it defines a macro to search =
for the=20
first instance of a program in <CODE>PATH</CODE>: </P>
<DIV class=3Dsmallexample><PRE class=3Dsmallexample>pathsearch =3D =
$(firstword $(wildcard $(addsuffix /$(1),$(subst :, ,$(PATH)))))

LS :=3D $(call pathsearch,ls)
</PRE></DIV>
<P>Now the variable LS contains <CODE>/bin/ls</CODE> or similar. </P>
<P>The <CODE>call</CODE> function can be nested. Each recursive =
invocation gets=20
its own local values for <CODE>$(1)</CODE>, etc. that mask the values of =

higher-level <CODE>call</CODE>. For example, here is an implementation =
of a=20
<EM>map</EM> function: </P>
<DIV class=3Dsmallexample><PRE class=3Dsmallexample>map =3D $(foreach =
a,$(2),$(call $(1),$(a)))
</PRE></DIV>
<P>Now you can <VAR>map</VAR> a function that normally takes only one =
argument,=20
such as <CODE>origin</CODE>, to multiple values in one step: </P>
<DIV class=3Dsmallexample><PRE class=3Dsmallexample>o =3D $(call =
map,origin,o map MAKE)
</PRE></DIV>
<P>and end up with <VAR>o</VAR> containing something like =
=E2=80=98<SAMP>file file=20
default</SAMP>=E2=80=99. </P>
<P>A final caution: be careful when adding whitespace to the arguments =
to=20
<CODE>call</CODE>. As with other functions, any whitespace contained in =
the=20
second and subsequent arguments is kept; this can cause strange effects. =
It=E2=80=99s=20
generally safest to remove all extraneous whitespace when providing =
parameters=20
to <CODE>call</CODE>. </P>
<HR>
<A name=3DValue-Function></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Eval-Function" =

rel=3Dnext>Eval Function</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Call-Function" =

rel=3Dprev>Call Function</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Functions"=20
rel=3Dup>Functions</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DThe-value-Function></A>
<H3 class=3Dsection>8.8 The <CODE>value</CODE> Function</H3><A=20
name=3Dindex-value-1></A><A =
name=3Dindex-variables_002c-unexpanded-value></A>
<P>The <CODE>value</CODE> function provides a way for you to use the =
value of a=20
variable <EM>without</EM> having it expanded. Please note that this does =
not=20
undo expansions which have already occurred; for example if you create a =
simply=20
expanded variable its value is expanded during the definition; in that =
case the=20
<CODE>value</CODE> function will return the same result as using the =
variable=20
directly. </P>
<P>The syntax of the <CODE>value</CODE> function is: </P>
<DIV class=3Dexample><PRE class=3Dexample>$(value <VAR>variable</VAR>)
</PRE></DIV>
<P>Note that <VAR>variable</VAR> is the <EM>name</EM> of a variable, not =
a=20
<EM>reference</EM> to that variable. Therefore you would not normally =
use a=20
=E2=80=98<SAMP>$</SAMP>=E2=80=99 or parentheses when writing it. (You =
can, however, use a=20
variable reference in the name if you want the name not to be a =
constant.) </P>
<P>The result of this function is a string containing the value of=20
<VAR>variable</VAR>, without any expansion occurring. For example, in =
this=20
makefile: </P>
<DIV class=3Dexample><PRE class=3Dexample>FOO =3D $PATH

all:
        @echo $(FOO)
        @echo $(value FOO)
</PRE></DIV>
<P>The first output line would be <CODE>ATH</CODE>, since the =
=E2=80=9C$P=E2=80=9D would be=20
expanded as a <CODE>make</CODE> variable, while the second output line =
would be=20
the current value of your <CODE>$PATH</CODE> environment variable, since =
the=20
<CODE>value</CODE> function avoided the expansion. </P>
<P>The <CODE>value</CODE> function is most often used in conjunction =
with the=20
<CODE>eval</CODE> function (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Eval-Function">=
Eval=20
Function</A>). </P>
<HR>
<A name=3DEval-Function></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Origin-Function=
"=20
rel=3Dnext>Origin Function</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Value-Function"=
=20
rel=3Dprev>Value Function</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Functions"=20
rel=3Dup>Functions</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DThe-eval-Function></A>
<H3 class=3Dsection>8.9 The <CODE>eval</CODE> Function</H3><A=20
name=3Dindex-eval></A><A name=3Dindex-evaluating-makefile-syntax></A><A=20
name=3Dindex-makefile-syntax_002c-evaluating></A>
<P>The <CODE>eval</CODE> function is very special: it allows you to =
define new=20
makefile constructs that are not constant; which are the result of =
evaluating=20
other variables and functions. The argument to the <CODE>eval</CODE> =
function is=20
expanded, then the results of that expansion are parsed as makefile =
syntax. The=20
expanded results can define new <CODE>make</CODE> variables, targets, =
implicit=20
or explicit rules, etc. </P>
<P>The result of the <CODE>eval</CODE> function is always the empty =
string;=20
thus, it can be placed virtually anywhere in a makefile without causing =
syntax=20
errors. </P>
<P>It=E2=80=99s important to realize that the <CODE>eval</CODE> argument =
is expanded=20
<EM>twice</EM>; first by the <CODE>eval</CODE> function, then the =
results of=20
that expansion are expanded again when they are parsed as makefile =
syntax. This=20
means you may need to provide extra levels of escaping for =
=E2=80=9C$=E2=80=9D characters when=20
using <CODE>eval</CODE>. The <CODE>value</CODE> function (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Value-Function"=
>Value=20
Function</A>) can sometimes be useful in these situations, to circumvent =

unwanted expansions. </P>
<P>Here is an example of how <CODE>eval</CODE> can be used; this example =

combines a number of concepts and other functions. Although it might =
seem overly=20
complex to use <CODE>eval</CODE> in this example, rather than just =
writing out=20
the rules, consider two things: first, the template definition (in=20
<CODE>PROGRAM_template</CODE>) could need to be much more complex than =
it is=20
here; and second, you might put the complex, =E2=80=9Cgeneric=E2=80=9D =
part of this example into=20
another makefile, then include it in all the individual makefiles. Now =
your=20
individual makefiles are quite straightforward. </P>
<DIV class=3Dexample><PRE class=3Dexample>PROGRAMS    =3D server client

server_OBJS =3D server.o server_priv.o server_access.o
server_LIBS =3D priv protocol

client_OBJS =3D client.o client_api.o client_mem.o
client_LIBS =3D protocol

# Everything after this is generic

.PHONY: all
all: $(PROGRAMS)

define PROGRAM_template =3D
 $(1): $$($(1)_OBJS) $$($(1)_LIBS:%=3D-l%)
 ALL_OBJS   +=3D $$($(1)_OBJS)
endef

$(foreach prog,$(PROGRAMS),$(eval $(call PROGRAM_template,$(prog))))

$(PROGRAMS):
        $(LINK.o) $^ $(LDLIBS) -o $@

clean:
        rm -f $(ALL_OBJS) $(PROGRAMS)
</PRE></DIV>
<HR>
<A name=3DOrigin-Function></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavor-Function=
"=20
rel=3Dnext>Flavor Function</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Eval-Function" =

rel=3Dprev>Eval Function</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Functions"=20
rel=3Dup>Functions</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DThe-origin-Function></A>
<H3 class=3Dsection>8.10 The <CODE>origin</CODE> Function</H3><A=20
name=3Dindex-origin></A><A name=3Dindex-variables_002c-origin-of></A><A=20
name=3Dindex-origin-of-variable></A>
<P>The <CODE>origin</CODE> function is unlike most other functions in =
that it=20
does not operate on the values of variables; it tells you something=20
<EM>about</EM> a variable. Specifically, it tells you where it came =
from. </P>
<P>The syntax of the <CODE>origin</CODE> function is: </P>
<DIV class=3Dexample><PRE class=3Dexample>$(origin <VAR>variable</VAR>)
</PRE></DIV>
<P>Note that <VAR>variable</VAR> is the <EM>name</EM> of a variable to =
inquire=20
about, not a <EM>reference</EM> to that variable. Therefore you would =
not=20
normally use a =E2=80=98<SAMP>$</SAMP>=E2=80=99 or parentheses when =
writing it. (You can,=20
however, use a variable reference in the name if you want the name not =
to be a=20
constant.) </P>
<P>The result of this function is a string telling you how the variable=20
<VAR>variable</VAR> was defined: </P>
<DL compact>
  <DT>=E2=80=98<SAMP>undefined</SAMP>=E2=80=99</DT>
  <DD>
  <P>if <VAR>variable</VAR> was never defined. </P></DD>
  <DT>=E2=80=98<SAMP>default</SAMP>=E2=80=99</DT>
  <DD>
  <P>if <VAR>variable</VAR> has a default definition, as is usual with=20
  <CODE>CC</CODE> and so on. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Variables=20
  Used by Implicit Rules</A>. Note that if you have redefined a default=20
  variable, the <CODE>origin</CODE> function will return the origin of =
the later=20
  definition. </P></DD>
  <DT>=E2=80=98<SAMP>environment</SAMP>=E2=80=99</DT>
  <DD>
  <P>if <VAR>variable</VAR> was inherited from the environment provided =
to=20
  <CODE>make</CODE>. </P></DD>
  <DT>=E2=80=98<SAMP>environment override</SAMP>=E2=80=99</DT>
  <DD>
  <P>if <VAR>variable</VAR> was inherited from the environment provided =
to=20
  <CODE>make</CODE>, and is overriding a setting for <VAR>variable</VAR> =
in the=20
  makefile as a result of the =E2=80=98<SAMP><SPAN =
class=3Dnolinebreak>-e</SPAN></SAMP>=E2=80=99<!-- /@w --> option (see <A =

  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Summary=20
  of Options</A>). </P></DD>
  <DT>=E2=80=98<SAMP>file</SAMP>=E2=80=99</DT>
  <DD>
  <P>if <VAR>variable</VAR> was defined in a makefile. </P></DD>
  <DT>=E2=80=98<SAMP>command line</SAMP>=E2=80=99</DT>
  <DD>
  <P>if <VAR>variable</VAR> was defined on the command line. </P></DD>
  <DT>=E2=80=98<SAMP>override</SAMP>=E2=80=99</DT>
  <DD>
  <P>if <VAR>variable</VAR> was defined with an <CODE>override</CODE> =
directive=20
  in a makefile (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Override-Direct=
ive">The=20
  <CODE>override</CODE> Directive</A>). </P></DD>
  <DT>=E2=80=98<SAMP>automatic</SAMP>=E2=80=99</DT>
  <DD>
  <P>if <VAR>variable</VAR> is an automatic variable defined for the =
execution=20
  of the recipe for each rule (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
  Variables</A>). </P></DD></DL>
<P>This information is primarily useful (other than for your curiosity) =
to=20
determine if you want to believe the value of a variable. For example, =
suppose=20
you have a makefile <SAMP>foo</SAMP> that includes another makefile=20
<SAMP>bar</SAMP>. You want a variable <CODE>bletch</CODE> to be defined =
in=20
<SAMP>bar</SAMP> if you run the command =E2=80=98<SAMP>make&nbsp;<SPAN=20
class=3Dnolinebreak>-f</SPAN>&nbsp;bar</SAMP>=E2=80=99<!-- /@w -->, even =
if the=20
environment contains a definition of <CODE>bletch</CODE>. However, if=20
<SAMP>foo</SAMP> defined <CODE>bletch</CODE> before including =
<SAMP>bar</SAMP>,=20
you do not want to override that definition. This could be done by using =
an=20
<CODE>override</CODE> directive in <SAMP>foo</SAMP>, giving that =
definition=20
precedence over the later definition in <SAMP>bar</SAMP>; unfortunately, =
the=20
<CODE>override</CODE> directive would also override any command line=20
definitions. So, <SAMP>bar</SAMP> could include: </P>
<DIV class=3Dexample><PRE class=3Dexample>ifdef bletch
ifeq "$(origin bletch)" "environment"
bletch =3D barf, gag, etc.
endif
endif
</PRE></DIV>
<P>If <CODE>bletch</CODE> has been defined from the environment, this =
will=20
redefine it. </P>
<P>If you want to override a previous definition of <CODE>bletch</CODE> =
if it=20
came from the environment, even under =E2=80=98<SAMP>-e</SAMP>=E2=80=99, =
you could instead=20
write: </P>
<DIV class=3Dexample><PRE class=3Dexample>ifneq "$(findstring =
environment,$(origin bletch))" ""
bletch =3D barf, gag, etc.
endif
</PRE></DIV>
<P>Here the redefinition takes place if =E2=80=98<SAMP>$(origin =
bletch)</SAMP>=E2=80=99 returns=20
either =E2=80=98<SAMP>environment</SAMP>=E2=80=99 or =
=E2=80=98<SAMP>environment override</SAMP>=E2=80=99. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Functions=20
for String Substitution and Analysis</A>. </P>
<HR>
<A name=3DFlavor-Function></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Make-Control-Fu=
nctions"=20
rel=3Dnext>Make Control Functions</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Origin-Function=
"=20
rel=3Dprev>Origin Function</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Functions"=20
rel=3Dup>Functions</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DThe-flavor-Function></A>
<H3 class=3Dsection>8.11 The <CODE>flavor</CODE> Function</H3><A=20
name=3Dindex-flavor></A><A name=3Dindex-variables_002c-flavor-of></A><A=20
name=3Dindex-flavor-of-variable></A>
<P>The <CODE>flavor</CODE> function, like the <CODE>origin</CODE> =
function, does=20
not operate on the values of variables but rather it tells you something =

<EM>about</EM> a variable. Specifically, it tells you the flavor of a =
variable=20
(see <A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavors">The =
Two=20
Flavors of Variables</A>). </P>
<P>The syntax of the <CODE>flavor</CODE> function is: </P>
<DIV class=3Dexample><PRE class=3Dexample>$(flavor <VAR>variable</VAR>)
</PRE></DIV>
<P>Note that <VAR>variable</VAR> is the <EM>name</EM> of a variable to =
inquire=20
about, not a <EM>reference</EM> to that variable. Therefore you would =
not=20
normally use a =E2=80=98<SAMP>$</SAMP>=E2=80=99 or parentheses when =
writing it. (You can,=20
however, use a variable reference in the name if you want the name not =
to be a=20
constant.) </P>
<P>The result of this function is a string that identifies the flavor of =
the=20
variable <VAR>variable</VAR>: </P>
<DL compact>
  <DT>=E2=80=98<SAMP>undefined</SAMP>=E2=80=99</DT>
  <DD>
  <P>if <VAR>variable</VAR> was never defined. </P></DD>
  <DT>=E2=80=98<SAMP>recursive</SAMP>=E2=80=99</DT>
  <DD>
  <P>if <VAR>variable</VAR> is a recursively expanded variable. =
</P></DD>
  <DT>=E2=80=98<SAMP>simple</SAMP>=E2=80=99</DT>
  <DD>
  <P>if <VAR>variable</VAR> is a simply expanded variable. =
</P></DD></DL>
<HR>
<A name=3DMake-Control-Functions></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Shell-Function"=
=20
rel=3Dnext>Shell Function</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavor-Function=
"=20
rel=3Dprev>Flavor Function</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Functions"=20
rel=3Dup>Functions</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DFunctions-That-Control-Make></A>
<H3 class=3Dsection>8.12 Functions That Control Make</H3><A=20
name=3Dindex-functions_002c-for-controlling-make></A><A=20
name=3Dindex-controlling-make></A>
<P>These functions control the way make runs. Generally, they are used =
to=20
provide information to the user of the makefile or to cause make to stop =
if some=20
sort of environmental error is detected. </P>
<DL compact>
  <DT><CODE>$(error <VAR>text</VAR>=E2=80=A6)</CODE></DT>
  <DD><A name=3Dindex-error></A><A =
name=3Dindex-error_002c-stopping-on></A><A=20
  name=3Dindex-stopping-make></A>
  <P>Generates a fatal error where the message is <VAR>text</VAR>. Note =
that the=20
  error is generated whenever this function is evaluated. So, if you put =
it=20
  inside a recipe or on the right side of a recursive variable =
assignment, it=20
  won=E2=80=99t be evaluated until later. The <VAR>text</VAR> will be =
expanded before=20
  the error is generated. </P>
  <P>For example, </P>
  <DIV class=3Dexample><PRE class=3Dexample>ifdef ERROR1
$(error error is $(ERROR1))
endif
</PRE></DIV>
  <P>will generate a fatal error during the read of the makefile if the=20
  <CODE>make</CODE> variable <CODE>ERROR1</CODE> is defined. Or, </P>
  <DIV class=3Dexample><PRE class=3Dexample>ERR =3D $(error found an =
error!)

.PHONY: err
err: ; $(ERR)
</PRE></DIV>
  <P>will generate a fatal error while <CODE>make</CODE> is running, if =
the=20
  <CODE>err</CODE> target is invoked. </P></DD>
  <DT><CODE>$(warning <VAR>text</VAR>=E2=80=A6)</CODE></DT>
  <DD><A name=3Dindex-warning></A><A =
name=3Dindex-warnings_002c-printing></A><A=20
  name=3Dindex-printing-user-warnings></A>
  <P>This function works similarly to the <CODE>error</CODE> function, =
above,=20
  except that <CODE>make</CODE> doesn=E2=80=99t exit. Instead, =
<VAR>text</VAR> is=20
  expanded and the resulting message is displayed, but processing of the =

  makefile continues. </P>
  <P>The result of the expansion of this function is the empty string. =
</P></DD>
  <DT><CODE>$(info <VAR>text</VAR>=E2=80=A6)</CODE></DT>
  <DD><A name=3Dindex-info></A><A name=3Dindex-printing-messages></A>
  <P>This function does nothing more than print its (expanded) =
argument(s) to=20
  standard output. No makefile name or line number is added. The result =
of the=20
  expansion of this function is the empty string. </P></DD></DL>
<HR>
<A name=3DShell-Function></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Function"=
=20
rel=3Dnext>Guile Function</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Make-Control-Fu=
nctions"=20
rel=3Dprev>Make Control Functions</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Functions"=20
rel=3Dup>Functions</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DThe-shell-Function></A>
<H3 class=3Dsection>8.13 The <CODE>shell</CODE> Function</H3><A=20
name=3Dindex-shell></A><A name=3Dindex-command-expansion></A><A=20
name=3Dindex-backquotes></A><A =
name=3Dindex-shell-command_002c-function-for></A>
<P>The <CODE>shell</CODE> function is unlike any other function other =
than the=20
<CODE>wildcard</CODE> function (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcard-Functi=
on">The=20
Function <CODE>wildcard</CODE></A>) in that it communicates with the =
world=20
outside of <CODE>make</CODE>. </P>
<P>The <CODE>shell</CODE> function performs the same function that =
backquotes=20
(=E2=80=98<SAMP>`</SAMP>=E2=80=99) perform in most shells: it does =
<EM>command expansion</EM>.=20
This means that it takes as an argument a shell command and evaluates to =
the=20
output of the command. The only processing <CODE>make</CODE> does on the =
result=20
is to convert each newline (or carriage-return / newline pair) to a =
single=20
space. If there is a trailing (carriage-return and) newline it will =
simply be=20
removed. </P>
<P>The commands run by calls to the <CODE>shell</CODE> function are run =
when the=20
function calls are expanded (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Reading-Makefil=
es">How=20
<CODE>make</CODE> Reads a Makefile</A>). Because this function involves =
spawning=20
a new shell, you should carefully consider the performance implications =
of using=20
the <CODE>shell</CODE> function within recursively expanded variables =
vs. simply=20
expanded variables (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavors">The =
Two Flavors=20
of Variables</A>). </P>
<P>Here are some examples of the use of the <CODE>shell</CODE> function: =
</P>
<DIV class=3Dexample><PRE class=3Dexample>contents :=3D $(shell cat foo)
</PRE></DIV>
<P>sets <CODE>contents</CODE> to the contents of the file =
<SAMP>foo</SAMP>, with=20
a space (rather than a newline) separating each line. </P>
<DIV class=3Dexample><PRE class=3Dexample>files :=3D $(shell echo *.c)
</PRE></DIV>
<P>sets <CODE>files</CODE> to the expansion of =
=E2=80=98<SAMP>*.c</SAMP>=E2=80=99. Unless=20
<CODE>make</CODE> is using a very strange shell, this has the same =
result as=20
=E2=80=98<SAMP>$(wildcard&nbsp;*.c)</SAMP>=E2=80=99<!-- /@w --> (as long =
as at least one=20
=E2=80=98<SAMP>.c</SAMP>=E2=80=99 file exists). </P>
<HR>
<A name=3DGuile-Function></A>
<DIV class=3Dheader>
<P>Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Shell-Function"=
=20
rel=3Dprev>Shell Function</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Functions"=20
rel=3Dup>Functions</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DThe-guile-Function></A>
<H3 class=3Dsection>8.14 The <CODE>guile</CODE> Function</H3><A=20
name=3Dindex-guile></A><A name=3Dindex-Guile></A>
<P>If GNU <CODE>make</CODE> is built with support for GNU Guile as an =
embedded=20
extension language then the <CODE>guile</CODE> function will be =
available. The=20
<CODE>guile</CODE> function takes one argument which is first expanded =
by=20
<CODE>make</CODE> in the normal fashion, then passed to the GNU Guile =
evaluator.=20
The result of the evaluator is converted into a string and used as the =
expansion=20
of the <CODE>guile</CODE> function in the makefile. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Integrati=
on">GNU=20
Guile Integration</A> for details on writing extensions to =
<CODE>make</CODE> in=20
Guile. </P>
<P>You can determine whether GNU Guile support is available by checking =
the=20
<CODE>.FEATURES</CODE> variable for the word <VAR>guile</VAR>. </P>
<HR>
<A name=3DRunning></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rules"=
=20
rel=3Dnext>Implicit Rules</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Functions"=20
rel=3Dprev>Functions</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Top" =
rel=3Dup>Top</A>=20
&nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DHow-to-Run-make></A>
<H2 class=3Dchapter>9 How to Run <CODE>make</CODE></H2>
<P>A makefile that says how to recompile a program can be used in more =
than one=20
way. The simplest use is to recompile every file that is out of date. =
Usually,=20
makefiles are written so that if you run <CODE>make</CODE> with no =
arguments, it=20
does just that. </P>
<P>But you might want to update only some of the files; you might want =
to use a=20
different compiler or different compiler options; you might want just to =
find=20
out which files are out of date without changing them. </P>
<P>By giving arguments when you run <CODE>make</CODE>, you can do any of =
these=20
things and many others. </P><A name=3Dindex-exit-status-of-make></A>
<P>The exit status of <CODE>make</CODE> is always one of three values: =
</P>
<DL compact>
  <DT><CODE>0</CODE></DT>
  <DD>
  <P>The exit status is zero if <CODE>make</CODE> is successful. =
</P></DD>
  <DT><CODE>2</CODE></DT>
  <DD>
  <P>The exit status is two if <CODE>make</CODE> encounters any errors. =
It will=20
  print messages describing the particular errors. </P></DD>
  <DT><CODE>1</CODE></DT>
  <DD>
  <P>The exit status is one if you use the =
=E2=80=98<SAMP>-q</SAMP>=E2=80=99 flag and=20
  <CODE>make</CODE> determines that some target is not already up to =
date. See=20
  <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution">Instead=20
  of Executing Recipes</A>. </P></DD></DL>
<TABLE class=3Dmenu border=3D0 cellSpacing=3D0>
  <TBODY>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D1=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Argume=
nts">Makefile=20
      Arguments</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to specify which makefile to use. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D2=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Goals">Goals</A=
>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to use goal arguments to specify =
which parts=20
      of the makefile to use. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D3=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution">Instead=20
      of Execution</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to use mode flags to specify what =
kind of=20
      thing to do with the recipes in the makefile other than simply =
execute=20
      them. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D4=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Avoiding-Compil=
ation">Avoiding=20
      Compilation</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to avoid recompiling certain =
files. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D5=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Overriding">Ove=
rriding</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to override a variable to specify =
an=20
      alternate compiler and other things. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D6=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Testing">Testin=
g</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to proceed past some errors, to =
test=20
      compilation. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D7=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Summary of Options =
</TD></TR></TBODY></TABLE>
<HR>
<A name=3DMakefile-Arguments></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Goals"=20
rel=3Dnext>Goals</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Running"=20
rel=3Dprev>Running</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Running"=20
rel=3Dup>Running</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DArguments-to-Specify-the-Makefile></A>
<H3 class=3Dsection>9.1 Arguments to Specify the Makefile</H3><A=20
name=3Dindex-_002d_002dfile-1></A><A =
name=3Dindex-_002d_002dmakefile-1></A><A=20
name=3Dindex-_002df-1></A>
<P>The way to specify the name of the makefile is with the =
=E2=80=98<SAMP>-f</SAMP>=E2=80=99 or=20
=E2=80=98<SAMP>--file</SAMP>=E2=80=99 option =
(=E2=80=98<SAMP>--makefile</SAMP>=E2=80=99 also works). For=20
example, =E2=80=98<SAMP>-f altmake</SAMP>=E2=80=99 says to use the file =
<SAMP>altmake</SAMP> as=20
the makefile. </P>
<P>If you use the =E2=80=98<SAMP>-f</SAMP>=E2=80=99 flag several times =
and follow each=20
=E2=80=98<SAMP>-f</SAMP>=E2=80=99 with an argument, all the specified =
files are used jointly as=20
makefiles. </P>
<P>If you do not use the =E2=80=98<SAMP>-f</SAMP>=E2=80=99 or =
=E2=80=98<SAMP>--file</SAMP>=E2=80=99 flag, the=20
default is to try <SAMP>GNUmakefile</SAMP>, <SAMP>makefile</SAMP>, and=20
<SAMP>Makefile</SAMP>, in that order, and use the first of these three =
which=20
exists or can be made (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefiles">Writ=
ing=20
Makefiles</A>). </P>
<HR>
<A name=3DGoals></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution"=20
rel=3Dnext>Instead of Execution</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Argume=
nts"=20
rel=3Dprev>Makefile Arguments</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Running"=20
rel=3Dup>Running</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DArguments-to-Specify-the-Goals></A>
<H3 class=3Dsection>9.2 Arguments to Specify the Goals</H3><A=20
name=3Dindex-goal_002c-how-to-specify></A>
<P>The <EM>goals</EM> are the targets that <CODE>make</CODE> should =
strive=20
ultimately to update. Other targets are updated as well if they appear =
as=20
prerequisites of goals, or prerequisites of prerequisites of goals, etc. =
</P>
<P>By default, the goal is the first target in the makefile (not =
counting=20
targets that start with a period). Therefore, makefiles are usually =
written so=20
that the first target is for compiling the entire program or programs =
they=20
describe. If the first rule in the makefile has several targets, only =
the first=20
target in the rule becomes the default goal, not the whole list. You can =
manage=20
the selection of the default goal from within your makefile using the=20
<CODE>.DEFAULT_GOAL</CODE> variable (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Variabl=
es">Other=20
Special Variables</A>). </P>
<P>You can also specify a different goal or goals with command line =
arguments to=20
<CODE>make</CODE>. Use the name of the goal as an argument. If you =
specify=20
several goals, <CODE>make</CODE> processes each of them in turn, in the =
order=20
you name them. </P>
<P>Any target in the makefile may be specified as a goal (unless it =
starts with=20
=E2=80=98<SAMP>-</SAMP>=E2=80=99 or contains an =
=E2=80=98<SAMP>=3D</SAMP>=E2=80=99, in which case it will be=20
parsed as a switch or variable definition, respectively). Even targets =
not in=20
the makefile may be specified, if <CODE>make</CODE> can find implicit =
rules that=20
say how to make them. </P><A name=3Dindex-MAKECMDGOALS></A>
<P><CODE>Make</CODE> will set the special variable =
<CODE>MAKECMDGOALS</CODE> to=20
the list of goals you specified on the command line. If no goals were =
given on=20
the command line, this variable is empty. Note that this variable should =
be used=20
only in special circumstances. </P>
<P>An example of appropriate use is to avoid including <SAMP>.d</SAMP> =
files=20
during <CODE>clean</CODE> rules (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Prere=
quisites">Automatic=20
Prerequisites</A>), so <CODE>make</CODE> won=E2=80=99t create them only =
to immediately=20
remove them again: </P>
<DIV class=3Dexample><PRE class=3Dexample>sources =3D foo.c bar.c

ifneq ($(MAKECMDGOALS),clean)
include $(sources:.c=3D.d)
endif
</PRE></DIV>
<P>One use of specifying a goal is if you want to compile only a part of =
the=20
program, or only one of several programs. Specify as a goal each file =
that you=20
wish to remake. For example, consider a directory containing several =
programs,=20
with a makefile that starts like this: </P>
<DIV class=3Dexample><PRE class=3Dexample>.PHONY: all
all: size nm ld ar as
</PRE></DIV>
<P>If you are working on the program <CODE>size</CODE>, you might want =
to say=20
=E2=80=98<SAMP>make&nbsp;size</SAMP>=E2=80=99<!-- /@w --> so that only =
the files of that program=20
are recompiled. </P>
<P>Another use of specifying a goal is to make files that are not =
normally made.=20
For example, there may be a file of debugging output, or a version of =
the=20
program that is compiled specially for testing, which has a rule in the =
makefile=20
but is not a prerequisite of the default goal. </P>
<P>Another use of specifying a goal is to run the recipe associated with =
a phony=20
target (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Phony-Targets">=
Phony=20
Targets</A>) or empty target (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Empty-Targets">=
Empty=20
Target Files to Record Events</A>). Many makefiles contain a phony =
target named=20
<SAMP>clean</SAMP> which deletes everything except source files. =
Naturally, this=20
is done only if you request it explicitly with =
=E2=80=98<SAMP>make&nbsp;clean</SAMP>=E2=80=99<!-- /@w -->. Following is =
a list of typical phony=20
and empty target names. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Standard-Target=
s">Standard=20
Targets</A>, for a detailed list of all the standard target names which =
GNU=20
software packages use. </P>
<DL compact>
  <DT><SAMP>all</SAMP></DT>
  <DD><A name=3Dindex-all-_0028standard-target_0029></A>
  <P>Make all the top-level targets the makefile knows about. </P></DD>
  <DT><SAMP>clean</SAMP></DT>
  <DD><A name=3Dindex-clean-_0028standard-target_0029></A>
  <P>Delete all files that are normally created by running =
<CODE>make</CODE>.=20
  </P></DD>
  <DT><SAMP>mostlyclean</SAMP></DT>
  <DD><A name=3Dindex-mostlyclean-_0028standard-target_0029></A>
  <P>Like =E2=80=98<SAMP>clean</SAMP>=E2=80=99, but may refrain from =
deleting a few files that=20
  people normally don=E2=80=99t want to recompile. For example, the=20
  =E2=80=98<SAMP>mostlyclean</SAMP>=E2=80=99 target for GCC does not =
delete=20
  <SAMP>libgcc.a</SAMP>, because recompiling it is rarely necessary and =
takes a=20
  lot of time. </P></DD>
  <DT><SAMP>distclean</SAMP></DT>
  <DD><A name=3Dindex-distclean-_0028standard-target_0029></A></DD>
  <DT><SAMP>realclean</SAMP></DT>
  <DD><A name=3Dindex-realclean-_0028standard-target_0029></A></DD>
  <DT><SAMP>clobber</SAMP></DT>
  <DD><A name=3Dindex-clobber-_0028standard-target_0029></A>
  <P>Any of these targets might be defined to delete <EM>more</EM> files =
than=20
  =E2=80=98<SAMP>clean</SAMP>=E2=80=99 does. For example, this would =
delete configuration files=20
  or links that you would normally create as preparation for =
compilation, even=20
  if the makefile itself cannot create these files. </P></DD>
  <DT><SAMP>install</SAMP></DT>
  <DD><A name=3Dindex-install-_0028standard-target_0029></A>
  <P>Copy the executable file into a directory that users typically =
search for=20
  commands; copy any auxiliary files that the executable uses into the=20
  directories where it will look for them. </P></DD>
  <DT><SAMP>print</SAMP></DT>
  <DD><A name=3Dindex-print-_0028standard-target_0029></A>
  <P>Print listings of the source files that have changed. </P></DD>
  <DT><SAMP>tar</SAMP></DT>
  <DD><A name=3Dindex-tar-_0028standard-target_0029></A>
  <P>Create a tar file of the source files. </P></DD>
  <DT><SAMP>shar</SAMP></DT>
  <DD><A name=3Dindex-shar-_0028standard-target_0029></A>
  <P>Create a shell archive (shar file) of the source files. </P></DD>
  <DT><SAMP>dist</SAMP></DT>
  <DD><A name=3Dindex-dist-_0028standard-target_0029></A>
  <P>Create a distribution file of the source files. This might be a tar =
file,=20
  or a shar file, or a compressed version of one of the above, or even =
more than=20
  one of the above. </P></DD>
  <DT><SAMP>TAGS</SAMP></DT>
  <DD><A name=3Dindex-TAGS-_0028standard-target_0029></A>
  <P>Update a tags table for this program. </P></DD>
  <DT><SAMP>check</SAMP></DT>
  <DD><A name=3Dindex-check-_0028standard-target_0029></A></DD>
  <DT><SAMP>test</SAMP></DT>
  <DD><A name=3Dindex-test-_0028standard-target_0029></A>
  <P>Perform self tests on the program this makefile builds. =
</P></DD></DL>
<HR>
<A name=3DInstead-of-Execution></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Avoiding-Compil=
ation"=20
rel=3Dnext>Avoiding Compilation</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Goals"=20
rel=3Dprev>Goals</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Running"=20
rel=3Dup>Running</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DInstead-of-Executing-Recipes></A>
<H3 class=3Dsection>9.3 Instead of Executing Recipes</H3><A=20
name=3Dindex-execution_002c-instead-of></A><A=20
name=3Dindex-recipes_002c-instead-of-executing></A>
<P>The makefile tells <CODE>make</CODE> how to tell whether a target is =
up to=20
date, and how to update each target. But updating the targets is not =
always what=20
you want. Certain options specify other activities for =
<CODE>make</CODE>. </P>
<DL compact>
  <DT>=E2=80=98<SAMP>-n</SAMP>=E2=80=99</DT>
  <DT>=E2=80=98<SAMP>--just-print</SAMP>=E2=80=99</DT>
  <DT>=E2=80=98<SAMP>--dry-run</SAMP>=E2=80=99</DT>
  <DT>=E2=80=98<SAMP>--recon</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002djust_002dprint-1></A><A=20
  name=3Dindex-_002d_002ddry_002drun-1></A><A =
name=3Dindex-_002d_002drecon-1></A><A=20
  name=3Dindex-_002dn-1></A>
  <P>=E2=80=9CNo-op=E2=80=9D. Causes <CODE>make</CODE> to print the =
recipes that are needed to=20
  make the targets up to date, but not actually execute them. Note that =
some=20
  recipes are still executed, even with this flag (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#MAKE-Variable">=
How the=20
  <CODE>MAKE</CODE> Variable Works</A>). Also any recipes needed to =
update=20
  included makefiles are still executed (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Remaking-Makefi=
les">How=20
  Makefiles Are Remade</A>). </P></DD>
  <DT>=E2=80=98<SAMP>-t</SAMP>=E2=80=99</DT>
  <DT>=E2=80=98<SAMP>--touch</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002dtouch></A><A =
name=3Dindex-touching-files></A><A=20
  name=3Dindex-target_002c-touching></A><A name=3Dindex-_002dt></A>
  <P>=E2=80=9CTouch=E2=80=9D. Marks targets as up to date without =
actually changing them. In=20
  other words, <CODE>make</CODE> pretends to update the targets but does =
not=20
  really change their contents; instead only their modified times are =
updated.=20
  </P></DD>
  <DT>=E2=80=98<SAMP>-q</SAMP>=E2=80=99</DT>
  <DT>=E2=80=98<SAMP>--question</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002dquestion></A><A =
name=3Dindex-_002dq></A><A=20
  name=3Dindex-question-mode></A>
  <P>=E2=80=9CQuestion=E2=80=9D. Silently check whether the targets are =
up to date, but do not=20
  execute recipes; the exit code shows whether any updates are needed. =
</P></DD>
  <DT>=E2=80=98<SAMP>-W <VAR>file</VAR></SAMP>=E2=80=99</DT>
  <DT>=E2=80=98<SAMP>--what-if=3D<VAR>file</VAR></SAMP>=E2=80=99</DT>
  <DT>=E2=80=98<SAMP>--assume-new=3D<VAR>file</VAR></SAMP>=E2=80=99</DT>
  <DT>=E2=80=98<SAMP>--new-file=3D<VAR>file</VAR></SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002dwhat_002dif></A><A =
name=3Dindex-_002dW></A><A=20
  name=3Dindex-_002d_002dassume_002dnew></A><A=20
  name=3Dindex-_002d_002dnew_002dfile></A><A name=3Dindex-what-if></A><A =

  name=3Dindex-files_002c-assuming-new></A>
  <P>=E2=80=9CWhat if=E2=80=9D. Each =E2=80=98<SAMP>-W</SAMP>=E2=80=99 =
flag is followed by a file name. The=20
  given files=E2=80=99 modification times are recorded by =
<CODE>make</CODE> as being the=20
  present time, although the actual modification times remain the same. =
You can=20
  use the =E2=80=98<SAMP>-W</SAMP>=E2=80=99 flag in conjunction with the =
=E2=80=98<SAMP>-n</SAMP>=E2=80=99 flag=20
  to see what would happen if you were to modify specific files. =
</P></DD></DL>
<P>With the =E2=80=98<SAMP>-n</SAMP>=E2=80=99 flag, <CODE>make</CODE> =
prints the recipe that it=20
would normally execute but usually does not execute it. </P>
<P>With the =E2=80=98<SAMP>-t</SAMP>=E2=80=99 flag, <CODE>make</CODE> =
ignores the recipes in the=20
rules and uses (in effect) the command <CODE>touch</CODE> for each =
target that=20
needs to be remade. The <CODE>touch</CODE> command is also printed, =
unless=20
=E2=80=98<SAMP>-s</SAMP>=E2=80=99 or <CODE>.SILENT</CODE> is used. For =
speed, <CODE>make</CODE>=20
does not actually invoke the program <CODE>touch</CODE>. It does the =
work=20
directly. </P>
<P>With the =E2=80=98<SAMP>-q</SAMP>=E2=80=99 flag, <CODE>make</CODE> =
prints nothing and=20
executes no recipes, but the exit status code it returns is zero if and =
only if=20
the targets to be considered are already up to date. If the exit status =
is one,=20
then some updating needs to be done. If <CODE>make</CODE> encounters an =
error,=20
the exit status is two, so you can distinguish an error from a target =
that is=20
not up to date. </P>
<P>It is an error to use more than one of these three flags in the same=20
invocation of <CODE>make</CODE>. </P><A=20
name=3Dindex-_002b_002c-and-recipe-execution></A>
<P>The =E2=80=98<SAMP>-n</SAMP>=E2=80=99, =
=E2=80=98<SAMP>-t</SAMP>=E2=80=99, and =E2=80=98<SAMP>-q</SAMP>=E2=80=99 =
options do=20
not affect recipe lines that begin with =E2=80=98<SAMP>+</SAMP>=E2=80=99 =
characters or contain=20
the strings =E2=80=98<SAMP>$(MAKE)</SAMP>=E2=80=99 or =
=E2=80=98<SAMP>${MAKE}</SAMP>=E2=80=99. Note that only the=20
line containing the =E2=80=98<SAMP>+</SAMP>=E2=80=99 character or the =
strings=20
=E2=80=98<SAMP>$(MAKE)</SAMP>=E2=80=99 or =
=E2=80=98<SAMP>${MAKE}</SAMP>=E2=80=99 is run regardless of these=20
options. Other lines in the same rule are not run unless they too begin =
with=20
=E2=80=98<SAMP>+</SAMP>=E2=80=99 or contain =
=E2=80=98<SAMP>$(MAKE)</SAMP>=E2=80=99 or =
=E2=80=98<SAMP>${MAKE}</SAMP>=E2=80=99=20
(See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#MAKE-Variable">=
How the=20
<CODE>MAKE</CODE> Variable Works</A>.) </P><A=20
name=3Dindex-phony-targets-and-recipe-execution></A>
<P>The =E2=80=98<SAMP>-t</SAMP>=E2=80=99 flag prevents phony targets =
(see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Phony-Targets">=
Phony=20
Targets</A>) from being updated, unless there are recipe lines beginning =
with=20
=E2=80=98<SAMP>+</SAMP>=E2=80=99 or containing =
=E2=80=98<SAMP>$(MAKE)</SAMP>=E2=80=99 or =
=E2=80=98<SAMP>${MAKE}</SAMP>=E2=80=99.=20
</P>
<P>The =E2=80=98<SAMP>-W</SAMP>=E2=80=99 flag provides two features: =
</P>
<UL>
  <LI>If you also use the =E2=80=98<SAMP>-n</SAMP>=E2=80=99 or =
=E2=80=98<SAMP>-q</SAMP>=E2=80=99 flag, you can=20
  see what <CODE>make</CODE> would do if you were to modify some files. =
</LI>
  <LI>Without the =E2=80=98<SAMP>-n</SAMP>=E2=80=99 or =
=E2=80=98<SAMP>-q</SAMP>=E2=80=99 flag, when=20
  <CODE>make</CODE> is actually executing recipes, the =
=E2=80=98<SAMP>-W</SAMP>=E2=80=99 flag=20
  can direct <CODE>make</CODE> to act as if some files had been =
modified,=20
  without actually running the recipes for those files. </LI></UL>
<P>Note that the options =E2=80=98<SAMP>-p</SAMP>=E2=80=99 and =
=E2=80=98<SAMP>-v</SAMP>=E2=80=99 allow you to=20
obtain other information about <CODE>make</CODE> or about the makefiles =
in use=20
(see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Summary=20
of Options</A>). </P>
<HR>
<A name=3DAvoiding-Compilation></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Overriding"=20
rel=3Dnext>Overriding</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution"=20
rel=3Dprev>Instead of Execution</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Running"=20
rel=3Dup>Running</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DAvoiding-Recompilation-of-Some-Files></A>
<H3 class=3Dsection>9.4 Avoiding Recompilation of Some Files</H3><A=20
name=3Dindex-_002do></A><A name=3Dindex-_002d_002dold_002dfile></A><A=20
name=3Dindex-_002d_002dassume_002dold></A><A=20
name=3Dindex-files_002c-assuming-old></A><A=20
name=3Dindex-files_002c-avoiding-recompilation-of></A><A=20
name=3Dindex-recompilation_002c-avoiding></A>
<P>Sometimes you may have changed a source file but you do not want to =
recompile=20
all the files that depend on it. For example, suppose you add a macro or =
a=20
declaration to a header file that many other files depend on. Being=20
conservative, <CODE>make</CODE> assumes that any change in the header =
file=20
requires recompilation of all dependent files, but you know that they do =
not=20
need to be recompiled and you would rather not waste the time waiting =
for them=20
to compile. </P>
<P>If you anticipate the problem before changing the header file, you =
can use=20
the =E2=80=98<SAMP>-t</SAMP>=E2=80=99 flag. This flag tells =
<CODE>make</CODE> not to run the=20
recipes in the rules, but rather to mark the target up to date by =
changing its=20
last-modification date. You would follow this procedure: </P>
<OL>
  <LI>Use the command =E2=80=98<SAMP>make</SAMP>=E2=80=99 to recompile =
the source files that=20
  really need recompilation, ensuring that the object files are =
up-to-date=20
  before you begin. </LI>
  <LI>Make the changes in the header files. </LI>
  <LI>Use the command =E2=80=98<SAMP>make -t</SAMP>=E2=80=99 to mark all =
the object files as up=20
  to date. The next time you run <CODE>make</CODE>, the changes in the =
header=20
  files will not cause any recompilation. </LI></OL>
<P>If you have already changed the header file at a time when some files =
do need=20
recompilation, it is too late to do this. Instead, you can use the =
=E2=80=98<SAMP><SPAN=20
class=3Dnolinebreak>-o</SPAN>&nbsp;<VAR>file</VAR></SAMP>=E2=80=99<!-- =
/@w --> flag, which=20
marks a specified file as =E2=80=9Cold=E2=80=9D (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Summary=20
of Options</A>). This means that the file itself will not be remade, and =
nothing=20
else will be remade on its account. Follow this procedure: </P>
<OL>
  <LI>Recompile the source files that need compilation for reasons =
independent=20
  of the particular header file, with =E2=80=98<SAMP>make -o=20
  <VAR>headerfile</VAR></SAMP>=E2=80=99. If several header files are =
involved, use a=20
  separate =E2=80=98<SAMP>-o</SAMP>=E2=80=99 option for each header =
file. </LI>
  <LI>Touch all the object files with =E2=80=98<SAMP>make =
-t</SAMP>=E2=80=99. </LI></OL>
<HR>
<A name=3DOverriding></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Testing"=20
rel=3Dnext>Testing</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Avoiding-Compil=
ation"=20
rel=3Dprev>Avoiding Compilation</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Running"=20
rel=3Dup>Running</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DOverriding-Variables></A>
<H3 class=3Dsection>9.5 Overriding Variables</H3><A=20
name=3Dindex-overriding-variables-with-arguments></A><A=20
name=3Dindex-variables_002c-overriding-with-arguments></A><A=20
name=3Dindex-command-line-variables></A><A=20
name=3Dindex-variables_002c-command-line></A>
<P>An argument that contains =E2=80=98<SAMP>=3D</SAMP>=E2=80=99 =
specifies the value of a variable:=20
=E2=80=98<SAMP><VAR>v</VAR>=3D<VAR>x</VAR></SAMP>=E2=80=99 sets the =
value of the variable=20
<VAR>v</VAR> to <VAR>x</VAR>. If you specify a value in this way, all =
ordinary=20
assignments of the same variable in the makefile are ignored; we say =
they have=20
been <EM>overridden</EM> by the command line argument. </P>
<P>The most common way to use this facility is to pass extra flags to =
compilers.=20
For example, in a properly written makefile, the variable =
<CODE>CFLAGS</CODE> is=20
included in each recipe that runs the C compiler, so a file =
<SAMP>foo.c</SAMP>=20
would be compiled something like this: </P>
<DIV class=3Dexample><PRE class=3Dexample>cc -c $(CFLAGS) foo.c
</PRE></DIV>
<P>Thus, whatever value you set for <CODE>CFLAGS</CODE> affects each =
compilation=20
that occurs. The makefile probably specifies the usual value for=20
<CODE>CFLAGS</CODE>, like this: </P>
<DIV class=3Dexample><PRE class=3Dexample>CFLAGS=3D-g
</PRE></DIV>
<P>Each time you run <CODE>make</CODE>, you can override this value if =
you wish.=20
For example, if you say =E2=80=98<SAMP>make CFLAGS=3D'-g =
-O'</SAMP>=E2=80=99, each C compilation=20
will be done with =E2=80=98<SAMP>cc -c -g -O</SAMP>=E2=80=99. (This also =
illustrates how you can=20
use quoting in the shell to enclose spaces and other special characters =
in the=20
value of a variable when you override it.) </P>
<P>The variable <CODE>CFLAGS</CODE> is only one of many standard =
variables that=20
exist just so that you can change them this way. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Variables=20
Used by Implicit Rules</A>, for a complete list. </P>
<P>You can also program the makefile to look at additional variables of =
your=20
own, giving the user the ability to control other aspects of how the =
makefile=20
works by changing the variables. </P>
<P>When you override a variable with a command line argument, you can =
define=20
either a recursively-expanded variable or a simply-expanded variable. =
The=20
examples shown above make a recursively-expanded variable; to make a=20
simply-expanded variable, write =E2=80=98<SAMP>:=3D</SAMP>=E2=80=99 or =
=E2=80=98<SAMP>::=3D</SAMP>=E2=80=99 instead=20
of =E2=80=98<SAMP>=3D</SAMP>=E2=80=99. But, unless you want to include a =
variable reference or=20
function call in the <EM>value</EM> that you specify, it makes no =
difference=20
which kind of variable you create. </P>
<P>There is one way that the makefile can change a variable that you =
have=20
overridden. This is to use the <CODE>override</CODE> directive, which is =
a line=20
that looks like this: =E2=80=98<SAMP>override <VAR>variable</VAR> =3D=20
<VAR>value</VAR></SAMP>=E2=80=99 (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Override-Direct=
ive">The=20
<CODE>override</CODE> Directive</A>). </P>
<HR>
<A name=3DTesting></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
"=20
rel=3Dnext>Options Summary</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Overriding"=20
rel=3Dprev>Overriding</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Running"=20
rel=3Dup>Running</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DTesting-the-Compilation-of-a-Program></A>
<H3 class=3Dsection>9.6 Testing the Compilation of a Program</H3><A=20
name=3Dindex-testing-compilation></A><A =
name=3Dindex-compilation_002c-testing></A>
<P>Normally, when an error happens in executing a shell command,=20
<CODE>make</CODE> gives up immediately, returning a nonzero status. No =
further=20
recipes are executed for any target. The error implies that the goal =
cannot be=20
correctly remade, and <CODE>make</CODE> reports this as soon as it =
knows. </P>
<P>When you are compiling a program that you have just changed, this is =
not what=20
you want. Instead, you would rather that <CODE>make</CODE> try compiling =
every=20
file that can be tried, to show you as many compilation errors as =
possible.=20
</P><A name=3Dindex-_002dk-1></A><A =
name=3Dindex-_002d_002dkeep_002dgoing-1></A>
<P>On these occasions, you should use the =
=E2=80=98<SAMP>-k</SAMP>=E2=80=99 or=20
=E2=80=98<SAMP>--keep-going</SAMP>=E2=80=99 flag. This tells =
<CODE>make</CODE> to continue to=20
consider the other prerequisites of the pending targets, remaking them =
if=20
necessary, before it gives up and returns nonzero status. For example, =
after an=20
error in compiling one object file, =E2=80=98<SAMP>make =
-k</SAMP>=E2=80=99 will continue=20
compiling other object files even though it already knows that linking =
them will=20
be impossible. In addition to continuing after failed shell commands,=20
=E2=80=98<SAMP>make -k</SAMP>=E2=80=99 will continue as much as possible =
after discovering that=20
it does not know how to make a target or prerequisite file. This will =
always=20
cause an error message, but without =E2=80=98<SAMP>-k</SAMP>=E2=80=99, =
it is a fatal error (see=20
<A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Summary=20
of Options</A>). </P>
<P>The usual behavior of <CODE>make</CODE> assumes that your purpose is =
to get=20
the goals up to date; once <CODE>make</CODE> learns that this is =
impossible, it=20
might as well report the failure immediately. The =
=E2=80=98<SAMP>-k</SAMP>=E2=80=99 flag says=20
that the real purpose is to test as much as possible of the changes made =
in the=20
program, perhaps to find several independent problems so that you can =
correct=20
them all before the next attempt to compile. This is why Emacs=E2=80=99 =
<KBD>M-x=20
compile</KBD> command passes the =E2=80=98<SAMP>-k</SAMP>=E2=80=99 flag =
by default. </P>
<HR>
<A name=3DOptions-Summary></A>
<DIV class=3Dheader>
<P>Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Testing"=20
rel=3Dprev>Testing</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Running"=20
rel=3Dup>Running</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DSummary-of-Options></A>
<H3 class=3Dsection>9.7 Summary of Options</H3><A =
name=3Dindex-options></A><A=20
name=3Dindex-flags></A><A name=3Dindex-switches></A>
<P>Here is a table of all the options <CODE>make</CODE> understands: =
</P>
<DL compact>
  <DT>=E2=80=98<SAMP>-b</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002db></A></DD>
  <DT>=E2=80=98<SAMP>-m</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002dm></A>
  <P>These options are ignored for compatibility with other versions of=20
  <CODE>make</CODE>. </P></DD>
  <DT>=E2=80=98<SAMP>-B</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002dB></A></DD>
  <DT>=E2=80=98<SAMP>--always-make</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002dalways_002dmake></A>
  <P>Consider all targets out-of-date. GNU <CODE>make</CODE> proceeds to =

  consider targets and their prerequisites using the normal algorithms; =
however,=20
  all targets so considered are always remade regardless of the status =
of their=20
  prerequisites. To avoid infinite recursion, if =
<CODE>MAKE_RESTARTS</CODE> (see=20
  <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Variabl=
es">Other=20
  Special Variables</A>) is set to a number greater than 0 this option =
is=20
  disabled when considering whether to remake makefiles (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Remaking-Makefi=
les">How=20
  Makefiles Are Remade</A>). </P></DD>
  <DT>=E2=80=98<SAMP>-C <VAR>dir</VAR></SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002dC-1></A></DD>
  <DT>=E2=80=98<SAMP>--directory=3D<VAR>dir</VAR></SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002ddirectory-1></A>
  <P>Change to directory <VAR>dir</VAR> before reading the makefiles. If =

  multiple =E2=80=98<SAMP>-C</SAMP>=E2=80=99 options are specified, each =
is interpreted relative=20
  to the previous one: =E2=80=98<SAMP>-C / -C etc</SAMP>=E2=80=99 is =
equivalent to =E2=80=98<SAMP>-C=20
  /etc</SAMP>=E2=80=99. This is typically used with recursive =
invocations of=20
  <CODE>make</CODE> (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Recursion">Recu=
rsive=20
  Use of <CODE>make</CODE></A>). </P></DD>
  <DT>=E2=80=98<SAMP>-d</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002dd></A>
  <P>Print debugging information in addition to normal processing. The =
debugging=20
  information says which files are being considered for remaking, which=20
  file-times are being compared and with what results, which files =
actually need=20
  to be remade, which implicit rules are considered and which are=20
  applied=E2=80=94everything interesting about how <CODE>make</CODE> =
decides what to do.=20
  The <CODE>-d</CODE> option is equivalent to =
=E2=80=98<SAMP>--debug=3Da</SAMP>=E2=80=99 (see=20
  below). </P></DD>
  <DT>=E2=80=98<SAMP>--debug[=3D<VAR>options</VAR>]</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002ddebug></A>
  <P>Print debugging information in addition to normal processing. =
Various=20
  levels and types of output can be chosen. With no arguments, print the =
=E2=80=9Cbasic=E2=80=9D=20
  level of debugging. Possible arguments are below; only the first =
character is=20
  considered, and values must be comma- or space-separated. </P>
  <DL compact>
    <DT><CODE>a (<I>all</I>)</CODE></DT>
    <DD>
    <P>All types of debugging output are enabled. This is equivalent to =
using=20
    =E2=80=98<SAMP>-d</SAMP>=E2=80=99. </P></DD>
    <DT><CODE>b (<I>basic</I>)</CODE></DT>
    <DD>
    <P>Basic debugging prints each target that was found to be =
out-of-date, and=20
    whether the build was successful or not. </P></DD>
    <DT><CODE>v (<I>verbose</I>)</CODE></DT>
    <DD>
    <P>A level above =E2=80=98<SAMP>basic</SAMP>=E2=80=99; includes =
messages about which=20
    makefiles were parsed, prerequisites that did not need to be =
rebuilt, etc.=20
    This option also enables =E2=80=98<SAMP>basic</SAMP>=E2=80=99 =
messages. </P></DD>
    <DT><CODE>i (<I>implicit</I>)</CODE></DT>
    <DD>
    <P>Prints messages describing the implicit rule searches for each =
target.=20
    This option also enables =E2=80=98<SAMP>basic</SAMP>=E2=80=99 =
messages. </P></DD>
    <DT><CODE>j (<I>jobs</I>)</CODE></DT>
    <DD>
    <P>Prints messages giving details on the invocation of specific=20
    sub-commands. </P></DD>
    <DT><CODE>m (<I>makefile</I>)</CODE></DT>
    <DD>
    <P>By default, the above messages are not enabled while trying to =
remake the=20
    makefiles. This option enables messages while rebuilding makefiles, =
too.=20
    Note that the =E2=80=98<SAMP>all</SAMP>=E2=80=99 option does enable =
this option. This option=20
    also enables =E2=80=98<SAMP>basic</SAMP>=E2=80=99 messages. =
</P></DD>
    <DT><CODE>n (<I>none</I>)</CODE></DT>
    <DD>
    <P>Disable all debugging currently enabled. If additional debugging =
flags=20
    are encountered after this they will still take effect. =
</P></DD></DL></DD>
  <DT>=E2=80=98<SAMP>-e</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002de></A></DD>
  <DT>=E2=80=98<SAMP>--environment-overrides</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002denvironment_002doverrides></A>
  <P>Give variables taken from the environment precedence over variables =
from=20
  makefiles. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Environment">Va=
riables=20
  from the Environment</A>. </P></DD>
  <DT>=E2=80=98<SAMP>--eval=3D<VAR>string</VAR></SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002deval></A>
  <P>Evaluate <VAR>string</VAR> as makefile syntax. This is a =
command-line=20
  version of the <CODE>eval</CODE> function (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Eval-Function">=
Eval=20
  Function</A>). The evaluation is performed after the default rules and =

  variables have been defined, but before any makefiles are read. =
</P></DD>
  <DT>=E2=80=98<SAMP>-f <VAR>file</VAR></SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002df-2></A></DD>
  <DT>=E2=80=98<SAMP>--file=3D<VAR>file</VAR></SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002dfile-2></A></DD>
  <DT>=E2=80=98<SAMP>--makefile=3D<VAR>file</VAR></SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002dmakefile-2></A>
  <P>Read the file named <VAR>file</VAR> as a makefile. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefiles">Writ=
ing=20
  Makefiles</A>. </P></DD>
  <DT>=E2=80=98<SAMP>-h</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002dh></A></DD>
  <DT>=E2=80=98<SAMP>--help</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002dhelp></A>
  <P>Remind you of the options that <CODE>make</CODE> understands and =
then exit.=20
  </P></DD>
  <DT>=E2=80=98<SAMP>-i</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002di-1></A></DD>
  <DT>=E2=80=98<SAMP>--ignore-errors</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002dignore_002derrors-1></A>
  <P>Ignore all errors in recipes executed to remake files. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Errors">Errors =
in=20
  Recipes</A>. </P></DD>
  <DT>=E2=80=98<SAMP>-I <VAR>dir</VAR></SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002dI-1></A></DD>
  <DT>=E2=80=98<SAMP>--include-dir=3D<VAR>dir</VAR></SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002dinclude_002ddir-1></A>
  <P>Specifies a directory <VAR>dir</VAR> to search for included =
makefiles. See=20
  <A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Include">Includ=
ing=20
  Other Makefiles</A>. If several =E2=80=98<SAMP>-I</SAMP>=E2=80=99 =
options are used to specify=20
  several directories, the directories are searched in the order =
specified.=20
  </P></DD>
  <DT>=E2=80=98<SAMP>-j [<VAR>jobs</VAR>]</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002dj-1></A></DD>
  <DT>=E2=80=98<SAMP>--jobs[=3D<VAR>jobs</VAR>]</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002djobs-1></A>
  <P>Specifies the number of recipes (jobs) to run simultaneously. With =
no=20
  argument, <CODE>make</CODE> runs as many recipes simultaneously as =
possible.=20
  If there is more than one =E2=80=98<SAMP>-j</SAMP>=E2=80=99 option, =
the last one is effective.=20
  See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel">Paral=
lel=20
  Execution</A>, for more information on how recipes are run. Note that =
this=20
  option is ignored on MS-DOS. </P></DD>
  <DT>=E2=80=98<SAMP>-k</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002dk-2></A></DD>
  <DT>=E2=80=98<SAMP>--keep-going</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002dkeep_002dgoing-2></A>
  <P>Continue as much as possible after an error. While the target that =
failed,=20
  and those that depend on it, cannot be remade, the other prerequisites =
of=20
  these targets can be processed all the same. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Testing">Testin=
g the=20
  Compilation of a Program</A>. </P></DD>
  <DT>=E2=80=98<SAMP>-l [<VAR>load</VAR>]</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002dl></A></DD>
  =
<DT>=E2=80=98<SAMP>--load-average[=3D<VAR>load</VAR>]</SAMP>=E2=80=99</DT=
>
  <DD><A name=3Dindex-_002d_002dload_002daverage-1></A></DD>
  <DT>=E2=80=98<SAMP>--max-load[=3D<VAR>load</VAR>]</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002dmax_002dload-1></A>
  <P>Specifies that no new recipes should be started if there are other =
recipes=20
  running and the load average is at least <VAR>load</VAR> (a =
floating-point=20
  number). With no argument, removes a previous load limit. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel">Paral=
lel=20
  Execution</A>. </P></DD>
  <DT>=E2=80=98<SAMP>-L</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002dL></A></DD>
  <DT>=E2=80=98<SAMP>--check-symlink-times</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002dcheck_002dsymlink_002dtimes></A>
  <P>On systems that support symbolic links, this option causes=20
  <CODE>make</CODE> to consider the timestamps on any symbolic links in =
addition=20
  to the timestamp on the file referenced by those links. When this =
option is=20
  provided, the most recent timestamp among the file and the symbolic =
links is=20
  taken as the modification time for this target file. </P></DD>
  <DT>=E2=80=98<SAMP>-n</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002dn-2></A></DD>
  <DT>=E2=80=98<SAMP>--just-print</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002djust_002dprint-2></A></DD>
  <DT>=E2=80=98<SAMP>--dry-run</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002ddry_002drun-2></A></DD>
  <DT>=E2=80=98<SAMP>--recon</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002drecon-2></A>
  <P>Print the recipe that would be executed, but do not execute it =
(except in=20
  certain circumstances). See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution">Instead=20
  of Executing Recipes</A>. </P></DD>
  <DT>=E2=80=98<SAMP>-o <VAR>file</VAR></SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002do-1></A></DD>
  <DT>=E2=80=98<SAMP>--old-file=3D<VAR>file</VAR></SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002dold_002dfile-1></A></DD>
  <DT>=E2=80=98<SAMP>--assume-old=3D<VAR>file</VAR></SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002dassume_002dold-1></A>
  <P>Do not remake the file <VAR>file</VAR> even if it is older than its =

  prerequisites, and do not remake anything on account of changes in=20
  <VAR>file</VAR>. Essentially the file is treated as very old and its =
rules are=20
  ignored. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Avoiding-Compil=
ation">Avoiding=20
  Recompilation of Some Files</A>. </P></DD>
  <DT>=E2=80=98<SAMP>-O[<VAR>type</VAR>]</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002dO-1></A></DD>
  =
<DT>=E2=80=98<SAMP>--output-sync[=3D<VAR>type</VAR>]</SAMP>=E2=80=99</DT>=

  <DD><A name=3Dindex-_002d_002doutput_002dsync-1></A><A=20
  name=3Dindex-output-during-parallel-execution-1></A><A=20
  name=3Dindex-parallel-execution_002c-output-during-1></A>
  <P>Ensure that the complete output from each recipe is printed in one=20
  uninterrupted sequence. This option is only useful when using the=20
  <CODE>--jobs</CODE> option to run multiple recipes simultaneously (see =
<A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel">Paral=
lel=20
  Execution</A>) Without this option output will be displayed as it is =
generated=20
  by the recipes. </P>
  <P>With no type or the type =E2=80=98<SAMP>target</SAMP>=E2=80=99, =
output from the entire=20
  recipe of each target is grouped together. With the type =
=E2=80=98<SAMP>line</SAMP>=E2=80=99,=20
  output from each line in the recipe is grouped together. With the type =

  =E2=80=98<SAMP>recurse</SAMP>=E2=80=99, the output from an entire =
recursive make is grouped=20
  together. With the type =E2=80=98<SAMP>none</SAMP>=E2=80=99, no output =
synchronization is=20
  performed. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel-Output=
">Output=20
  During Parallel Execution</A>. </P></DD>
  <DT>=E2=80=98<SAMP>-p</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002dp></A></DD>
  <DT>=E2=80=98<SAMP>--print-data-base</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002dprint_002ddata_002dbase></A><A=20
  name=3Dindex-data-base-of-make-rules></A><A=20
  name=3Dindex-predefined-rules-and-variables_002c-printing></A>
  <P>Print the data base (rules and variable values) that results from =
reading=20
  the makefiles; then execute as usual or as otherwise specified. This =
also=20
  prints the version information given by the =
=E2=80=98<SAMP>-v</SAMP>=E2=80=99 switch (see=20
  below). To print the data base without trying to remake any files, use =

  =E2=80=98<SAMP>make&nbsp;<SPAN =
class=3Dnolinebreak>-qp</SPAN></SAMP>=E2=80=99<!-- /@w -->. To=20
  print the data base of predefined rules and variables, use=20
  =E2=80=98<SAMP>make&nbsp;<SPAN =
class=3Dnolinebreak>-p</SPAN>&nbsp;<SPAN=20
  class=3Dnolinebreak>-f</SPAN>&nbsp;/dev/null</SAMP>=E2=80=99<!-- /@w =
-->. The data base=20
  output contains file name and line number information for recipe and =
variable=20
  definitions, so it can be a useful debugging tool in complex =
environments.=20
  </P></DD>
  <DT>=E2=80=98<SAMP>-q</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002dq-1></A></DD>
  <DT>=E2=80=98<SAMP>--question</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002dquestion-1></A>
  <P>=E2=80=9CQuestion mode=E2=80=9D. Do not run any recipes, or print =
anything; just return an=20
  exit status that is zero if the specified targets are already up to =
date, one=20
  if any remaking is required, or two if an error is encountered. See <A =

  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution">Instead=20
  of Executing Recipes</A>. </P></DD>
  <DT>=E2=80=98<SAMP>-r</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002dr></A></DD>
  <DT>=E2=80=98<SAMP>--no-builtin-rules</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002dno_002dbuiltin_002drules></A>
  <P>Eliminate use of the built-in implicit rules (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rules"=
>Using=20
  Implicit Rules</A>). You can still define your own by writing pattern =
rules=20
  (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Rules">=
Defining=20
  and Redefining Pattern Rules</A>). The =
=E2=80=98<SAMP>-r</SAMP>=E2=80=99 option also clears=20
  out the default list of suffixes for suffix rules (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Suffix-Rules">O=
ld-Fashioned=20
  Suffix Rules</A>). But you can still define your own suffixes with a =
rule for=20
  <CODE>.SUFFIXES</CODE>, and then define your own suffix rules. Note =
that only=20
  <EM>rules</EM> are affected by the <CODE>-r</CODE> option; default =
variables=20
  remain in effect (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Variables=20
  Used by Implicit Rules</A>); see the =E2=80=98<SAMP>-R</SAMP>=E2=80=99 =
option below. </P></DD>
  <DT>=E2=80=98<SAMP>-R</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002dR></A></DD>
  <DT>=E2=80=98<SAMP>--no-builtin-variables</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002dno_002dbuiltin_002dvariables></A>
  <P>Eliminate use of the built-in rule-specific variables (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Variables=20
  Used by Implicit Rules</A>). You can still define your own, of course. =
The=20
  =E2=80=98<SAMP>-R</SAMP>=E2=80=99 option also automatically enables =
the =E2=80=98<SAMP>-r</SAMP>=E2=80=99=20
  option (see above), since it doesn=E2=80=99t make sense to have =
implicit rules without=20
  any definitions for the variables that they use. </P></DD>
  <DT>=E2=80=98<SAMP>-s</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002ds-1></A></DD>
  <DT>=E2=80=98<SAMP>--silent</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002dsilent-1></A></DD>
  <DT>=E2=80=98<SAMP>--quiet</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002dquiet-1></A>
  <P>Silent operation; do not print the recipes as they are executed. =
See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Echoing">Recipe=
=20
  Echoing</A>. </P></DD>
  <DT>=E2=80=98<SAMP>-S</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002dS></A></DD>
  <DT>=E2=80=98<SAMP>--no-keep-going</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002dno_002dkeep_002dgoing></A></DD>
  <DT>=E2=80=98<SAMP>--stop</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002dstop></A>
  <P>Cancel the effect of the =E2=80=98<SAMP>-k</SAMP>=E2=80=99 option. =
This is never necessary=20
  except in a recursive <CODE>make</CODE> where =
=E2=80=98<SAMP>-k</SAMP>=E2=80=99 might be=20
  inherited from the top-level <CODE>make</CODE> via =
<CODE>MAKEFLAGS</CODE> (see=20
  <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Recursion">Recu=
rsive=20
  Use of <CODE>make</CODE></A>) or if you set =
=E2=80=98<SAMP>-k</SAMP>=E2=80=99 in=20
  <CODE>MAKEFLAGS</CODE> in your environment. </P></DD>
  <DT>=E2=80=98<SAMP>-t</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002dt-1></A></DD>
  <DT>=E2=80=98<SAMP>--touch</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002dtouch-1></A>
  <P>Touch files (mark them up to date without really changing them) =
instead of=20
  running their recipes. This is used to pretend that the recipes were =
done, in=20
  order to fool future invocations of <CODE>make</CODE>. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution">Instead=20
  of Executing Recipes</A>. </P></DD>
  <DT>=E2=80=98<SAMP>--trace</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002dtrace></A>
  <P>Show tracing information for <CODE>make</CODE> execution. Prints =
the entire=20
  recipe to be executed, even for recipes that are normally silent (due =
to=20
  <CODE>.SILENT</CODE> or =E2=80=98<SAMP>@</SAMP>=E2=80=99). Also prints =
the makefile name and=20
  line number where the recipe was defined, and information on why the =
target is=20
  being rebuilt. </P></DD>
  <DT>=E2=80=98<SAMP>-v</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002dv></A></DD>
  <DT>=E2=80=98<SAMP>--version</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002dversion></A>
  <P>Print the version of the <CODE>make</CODE> program plus a =
copyright, a list=20
  of authors, and a notice that there is no warranty; then exit. =
</P></DD>
  <DT>=E2=80=98<SAMP>-w</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002dw></A></DD>
  <DT>=E2=80=98<SAMP>--print-directory</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002dprint_002ddirectory></A>
  <P>Print a message containing the working directory both before and =
after=20
  executing the makefile. This may be useful for tracking down errors =
from=20
  complicated nests of recursive <CODE>make</CODE> commands. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Recursion">Recu=
rsive=20
  Use of <CODE>make</CODE></A>. (In practice, you rarely need to specify =
this=20
  option since =E2=80=98<SAMP>make</SAMP>=E2=80=99 does it for you; see =
<A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#g_t_002dw-Optio=
n">The=20
  =E2=80=98<SAMP>--print-directory</SAMP>=E2=80=99 Option</A>.) =
</P></DD>
  <DT>=E2=80=98<SAMP>--no-print-directory</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002dno_002dprint_002ddirectory-1></A>
  <P>Disable printing of the working directory under <CODE>-w</CODE>. =
This=20
  option is useful when <CODE>-w</CODE> is turned on automatically, but =
you do=20
  not want to see the extra messages. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#g_t_002dw-Optio=
n">The=20
  =E2=80=98<SAMP>--print-directory</SAMP>=E2=80=99 Option</A>. </P></DD>
  <DT>=E2=80=98<SAMP>-W <VAR>file</VAR></SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002dW-1></A></DD>
  <DT>=E2=80=98<SAMP>--what-if=3D<VAR>file</VAR></SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002dwhat_002dif-1></A></DD>
  <DT>=E2=80=98<SAMP>--new-file=3D<VAR>file</VAR></SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002dnew_002dfile-1></A></DD>
  <DT>=E2=80=98<SAMP>--assume-new=3D<VAR>file</VAR></SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002dassume_002dnew-1></A>
  <P>Pretend that the target <VAR>file</VAR> has just been modified. =
When used=20
  with the =E2=80=98<SAMP>-n</SAMP>=E2=80=99 flag, this shows you what =
would happen if you were=20
  to modify that file. Without =E2=80=98<SAMP>-n</SAMP>=E2=80=99, it is =
almost the same as=20
  running a <CODE>touch</CODE> command on the given file before running=20
  <CODE>make</CODE>, except that the modification time is changed only =
in the=20
  imagination of <CODE>make</CODE>. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution">Instead=20
  of Executing Recipes</A>. </P></DD>
  <DT>=E2=80=98<SAMP>--warn-undefined-variables</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_002d_002dwarn_002dundefined_002dvariables></A><A=20
  name=3Dindex-variables_002c-warning-for-undefined></A><A=20
  name=3Dindex-undefined-variables_002c-warning-message></A>
  <P>Issue a warning message whenever <CODE>make</CODE> sees a reference =
to an=20
  undefined variable. This can be helpful when you are trying to debug =
makefiles=20
  which use variables in complex ways. </P></DD></DL>
<HR>
<A name=3DImplicit-Rules></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Archives"=20
rel=3Dnext>Archives</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Running"=20
rel=3Dprev>Running</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Top" =
rel=3Dup>Top</A>=20
&nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DUsing-Implicit-Rules></A>
<H2 class=3Dchapter>10 Using Implicit Rules</H2><A =
name=3Dindex-implicit-rule></A><A=20
name=3Dindex-rule_002c-implicit></A>
<P>Certain standard ways of remaking target files are used very often. =
For=20
example, one customary way to make an object file is from a C source =
file using=20
the C compiler, <CODE>cc</CODE>. </P>
<P><EM>Implicit rules</EM> tell <CODE>make</CODE> how to use customary=20
techniques so that you do not have to specify them in detail when you =
want to=20
use them. For example, there is an implicit rule for C compilation. File =
names=20
determine which implicit rules are run. For example, C compilation =
typically=20
takes a <SAMP>.c</SAMP> file and makes a <SAMP>.o</SAMP> file. So=20
<CODE>make</CODE> applies the implicit rule for C compilation when it =
sees this=20
combination of file name endings. </P>
<P>A chain of implicit rules can apply in sequence; for example,=20
<CODE>make</CODE> will remake a <SAMP>.o</SAMP> file from a =
<SAMP>.y</SAMP> file=20
by way of a <SAMP>.c</SAMP> file. </P>
<P>The built-in implicit rules use several variables in their recipes so =
that,=20
by changing the values of the variables, you can change the way the =
implicit=20
rule works. For example, the variable <CODE>CFLAGS</CODE> controls the =
flags=20
given to the C compiler by the implicit rule for C compilation. </P>
<P>You can define your own implicit rules by writing <EM>pattern =
rules</EM>.=20
</P>
<P><EM>Suffix rules</EM> are a more limited way to define implicit =
rules.=20
Pattern rules are more general and clearer, but suffix rules are =
retained for=20
compatibility. </P>
<TABLE class=3Dmenu border=3D0 cellSpacing=3D0>
  <TBODY>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D1=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Using-Implicit"=
>Using=20
      Implicit</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to use an existing implicit rule =
to get the=20
      recipes for updating a file. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D2=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>A list of built-in rules. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D3=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to change what predefined rules =
do. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D4=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Chained-Rules">=
Chained=20
      Rules</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to use a chain of implicit rules. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D5=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Rules">=
Pattern=20
      Rules</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to define new implicit rules. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D6=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Last-Resort">La=
st=20
      Resort</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to define a recipe for rules which =
cannot=20
      find any. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D7=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Suffix-Rules">S=
uffix=20
      Rules</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>The old-fashioned style of implicit =
rule. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D8=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rule-S=
earch">Implicit=20
      Rule Search</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>The precise algorithm for applying =
implicit=20
      rules. </TD></TR></TBODY></TABLE>
<HR>
<A name=3DUsing-Implicit></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les"=20
rel=3Dnext>Catalogue of Rules</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rules"=
=20
rel=3Dprev>Implicit Rules</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rules"=
=20
rel=3Dup>Implicit Rules</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DUsing-Implicit-Rules-1></A>
<H3 class=3Dsection>10.1 Using Implicit Rules</H3><A=20
name=3Dindex-implicit-rule_002c-how-to-use></A><A=20
name=3Dindex-rule_002c-implicit_002c-how-to-use></A>
<P>To allow <CODE>make</CODE> to find a customary method for updating a =
target=20
file, all you have to do is refrain from specifying recipes yourself. =
Either=20
write a rule with no recipe, or don=E2=80=99t write a rule at all. Then=20
<CODE>make</CODE> will figure out which implicit rule to use based on =
which kind=20
of source file exists or can be made. </P>
<P>For example, suppose the makefile looks like this: </P>
<DIV class=3Dexample><PRE class=3Dexample>foo : foo.o bar.o
        cc -o foo foo.o bar.o $(CFLAGS) $(LDFLAGS)
</PRE></DIV>
<P>Because you mention <SAMP>foo.o</SAMP> but do not give a rule for it, =

<CODE>make</CODE> will automatically look for an implicit rule that =
tells how to=20
update it. This happens whether or not the file <SAMP>foo.o</SAMP> =
currently=20
exists. </P>
<P>If an implicit rule is found, it can supply both a recipe and one or =
more=20
prerequisites (the source files). You would want to write a rule for=20
<SAMP>foo.o</SAMP> with no recipe if you need to specify additional=20
prerequisites, such as header files, that the implicit rule cannot =
supply. </P>
<P>Each implicit rule has a target pattern and prerequisite patterns. =
There may=20
be many implicit rules with the same target pattern. For example, =
numerous rules=20
make =E2=80=98<SAMP>.o</SAMP>=E2=80=99 files: one, from a =
=E2=80=98<SAMP>.c</SAMP>=E2=80=99 file with the C=20
compiler; another, from a =E2=80=98<SAMP>.p</SAMP>=E2=80=99 file with =
the Pascal compiler; and=20
so on. The rule that actually applies is the one whose prerequisites =
exist or=20
can be made. So, if you have a file <SAMP>foo.c</SAMP>, =
<CODE>make</CODE> will=20
run the C compiler; otherwise, if you have a file <SAMP>foo.p</SAMP>,=20
<CODE>make</CODE> will run the Pascal compiler; and so on. </P>
<P>Of course, when you write the makefile, you know which implicit rule =
you want=20
<CODE>make</CODE> to use, and you know it will choose that one because =
you know=20
which possible prerequisite files are supposed to exist. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
of Built-In Rules</A>, for a catalogue of all the predefined implicit =
rules.=20
</P>
<P>Above, we said an implicit rule applies if the required prerequisites =
=E2=80=9Cexist=20
or can be made=E2=80=9D. A file =E2=80=9Ccan be made=E2=80=9D if it is =
mentioned explicitly in the=20
makefile as a target or a prerequisite, or if an implicit rule can be=20
recursively found for how to make it. When an implicit prerequisite is =
the=20
result of another implicit rule, we say that <EM>chaining</EM> is =
occurring. See=20
<A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Chained-Rules">=
Chains=20
of Implicit Rules</A>. </P>
<P>In general, <CODE>make</CODE> searches for an implicit rule for each =
target,=20
and for each double-colon rule, that has no recipe. A file that is =
mentioned=20
only as a prerequisite is considered a target whose rule specifies =
nothing, so=20
implicit rule search happens for it. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rule-S=
earch">Implicit=20
Rule Search Algorithm</A>, for the details of how the search is done. =
</P>
<P>Note that explicit prerequisites do not influence implicit rule =
search. For=20
example, consider this explicit rule: </P>
<DIV class=3Dexample><PRE class=3Dexample>foo.o: foo.p
</PRE></DIV>
<P>The prerequisite on <SAMP>foo.p</SAMP> does not necessarily mean that =

<CODE>make</CODE> will remake <SAMP>foo.o</SAMP> according to the =
implicit rule=20
to make an object file, a <SAMP>.o</SAMP> file, from a Pascal source =
file, a=20
<SAMP>.p</SAMP> file. For example, if <SAMP>foo.c</SAMP> also exists, =
the=20
implicit rule to make an object file from a C source file is used =
instead,=20
because it appears before the Pascal rule in the list of predefined =
implicit=20
rules (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
of Built-In Rules</A>). </P>
<P>If you do not want an implicit rule to be used for a target that has =
no=20
recipe, you can give that target an empty recipe by writing a semicolon =
(see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Empty-Recipes">=
Defining=20
Empty Recipes</A>). </P>
<HR>
<A name=3DCatalogue-of-Rules></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les"=20
rel=3Dnext>Implicit Variables</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Using-Implicit"=
=20
rel=3Dprev>Using Implicit</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rules"=
=20
rel=3Dup>Implicit Rules</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DCatalogue-of-Built_002dIn-Rules></A>
<H3 class=3Dsection>10.2 Catalogue of Built-In Rules</H3><A=20
name=3Dindex-implicit-rule_002c-predefined></A><A=20
name=3Dindex-rule_002c-implicit_002c-predefined></A>
<P>Here is a catalogue of predefined implicit rules which are always =
available=20
unless the makefile explicitly overrides or cancels them. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Canceling-Rules=
">Canceling=20
Implicit Rules</A>, for information on canceling or overriding an =
implicit rule.=20
The =E2=80=98<SAMP>-r</SAMP>=E2=80=99 or =
=E2=80=98<SAMP>--no-builtin-rules</SAMP>=E2=80=99 option cancels all=20
predefined rules. </P>
<P>This manual only documents the default rules available on POSIX-based =

operating systems. Other operating systems, such as VMS, Windows, OS/2, =
etc. may=20
have different sets of default rules. To see the full list of default =
rules and=20
variables available in your version of GNU <CODE>make</CODE>, run =
=E2=80=98<SAMP>make=20
-p</SAMP>=E2=80=99 in a directory with no makefile. </P>
<P>Not all of these rules will always be defined, even when the=20
=E2=80=98<SAMP>-r</SAMP>=E2=80=99 option is not given. Many of the =
predefined implicit rules are=20
implemented in <CODE>make</CODE> as suffix rules, so which ones will be =
defined=20
depends on the <EM>suffix list</EM> (the list of prerequisites of the =
special=20
target <CODE>.SUFFIXES</CODE>). The default suffix list is: =
<CODE>.out</CODE>,=20
<CODE>.a</CODE>, <CODE>.ln</CODE>, <CODE>.o</CODE>, <CODE>.c</CODE>,=20
<CODE>.cc</CODE>, <CODE>.C</CODE>, <CODE>.cpp</CODE>, <CODE>.p</CODE>,=20
<CODE>.f</CODE>, <CODE>.F</CODE>, <CODE>.m</CODE>, <CODE>.r</CODE>,=20
<CODE>.y</CODE>, <CODE>.l</CODE>, <CODE>.ym</CODE>, <CODE>.lm</CODE>,=20
<CODE>.s</CODE>, <CODE>.S</CODE>, <CODE>.mod</CODE>, <CODE>.sym</CODE>,=20
<CODE>.def</CODE>, <CODE>.h</CODE>, <CODE>.info</CODE>, =
<CODE>.dvi</CODE>,=20
<CODE>.tex</CODE>, <CODE>.texinfo</CODE>, <CODE>.texi</CODE>,=20
<CODE>.txinfo</CODE>, <CODE>.w</CODE>, <CODE>.ch</CODE> =
<CODE>.web</CODE>,=20
<CODE>.sh</CODE>, <CODE>.elc</CODE>, <CODE>.el</CODE>. All of the =
implicit rules=20
described below whose prerequisites have one of these suffixes are =
actually=20
suffix rules. If you modify the suffix list, the only predefined suffix =
rules in=20
effect will be those named by one or two of the suffixes that are on the =
list=20
you specify; rules whose suffixes fail to be on the list are disabled. =
See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Suffix-Rules">O=
ld-Fashioned=20
Suffix Rules</A>, for full details on suffix rules. </P>
<DL compact>
  <DT>Compiling C programs</DT>
  <DD><A name=3Dindex-C_002c-rule-to-compile></A><A =
name=3Dindex-cc></A><A=20
  name=3Dindex-gcc></A><A name=3Dindex-_002eo></A><A =
name=3Dindex-_002ec></A>
  <P><SAMP><VAR>n</VAR>.o</SAMP> is made automatically from=20
  <SAMP><VAR>n</VAR>.c</SAMP> with a recipe of the form =
=E2=80=98<SAMP>$(CC) $(CPPFLAGS)=20
  $(CFLAGS) -c</SAMP>=E2=80=99. </P></DD>
  <DT>Compiling C++ programs</DT>
  <DD><A name=3Dindex-C_002b_002b_002c-rule-to-compile></A><A=20
  name=3Dindex-g_002b_002b></A><A name=3Dindex-_002ecc></A><A=20
  name=3Dindex-_002ecpp></A><A name=3Dindex-_002eC></A>
  <P><SAMP><VAR>n</VAR>.o</SAMP> is made automatically from=20
  <SAMP><VAR>n</VAR>.cc</SAMP>, <SAMP><VAR>n</VAR>.cpp</SAMP>, or=20
  <SAMP><VAR>n</VAR>.C</SAMP> with a recipe of the form =
=E2=80=98<SAMP>$(CXX)=20
  $(CPPFLAGS) $(CXXFLAGS) -c</SAMP>=E2=80=99. We encourage you to use =
the suffix=20
  =E2=80=98<SAMP>.cc</SAMP>=E2=80=99 for C++ source files instead of =
=E2=80=98<SAMP>.C</SAMP>=E2=80=99.=20
</P></DD>
  <DT>Compiling Pascal programs</DT>
  <DD><A name=3Dindex-Pascal_002c-rule-to-compile></A><A =
name=3Dindex-pc></A><A=20
  name=3Dindex-_002ep></A>
  <P><SAMP><VAR>n</VAR>.o</SAMP> is made automatically from=20
  <SAMP><VAR>n</VAR>.p</SAMP> with the recipe =E2=80=98<SAMP>$(PC) =
$(PFLAGS) -c</SAMP>=E2=80=99.=20
  </P></DD>
  <DT>Compiling Fortran and Ratfor programs</DT>
  <DD><A name=3Dindex-Fortran_002c-rule-to-compile></A><A=20
  name=3Dindex-Ratfor_002c-rule-to-compile></A><A =
name=3Dindex-f77></A><A=20
  name=3Dindex-_002ef></A><A name=3Dindex-_002er></A><A =
name=3Dindex-_002eF></A>
  <P><SAMP><VAR>n</VAR>.o</SAMP> is made automatically from=20
  <SAMP><VAR>n</VAR>.r</SAMP>, <SAMP><VAR>n</VAR>.F</SAMP> or=20
  <SAMP><VAR>n</VAR>.f</SAMP> by running the Fortran compiler. The =
precise=20
  recipe used is as follows: </P>
  <DL compact>
    <DT>=E2=80=98<SAMP>.f</SAMP>=E2=80=99</DT>
    <DD>
    <P>=E2=80=98<SAMP>$(FC) $(FFLAGS) -c</SAMP>=E2=80=99. </P></DD>
    <DT>=E2=80=98<SAMP>.F</SAMP>=E2=80=99</DT>
    <DD>
    <P>=E2=80=98<SAMP>$(FC) $(FFLAGS) $(CPPFLAGS) -c</SAMP>=E2=80=99. =
</P></DD>
    <DT>=E2=80=98<SAMP>.r</SAMP>=E2=80=99</DT>
    <DD>
    <P>=E2=80=98<SAMP>$(FC) $(FFLAGS) $(RFLAGS) -c</SAMP>=E2=80=99. =
</P></DD></DL></DD>
  <DT>Preprocessing Fortran and Ratfor programs</DT>
  <DD>
  <P><SAMP><VAR>n</VAR>.f</SAMP> is made automatically from=20
  <SAMP><VAR>n</VAR>.r</SAMP> or <SAMP><VAR>n</VAR>.F</SAMP>. This rule =
runs=20
  just the preprocessor to convert a Ratfor or preprocessable Fortran =
program=20
  into a strict Fortran program. The precise recipe used is as follows: =
</P>
  <DL compact>
    <DT>=E2=80=98<SAMP>.F</SAMP>=E2=80=99</DT>
    <DD>
    <P>=E2=80=98<SAMP>$(FC) $(CPPFLAGS) $(FFLAGS) -F</SAMP>=E2=80=99. =
</P></DD>
    <DT>=E2=80=98<SAMP>.r</SAMP>=E2=80=99</DT>
    <DD>
    <P>=E2=80=98<SAMP>$(FC) $(FFLAGS) $(RFLAGS) -F</SAMP>=E2=80=99. =
</P></DD></DL></DD>
  <DT>Compiling Modula-2 programs</DT>
  <DD><A name=3Dindex-Modula_002d2_002c-rule-to-compile></A><A=20
  name=3Dindex-m2c></A><A name=3Dindex-_002esym></A><A =
name=3Dindex-_002edef></A><A=20
  name=3Dindex-_002emod></A>
  <P><SAMP><VAR>n</VAR>.sym</SAMP> is made from =
<SAMP><VAR>n</VAR>.def</SAMP>=20
  with a recipe of the form =E2=80=98<SAMP>$(M2C) $(M2FLAGS) =
$(DEFFLAGS)</SAMP>=E2=80=99.=20
  <SAMP><VAR>n</VAR>.o</SAMP> is made from =
<SAMP><VAR>n</VAR>.mod</SAMP>; the=20
  form is: =
=E2=80=98<SAMP>$(M2C)&nbsp;$(M2FLAGS)&nbsp;$(MODFLAGS)</SAMP>=E2=80=99<!-=
- /@w -->.=20
  </P></DD>
  <DT>Assembling and preprocessing assembler programs</DT>
  <DD><A name=3Dindex-assembly_002c-rule-to-compile></A><A =
name=3Dindex-as></A><A=20
  name=3Dindex-_002es></A>
  <P><SAMP><VAR>n</VAR>.o</SAMP> is made automatically from=20
  <SAMP><VAR>n</VAR>.s</SAMP> by running the assembler, <CODE>as</CODE>. =
The=20
  precise recipe is =E2=80=98<SAMP>$(AS) $(ASFLAGS)</SAMP>=E2=80=99. =
</P><A=20
  name=3Dindex-_002eS></A>
  <P><SAMP><VAR>n</VAR>.s</SAMP> is made automatically from=20
  <SAMP><VAR>n</VAR>.S</SAMP> by running the C preprocessor, =
<CODE>cpp</CODE>.=20
  The precise recipe is =
=E2=80=98<SAMP>$(CPP)&nbsp;$(CPPFLAGS)</SAMP>=E2=80=99<!-- /@w -->.=20
  </P></DD>
  <DT>Linking a single object file</DT>
  <DD><A name=3Dindex-linking_002c-predefined-rule-for></A><A =
name=3Dindex-ld></A><A=20
  name=3Dindex-_002eo-1></A>
  <P><SAMP><VAR>n</VAR></SAMP> is made automatically from=20
  <SAMP><VAR>n</VAR>.o</SAMP> by running the linker (usually called=20
  <CODE>ld</CODE>) via the C compiler. The precise recipe used is=20
  =
=E2=80=98<SAMP>$(CC)&nbsp;$(LDFLAGS)&nbsp;<VAR>n</VAR>.o&nbsp;$(LOADLIBES=
)&nbsp;$(LDLIBS)</SAMP>=E2=80=99<!-- /@w -->.=20
  </P>
  <P>This rule does the right thing for a simple program with only one =
source=20
  file. It will also do the right thing if there are multiple object =
files=20
  (presumably coming from various other source files), one of which has =
a name=20
  matching that of the executable file. Thus, </P>
  <DIV class=3Dexample><PRE class=3Dexample>x: y.o z.o
</PRE></DIV>
  <P>when <SAMP>x.c</SAMP>, <SAMP>y.c</SAMP> and <SAMP>z.c</SAMP> all =
exist will=20
  execute: </P>
  <DIV class=3Dexample><PRE class=3Dexample>cc -c x.c -o x.o
cc -c y.c -o y.o
cc -c z.c -o z.o
cc x.o y.o z.o -o x
rm -f x.o
rm -f y.o
rm -f z.o
</PRE></DIV>
  <P>In more complicated cases, such as when there is no object file =
whose name=20
  derives from the executable file name, you must write an explicit =
recipe for=20
  linking. </P>
  <P>Each kind of file automatically made into =
=E2=80=98<SAMP>.o</SAMP>=E2=80=99 object files=20
  will be automatically linked by using the compiler =
(=E2=80=98<SAMP>$(CC)</SAMP>=E2=80=99,=20
  =E2=80=98<SAMP>$(FC)</SAMP>=E2=80=99 or =
=E2=80=98<SAMP>$(PC)</SAMP>=E2=80=99; the C compiler=20
  =E2=80=98<SAMP>$(CC)</SAMP>=E2=80=99 is used to assemble =
=E2=80=98<SAMP>.s</SAMP>=E2=80=99 files) without the=20
  =E2=80=98<SAMP>-c</SAMP>=E2=80=99 option. This could be done by using =
the =E2=80=98<SAMP>.o</SAMP>=E2=80=99=20
  object files as intermediates, but it is faster to do the compiling =
and=20
  linking in one step, so that=E2=80=99s how it=E2=80=99s done. =
</P></DD>
  <DT>Yacc for C programs</DT>
  <DD><A name=3Dindex-yacc-1></A><A =
name=3Dindex-Yacc_002c-rule-to-run></A><A=20
  name=3Dindex-_002ey></A>
  <P><SAMP><VAR>n</VAR>.c</SAMP> is made automatically from=20
  <SAMP><VAR>n</VAR>.y</SAMP> by running Yacc with the recipe =
=E2=80=98<SAMP>$(YACC)=20
  $(YFLAGS)</SAMP>=E2=80=99. </P></DD>
  <DT>Lex for C programs</DT>
  <DD><A name=3Dindex-lex></A><A =
name=3Dindex-Lex_002c-rule-to-run></A><A=20
  name=3Dindex-_002el></A>
  <P><SAMP><VAR>n</VAR>.c</SAMP> is made automatically from=20
  <SAMP><VAR>n</VAR>.l</SAMP> by running Lex. The actual recipe is =
=E2=80=98<SAMP>$(LEX)=20
  $(LFLAGS)</SAMP>=E2=80=99. </P></DD>
  <DT>Lex for Ratfor programs</DT>
  <DD>
  <P><SAMP><VAR>n</VAR>.r</SAMP> is made automatically from=20
  <SAMP><VAR>n</VAR>.l</SAMP> by running Lex. The actual recipe is =
=E2=80=98<SAMP>$(LEX)=20
  $(LFLAGS)</SAMP>=E2=80=99. </P>
  <P>The convention of using the same suffix =
=E2=80=98<SAMP>.l</SAMP>=E2=80=99 for all Lex files=20
  regardless of whether they produce C code or Ratfor code makes it =
impossible=20
  for <CODE>make</CODE> to determine automatically which of the two =
languages=20
  you are using in any particular case. If <CODE>make</CODE> is called =
upon to=20
  remake an object file from a =E2=80=98<SAMP>.l</SAMP>=E2=80=99 file, =
it must guess which=20
  compiler to use. It will guess the C compiler, because that is more =
common. If=20
  you are using Ratfor, make sure <CODE>make</CODE> knows this by =
mentioning=20
  <SAMP><VAR>n</VAR>.r</SAMP> in the makefile. Or, if you are using =
Ratfor=20
  exclusively, with no C files, remove =E2=80=98<SAMP>.c</SAMP>=E2=80=99 =
from the list of=20
  implicit rule suffixes with: </P>
  <DIV class=3Dexample><PRE class=3Dexample>.SUFFIXES:
.SUFFIXES: .o .r .f .l =E2=80=A6
</PRE></DIV></DD>
  <DT>Making Lint Libraries from C, Yacc, or Lex programs</DT>
  <DD><A name=3Dindex-lint></A><A =
name=3Dindex-lint_002c-rule-to-run></A><A=20
  name=3Dindex-_002eln></A>
  <P><SAMP><VAR>n</VAR>.ln</SAMP> is made from =
<SAMP><VAR>n</VAR>.c</SAMP> by=20
  running <CODE>lint</CODE>. The precise recipe is=20
  =E2=80=98<SAMP>$(LINT)&nbsp;$(LINTFLAGS)&nbsp;$(CPPFLAGS)&nbsp;<SPAN=20
  class=3Dnolinebreak>-i</SPAN></SAMP>=E2=80=99<!-- /@w -->. The same =
recipe is used on=20
  the C code produced from <SAMP><VAR>n</VAR>.y</SAMP> or=20
  <SAMP><VAR>n</VAR>.l</SAMP>. </P></DD>
  <DT>TeX and Web</DT>
  <DD><A name=3Dindex-TeX_002c-rule-to-run></A><A=20
  name=3Dindex-Web_002c-rule-to-run></A><A name=3Dindex-tex></A><A=20
  name=3Dindex-cweave></A><A name=3Dindex-weave></A><A =
name=3Dindex-tangle></A><A=20
  name=3Dindex-ctangle></A><A name=3Dindex-_002edvi></A><A=20
  name=3Dindex-_002etex></A><A name=3Dindex-_002eweb></A><A =
name=3Dindex-_002ew></A><A=20
  name=3Dindex-_002ech></A>
  <P><SAMP><VAR>n</VAR>.dvi</SAMP> is made from =
<SAMP><VAR>n</VAR>.tex</SAMP>=20
  with the recipe =E2=80=98<SAMP>$(TEX)</SAMP>=E2=80=99. =
<SAMP><VAR>n</VAR>.tex</SAMP> is made=20
  from <SAMP><VAR>n</VAR>.web</SAMP> with =
=E2=80=98<SAMP>$(WEAVE)</SAMP>=E2=80=99, or from=20
  <SAMP><VAR>n</VAR>.w</SAMP> (and from <SAMP><VAR>n</VAR>.ch</SAMP> if =
it=20
  exists or can be made) with =E2=80=98<SAMP>$(CWEAVE)</SAMP>=E2=80=99.=20
  <SAMP><VAR>n</VAR>.p</SAMP> is made from <SAMP><VAR>n</VAR>.web</SAMP> =
with=20
  =E2=80=98<SAMP>$(TANGLE)</SAMP>=E2=80=99 and =
<SAMP><VAR>n</VAR>.c</SAMP> is made from=20
  <SAMP><VAR>n</VAR>.w</SAMP> (and from <SAMP><VAR>n</VAR>.ch</SAMP> if =
it=20
  exists or can be made) with =E2=80=98<SAMP>$(CTANGLE)</SAMP>=E2=80=99. =
</P></DD>
  <DT>Texinfo and Info</DT>
  <DD><A name=3Dindex-Texinfo_002c-rule-to-format></A><A=20
  name=3Dindex-Info_002c-rule-to-format></A><A =
name=3Dindex-texi2dvi></A><A=20
  name=3Dindex-makeinfo></A><A name=3Dindex-_002etexinfo></A><A=20
  name=3Dindex-_002einfo></A><A name=3Dindex-_002etexi></A><A=20
  name=3Dindex-_002etxinfo></A>
  <P><SAMP><VAR>n</VAR>.dvi</SAMP> is made from=20
  <SAMP><VAR>n</VAR>.texinfo</SAMP>, <SAMP><VAR>n</VAR>.texi</SAMP>, or=20
  <SAMP><VAR>n</VAR>.txinfo</SAMP>, with the recipe=20
  =E2=80=98<SAMP>$(TEXI2DVI)&nbsp;<SPAN=20
  class=3Dnolinebreak>$(TEXI2DVI_FLAGS)</SPAN></SAMP>=E2=80=99<!-- /@w =
-->.=20
  <SAMP><VAR>n</VAR>.info</SAMP> is made from =
<SAMP><VAR>n</VAR>.texinfo</SAMP>,=20
  <SAMP><VAR>n</VAR>.texi</SAMP>, or <SAMP><VAR>n</VAR>.txinfo</SAMP>, =
with the=20
  recipe =E2=80=98<SAMP>$(MAKEINFO)&nbsp;<SPAN=20
  class=3Dnolinebreak>$(MAKEINFO_FLAGS)</SPAN></SAMP>=E2=80=99<!-- /@w =
-->. </P></DD>
  <DT>RCS</DT>
  <DD><A name=3Dindex-RCS_002c-rule-to-extract-from></A><A =
name=3Dindex-co></A><A=20
  name=3Dindex-_002cv-_0028RCS-file-extension_0029></A>
  <P>Any file <SAMP><VAR>n</VAR></SAMP> is extracted if necessary from =
an RCS=20
  file named either <SAMP><VAR>n</VAR>,v</SAMP> or=20
  <SAMP>RCS/<VAR>n</VAR>,v</SAMP>. The precise recipe used is=20
  =E2=80=98<SAMP>$(CO)&nbsp;$(COFLAGS)</SAMP>=E2=80=99<!-- /@w -->. =
<SAMP><VAR>n</VAR></SAMP>=20
  will not be extracted from RCS if it already exists, even if the RCS =
file is=20
  newer. The rules for RCS are terminal (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Match_002dAnyth=
ing-Rules">Match-Anything=20
  Pattern Rules</A>), so RCS files cannot be generated from another =
source; they=20
  must actually exist. </P></DD>
  <DT>SCCS</DT>
  <DD><A name=3Dindex-SCCS_002c-rule-to-extract-from></A><A =
name=3Dindex-get></A><A=20
  name=3Dindex-s_002e-_0028SCCS-file-prefix_0029></A>
  <P>Any file <SAMP><VAR>n</VAR></SAMP> is extracted if necessary from =
an SCCS=20
  file named either <SAMP>s.<VAR>n</VAR></SAMP> or=20
  <SAMP>SCCS/s.<VAR>n</VAR></SAMP>. The precise recipe used is=20
  =E2=80=98<SAMP>$(GET)&nbsp;$(GFLAGS)</SAMP>=E2=80=99<!-- /@w -->. The =
rules for SCCS are=20
  terminal (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Match_002dAnyth=
ing-Rules">Match-Anything=20
  Pattern Rules</A>), so SCCS files cannot be generated from another =
source;=20
  they must actually exist. </P><A name=3Dindex-_002esh></A>
  <P>For the benefit of SCCS, a file <SAMP><VAR>n</VAR></SAMP> is copied =
from=20
  <SAMP><VAR>n</VAR>.sh</SAMP> and made executable (by everyone). This =
is for=20
  shell scripts that are checked into SCCS. Since RCS preserves the =
execution=20
  permission of a file, you do not need to use this feature with RCS. =
</P>
  <P>We recommend that you avoid using of SCCS. RCS is widely held to be =

  superior, and is also free. By choosing free software in place of =
comparable=20
  (or inferior) proprietary software, you support the free software =
movement.=20
  </P></DD></DL>
<P>Usually, you want to change only the variables listed in the table =
above,=20
which are documented in the following section. </P>
<P>However, the recipes in built-in implicit rules actually use =
variables such=20
as <CODE>COMPILE.c</CODE>, <CODE>LINK.p</CODE>, and =
<CODE>PREPROCESS.S</CODE>,=20
whose values contain the recipes listed above. </P>
<P><CODE>make</CODE> follows the convention that the rule to compile a=20
<SAMP>.<VAR>x</VAR></SAMP> source file uses the variable=20
<CODE>COMPILE.<VAR>x</VAR></CODE>. Similarly, the rule to produce an =
executable=20
from a <SAMP>.<VAR>x</VAR></SAMP> file uses =
<CODE>LINK.<VAR>x</VAR></CODE>; and=20
the rule to preprocess a <SAMP>.<VAR>x</VAR></SAMP> file uses=20
<CODE>PREPROCESS.<VAR>x</VAR></CODE>. </P><A =
name=3Dindex-OUTPUT_005fOPTION></A>
<P>Every rule that produces an object file uses the variable=20
<CODE>OUTPUT_OPTION</CODE>. <CODE>make</CODE> defines this variable =
either to=20
contain =E2=80=98<SAMP>-o $@</SAMP>=E2=80=99, or to be empty, depending =
on a compile-time=20
option. You need the =E2=80=98<SAMP>-o</SAMP>=E2=80=99 option to ensure =
that the output goes=20
into the right file when the source file is in a different directory, as =
when=20
using <CODE>VPATH</CODE> (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Directory-Searc=
h">Directory=20
Search</A>). However, compilers on some systems do not accept a=20
=E2=80=98<SAMP>-o</SAMP>=E2=80=99 switch for object files. If you use =
such a system, and use=20
<CODE>VPATH</CODE>, some compilations will put their output in the wrong =
place.=20
A possible workaround for this problem is to give =
<CODE>OUTPUT_OPTION</CODE> the=20
value =E2=80=98<SAMP>;&nbsp;mv&nbsp;$*.o&nbsp;$@</SAMP>=E2=80=99<!-- /@w =
-->. </P>
<HR>
<A name=3DImplicit-Variables></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Chained-Rules" =

rel=3Dnext>Chained Rules</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les"=20
rel=3Dprev>Catalogue of Rules</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rules"=
=20
rel=3Dup>Implicit Rules</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DVariables-Used-by-Implicit-Rules></A>
<H3 class=3Dsection>10.3 Variables Used by Implicit Rules</H3><A=20
name=3Dindex-flags-for-compilers></A>
<P>The recipes in built-in implicit rules make liberal use of certain =
predefined=20
variables. You can alter the values of these variables in the makefile, =
with=20
arguments to <CODE>make</CODE>, or in the environment to alter how the =
implicit=20
rules work without redefining the rules themselves. You can cancel all =
variables=20
used by implicit rules with the =E2=80=98<SAMP>-R</SAMP>=E2=80=99 or=20
=E2=80=98<SAMP>--no-builtin-variables</SAMP>=E2=80=99 option. </P>
<P>For example, the recipe used to compile a C source file actually says =

=E2=80=98<SAMP>$(CC) -c $(CFLAGS) $(CPPFLAGS)</SAMP>=E2=80=99. The =
default values of the=20
variables used are =E2=80=98<SAMP>cc</SAMP>=E2=80=99 and nothing, =
resulting in the command=20
=E2=80=98<SAMP>cc -c</SAMP>=E2=80=99. By redefining =
=E2=80=98<SAMP>CC</SAMP>=E2=80=99 to =E2=80=98<SAMP>ncc</SAMP>=E2=80=99, =
you=20
could cause =E2=80=98<SAMP>ncc</SAMP>=E2=80=99 to be used for all C =
compilations performed by=20
the implicit rule. By redefining =E2=80=98<SAMP>CFLAGS</SAMP>=E2=80=99 =
to be =E2=80=98<SAMP>-g</SAMP>=E2=80=99,=20
you could pass the =E2=80=98<SAMP>-g</SAMP>=E2=80=99 option to each =
compilation. <EM>All</EM>=20
implicit rules that do C compilation use =
=E2=80=98<SAMP>$(CC)</SAMP>=E2=80=99 to get the program=20
name for the compiler and <EM>all</EM> include =
=E2=80=98<SAMP>$(CFLAGS)</SAMP>=E2=80=99 among=20
the arguments given to the compiler. </P>
<P>The variables used in implicit rules fall into two classes: those =
that are=20
names of programs (like <CODE>CC</CODE>) and those that contain =
arguments for=20
the programs (like <CODE>CFLAGS</CODE>). (The =E2=80=9Cname of a =
program=E2=80=9D may also=20
contain some command arguments, but it must start with an actual =
executable=20
program name.) If a variable value contains more than one argument, =
separate=20
them with spaces. </P>
<P>The following tables describe of some of the more commonly-used =
predefined=20
variables. This list is not exhaustive, and the default values shown =
here may=20
not be what <CODE>make</CODE> selects for your environment. To see the =
complete=20
list of predefined variables for your instance of GNU <CODE>make</CODE> =
you can=20
run =E2=80=98<SAMP>make -p</SAMP>=E2=80=99 in a directory with no =
makefiles. </P>
<P>Here is a table of some of the more common variables used as names of =

programs in built-in rules: </P>
<DL compact>
  <DT><CODE>AR</CODE></DT>
  <DD><A name=3Dindex-AR></A>
  <P>Archive-maintaining program; default =
=E2=80=98<SAMP>ar</SAMP>=E2=80=99. <A=20
  name=3Dindex-ar></A></P></DD>
  <DT><CODE>AS</CODE></DT>
  <DD><A name=3Dindex-AS></A>
  <P>Program for compiling assembly files; default =
=E2=80=98<SAMP>as</SAMP>=E2=80=99. <A=20
  name=3Dindex-as-1></A></P></DD>
  <DT><CODE>CC</CODE></DT>
  <DD><A name=3Dindex-CC></A>
  <P>Program for compiling C programs; default =
=E2=80=98<SAMP>cc</SAMP>=E2=80=99. <A=20
  name=3Dindex-cc-1></A></P></DD>
  <DT><CODE>CXX</CODE></DT>
  <DD><A name=3Dindex-CXX></A>
  <P>Program for compiling C++ programs; default =
=E2=80=98<SAMP>g++</SAMP>=E2=80=99. <A=20
  name=3Dindex-g_002b_002b-1></A></P></DD>
  <DT><CODE>CPP</CODE></DT>
  <DD><A name=3Dindex-CPP></A>
  <P>Program for running the C preprocessor, with results to standard =
output;=20
  default =E2=80=98<SAMP>$(CC) -E</SAMP>=E2=80=99. </P></DD>
  <DT><CODE>FC</CODE></DT>
  <DD><A name=3Dindex-FC></A>
  <P>Program for compiling or preprocessing Fortran and Ratfor programs; =
default=20
  =E2=80=98<SAMP>f77</SAMP>=E2=80=99. <A =
name=3Dindex-f77-1></A></P></DD>
  <DT><CODE>M2C</CODE></DT>
  <DD><A name=3Dindex-M2C></A>
  <P>Program to use to compile Modula-2 source code; default =
=E2=80=98<SAMP>m2c</SAMP>=E2=80=99.=20
  <A name=3Dindex-m2c-1></A></P></DD>
  <DT><CODE>PC</CODE></DT>
  <DD><A name=3Dindex-PC></A>
  <P>Program for compiling Pascal programs; default =
=E2=80=98<SAMP>pc</SAMP>=E2=80=99. <A=20
  name=3Dindex-pc-1></A></P></DD>
  <DT><CODE>CO</CODE></DT>
  <DD><A name=3Dindex-CO></A>
  <P>Program for extracting a file from RCS; default =
=E2=80=98<SAMP>co</SAMP>=E2=80=99. <A=20
  name=3Dindex-co-1></A></P></DD>
  <DT><CODE>GET</CODE></DT>
  <DD><A name=3Dindex-GET></A>
  <P>Program for extracting a file from SCCS; default =
=E2=80=98<SAMP>get</SAMP>=E2=80=99. <A=20
  name=3Dindex-get-1></A></P></DD>
  <DT><CODE>LEX</CODE></DT>
  <DD><A name=3Dindex-LEX></A>
  <P>Program to use to turn Lex grammars into source code; default=20
  =E2=80=98<SAMP>lex</SAMP>=E2=80=99. <A =
name=3Dindex-lex-1></A></P></DD>
  <DT><CODE>YACC</CODE></DT>
  <DD><A name=3Dindex-YACC></A>
  <P>Program to use to turn Yacc grammars into source code; default=20
  =E2=80=98<SAMP>yacc</SAMP>=E2=80=99. <A =
name=3Dindex-yacc-2></A></P></DD>
  <DT><CODE>LINT</CODE></DT>
  <DD><A name=3Dindex-LINT></A>
  <P>Program to use to run lint on source code; default =
=E2=80=98<SAMP>lint</SAMP>=E2=80=99. <A=20
  name=3Dindex-lint-1></A></P></DD>
  <DT><CODE>MAKEINFO</CODE></DT>
  <DD><A name=3Dindex-MAKEINFO></A>
  <P>Program to convert a Texinfo source file into an Info file; default =

  =E2=80=98<SAMP>makeinfo</SAMP>=E2=80=99. <A =
name=3Dindex-makeinfo-1></A></P></DD>
  <DT><CODE>TEX</CODE></DT>
  <DD><A name=3Dindex-TEX></A>
  <P>Program to make TeX <SMALL>DVI</SMALL> files from TeX source; =
default=20
  =E2=80=98<SAMP>tex</SAMP>=E2=80=99. <A =
name=3Dindex-tex-1></A></P></DD>
  <DT><CODE>TEXI2DVI</CODE></DT>
  <DD><A name=3Dindex-TEXI2DVI></A>
  <P>Program to make TeX <SMALL>DVI</SMALL> files from Texinfo source; =
default=20
  =E2=80=98<SAMP>texi2dvi</SAMP>=E2=80=99. <A =
name=3Dindex-texi2dvi-1></A></P></DD>
  <DT><CODE>WEAVE</CODE></DT>
  <DD><A name=3Dindex-WEAVE></A>
  <P>Program to translate Web into TeX; default =
=E2=80=98<SAMP>weave</SAMP>=E2=80=99. <A=20
  name=3Dindex-weave-1></A></P></DD>
  <DT><CODE>CWEAVE</CODE></DT>
  <DD><A name=3Dindex-CWEAVE></A>
  <P>Program to translate C Web into TeX; default =
=E2=80=98<SAMP>cweave</SAMP>=E2=80=99. <A=20
  name=3Dindex-cweave-1></A></P></DD>
  <DT><CODE>TANGLE</CODE></DT>
  <DD><A name=3Dindex-TANGLE></A>
  <P>Program to translate Web into Pascal; default =
=E2=80=98<SAMP>tangle</SAMP>=E2=80=99. <A=20
  name=3Dindex-tangle-1></A></P></DD>
  <DT><CODE>CTANGLE</CODE></DT>
  <DD><A name=3Dindex-CTANGLE></A>
  <P>Program to translate C Web into C; default =
=E2=80=98<SAMP>ctangle</SAMP>=E2=80=99. <A=20
  name=3Dindex-ctangle-1></A></P></DD>
  <DT><CODE>RM</CODE></DT>
  <DD><A name=3Dindex-RM></A>
  <P>Command to remove a file; default =E2=80=98<SAMP>rm =
-f</SAMP>=E2=80=99. <A=20
  name=3Dindex-rm></A></P></DD></DL>
<P>Here is a table of variables whose values are additional arguments =
for the=20
programs above. The default values for all of these is the empty string, =
unless=20
otherwise noted. </P>
<DL compact>
  <DT><CODE>ARFLAGS</CODE></DT>
  <DD><A name=3Dindex-ARFLAGS></A>
  <P>Flags to give the archive-maintaining program; default =
=E2=80=98<SAMP>rv</SAMP>=E2=80=99.=20
  </P></DD>
  <DT><CODE>ASFLAGS</CODE></DT>
  <DD><A name=3Dindex-ASFLAGS></A>
  <P>Extra flags to give to the assembler (when explicitly invoked on a=20
  =E2=80=98<SAMP>.s</SAMP>=E2=80=99 or =E2=80=98<SAMP>.S</SAMP>=E2=80=99 =
file). </P></DD>
  <DT><CODE>CFLAGS</CODE></DT>
  <DD><A name=3Dindex-CFLAGS></A>
  <P>Extra flags to give to the C compiler. </P></DD>
  <DT><CODE>CXXFLAGS</CODE></DT>
  <DD><A name=3Dindex-CXXFLAGS></A>
  <P>Extra flags to give to the C++ compiler. </P></DD>
  <DT><CODE>COFLAGS</CODE></DT>
  <DD><A name=3Dindex-COFLAGS></A>
  <P>Extra flags to give to the RCS <CODE>co</CODE> program. </P></DD>
  <DT><CODE>CPPFLAGS</CODE></DT>
  <DD><A name=3Dindex-CPPFLAGS></A>
  <P>Extra flags to give to the C preprocessor and programs that use it =
(the C=20
  and Fortran compilers). </P></DD>
  <DT><CODE>FFLAGS</CODE></DT>
  <DD><A name=3Dindex-FFLAGS></A>
  <P>Extra flags to give to the Fortran compiler. </P></DD>
  <DT><CODE>GFLAGS</CODE></DT>
  <DD><A name=3Dindex-GFLAGS></A>
  <P>Extra flags to give to the SCCS <CODE>get</CODE> program. </P></DD>
  <DT><CODE>LDFLAGS</CODE></DT>
  <DD><A name=3Dindex-LDFLAGS></A>
  <P>Extra flags to give to compilers when they are supposed to invoke =
the=20
  linker, =E2=80=98<SAMP>ld</SAMP>=E2=80=99, such as <CODE>-L</CODE>. =
Libraries=20
  (<CODE>-lfoo</CODE>) should be added to the <CODE>LDLIBS</CODE> =
variable=20
  instead. </P></DD>
  <DT><CODE>LDLIBS</CODE></DT>
  <DD><A name=3Dindex-LDLIBS></A><A name=3Dindex-LOADLIBES></A>
  <P>Library flags or names given to compilers when they are supposed to =
invoke=20
  the linker, =E2=80=98<SAMP>ld</SAMP>=E2=80=99. <CODE>LOADLIBES</CODE> =
is a deprecated (but=20
  still supported) alternative to <CODE>LDLIBS</CODE>. Non-library =
linker flags,=20
  such as <CODE>-L</CODE>, should go in the <CODE>LDFLAGS</CODE> =
variable.=20
  </P></DD>
  <DT><CODE>LFLAGS</CODE></DT>
  <DD><A name=3Dindex-LFLAGS></A>
  <P>Extra flags to give to Lex. </P></DD>
  <DT><CODE>YFLAGS</CODE></DT>
  <DD><A name=3Dindex-YFLAGS></A>
  <P>Extra flags to give to Yacc. </P></DD>
  <DT><CODE>PFLAGS</CODE></DT>
  <DD><A name=3Dindex-PFLAGS></A>
  <P>Extra flags to give to the Pascal compiler. </P></DD>
  <DT><CODE>RFLAGS</CODE></DT>
  <DD><A name=3Dindex-RFLAGS></A>
  <P>Extra flags to give to the Fortran compiler for Ratfor programs. =
</P></DD>
  <DT><CODE>LINTFLAGS</CODE></DT>
  <DD><A name=3Dindex-LINTFLAGS></A>
  <P>Extra flags to give to lint. </P></DD></DL>
<HR>
<A name=3DChained-Rules></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Rules" =

rel=3Dnext>Pattern Rules</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les"=20
rel=3Dprev>Implicit Variables</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rules"=
=20
rel=3Dup>Implicit Rules</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DChains-of-Implicit-Rules></A>
<H3 class=3Dsection>10.4 Chains of Implicit Rules</H3><A=20
name=3Dindex-chains-of-rules></A><A=20
name=3Dindex-rule_002c-implicit_002c-chains-of></A>
<P>Sometimes a file can be made by a sequence of implicit rules. For =
example, a=20
file <SAMP><VAR>n</VAR>.o</SAMP> could be made from =
<SAMP><VAR>n</VAR>.y</SAMP>=20
by running first Yacc and then <CODE>cc</CODE>. Such a sequence is =
called a=20
<EM>chain</EM>. </P>
<P>If the file <SAMP><VAR>n</VAR>.c</SAMP> exists, or is mentioned in =
the=20
makefile, no special searching is required: <CODE>make</CODE> finds that =
the=20
object file can be made by C compilation from =
<SAMP><VAR>n</VAR>.c</SAMP>; later=20
on, when considering how to make <SAMP><VAR>n</VAR>.c</SAMP>, the rule =
for=20
running Yacc is used. Ultimately both <SAMP><VAR>n</VAR>.c</SAMP> and=20
<SAMP><VAR>n</VAR>.o</SAMP> are updated. </P><A=20
name=3Dindex-intermediate-files></A><A =
name=3Dindex-files_002c-intermediate></A>
<P>However, even if <SAMP><VAR>n</VAR>.c</SAMP> does not exist and is =
not=20
mentioned, <CODE>make</CODE> knows how to envision it as the missing =
link=20
between <SAMP><VAR>n</VAR>.o</SAMP> and <SAMP><VAR>n</VAR>.y</SAMP>! In =
this=20
case, <SAMP><VAR>n</VAR>.c</SAMP> is called an <EM>intermediate =
file</EM>. Once=20
<CODE>make</CODE> has decided to use the intermediate file, it is =
entered in the=20
data base as if it had been mentioned in the makefile, along with the =
implicit=20
rule that says how to create it. </P>
<P>Intermediate files are remade using their rules just like all other =
files.=20
But intermediate files are treated differently in two ways. </P>
<P>The first difference is what happens if the intermediate file does =
not exist.=20
If an ordinary file <VAR>b</VAR> does not exist, and <CODE>make</CODE> =
considers=20
a target that depends on <VAR>b</VAR>, it invariably creates =
<VAR>b</VAR> and=20
then updates the target from <VAR>b</VAR>. But if <VAR>b</VAR> is an=20
intermediate file, then <CODE>make</CODE> can leave well enough alone. =
It won=E2=80=99t=20
bother updating <VAR>b</VAR>, or the ultimate target, unless some =
prerequisite=20
of <VAR>b</VAR> is newer than that target or there is some other reason =
to=20
update that target. </P>
<P>The second difference is that if <CODE>make</CODE> <EM>does</EM> =
create=20
<VAR>b</VAR> in order to update something else, it deletes <VAR>b</VAR> =
later on=20
after it is no longer needed. Therefore, an intermediate file which did =
not=20
exist before <CODE>make</CODE> also does not exist after =
<CODE>make</CODE>.=20
<CODE>make</CODE> reports the deletion to you by printing a =
=E2=80=98<SAMP>rm -f</SAMP>=E2=80=99=20
command showing which file it is deleting. </P>
<P>Ordinarily, a file cannot be intermediate if it is mentioned in the =
makefile=20
as a target or prerequisite. However, you can explicitly mark a file as=20
intermediate by listing it as a prerequisite of the special target=20
<CODE>.INTERMEDIATE</CODE>. This takes effect even if the file is =
mentioned=20
explicitly in some other way. </P><A=20
name=3Dindex-intermediate-files_002c-preserving></A><A=20
name=3Dindex-preserving-intermediate-files></A><A =
name=3Dindex-secondary-files></A>
<P>You can prevent automatic deletion of an intermediate file by marking =
it as a=20
<EM>secondary</EM> file. To do this, list it as a prerequisite of the =
special=20
target <CODE>.SECONDARY</CODE>. When a file is secondary, =
<CODE>make</CODE> will=20
not create the file merely because it does not already exist, but=20
<CODE>make</CODE> does not automatically delete the file. Marking a file =
as=20
secondary also marks it as intermediate. </P>
<P>You can list the target pattern of an implicit rule (such as=20
=E2=80=98<SAMP>%.o</SAMP>=E2=80=99) as a prerequisite of the special =
target=20
<CODE>.PRECIOUS</CODE> to preserve intermediate files made by implicit =
rules=20
whose target patterns match that file=E2=80=99s name; see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Interrupts">Int=
errupts</A>.=20
<A name=3Dindex-preserving-with-_002ePRECIOUS-1></A><A=20
name=3Dindex-_002ePRECIOUS-intermediate-files></A></P>
<P>A chain can involve more than two implicit rules. For example, it is =
possible=20
to make a file <SAMP>foo</SAMP> from <SAMP>RCS/foo.y,v</SAMP> by running =
RCS,=20
Yacc and <CODE>cc</CODE>. Then both <SAMP>foo.y</SAMP> and =
<SAMP>foo.c</SAMP>=20
are intermediate files that are deleted at the end. </P>
<P>No single implicit rule can appear more than once in a chain. This =
means that=20
<CODE>make</CODE> will not even consider such a ridiculous thing as =
making=20
<SAMP>foo</SAMP> from <SAMP>foo.o.o</SAMP> by running the linker twice. =
This=20
constraint has the added benefit of preventing any infinite loop in the =
search=20
for an implicit rule chain. </P>
<P>There are some special implicit rules to optimize certain cases that =
would=20
otherwise be handled by rule chains. For example, making =
<SAMP>foo</SAMP> from=20
<SAMP>foo.c</SAMP> could be handled by compiling and linking with =
separate=20
chained rules, using <SAMP>foo.o</SAMP> as an intermediate file. But =
what=20
actually happens is that a special rule for this case does the =
compilation and=20
linking with a single <CODE>cc</CODE> command. The optimized rule is =
used in=20
preference to the step-by-step chain because it comes earlier in the =
ordering of=20
rules. </P>
<HR>
<A name=3DPattern-Rules></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Last-Resort"=20
rel=3Dnext>Last Resort</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Chained-Rules" =

rel=3Dprev>Chained Rules</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rules"=
=20
rel=3Dup>Implicit Rules</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DDefining-and-Redefining-Pattern-Rules></A>
<H3 class=3Dsection>10.5 Defining and Redefining Pattern Rules</H3>
<P>You define an implicit rule by writing a <EM>pattern rule</EM>. A =
pattern=20
rule looks like an ordinary rule, except that its target contains the =
character=20
=E2=80=98<SAMP>%</SAMP>=E2=80=99 (exactly one of them). The target is =
considered a pattern for=20
matching file names; the =E2=80=98<SAMP>%</SAMP>=E2=80=99 can match any =
nonempty substring,=20
while other characters match only themselves. The prerequisites likewise =
use=20
=E2=80=98<SAMP>%</SAMP>=E2=80=99 to show how their names relate to the =
target name. </P>
<P>Thus, a pattern rule =E2=80=98<SAMP>%.o : %.c</SAMP>=E2=80=99 says =
how to make any file=20
<SAMP><VAR>stem</VAR>.o</SAMP> from another file =
<SAMP><VAR>stem</VAR>.c</SAMP>.=20
</P>
<P>Note that expansion using =E2=80=98<SAMP>%</SAMP>=E2=80=99 in pattern =
rules occurs=20
<STRONG>after</STRONG> any variable or function expansions, which take =
place=20
when the makefile is read. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Using-Variables=
">How to=20
Use Variables</A>, and <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Functions">Func=
tions for=20
Transforming Text</A>. </P>
<TABLE class=3Dmenu border=3D0 cellSpacing=3D0>
  <TBODY>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D1=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Intro">=
Pattern=20
      Intro</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>An introduction to pattern rules. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D2=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Example=
s">Pattern=20
      Examples</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Examples of pattern rules. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D3=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to use automatic variables in the =
recipe of=20
      implicit rules. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D4=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Match">=
Pattern=20
      Match</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How patterns match. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D5=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Match_002dAnyth=
ing-Rules">Match-Anything=20
      Rules</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Precautions you should take prior to =
defining=20
      rules that can match any target file whatever. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D6=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Canceling-Rules=
">Canceling=20
      Rules</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to override or cancel built-in =
rules.=20
  </TD></TR></TBODY></TABLE>
<HR>
<A name=3DPattern-Intro></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Example=
s"=20
rel=3Dnext>Pattern Examples</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Rules" =

rel=3Dprev>Pattern Rules</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Rules" =

rel=3Dup>Pattern Rules</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DIntroduction-to-Pattern-Rules></A>
<H4 class=3Dsubsection>10.5.1 Introduction to Pattern Rules</H4><A=20
name=3Dindex-pattern-rule></A><A name=3Dindex-rule_002c-pattern></A>
<P>A pattern rule contains the character =
=E2=80=98<SAMP>%</SAMP>=E2=80=99 (exactly one of them)=20
in the target; otherwise, it looks exactly like an ordinary rule. The =
target is=20
a pattern for matching file names; the =E2=80=98<SAMP>%</SAMP>=E2=80=99 =
matches any nonempty=20
substring, while other characters match only themselves. <A=20
name=3Dindex-target-pattern_002c-implicit></A><A=20
name=3Dindex-_0025_002c-in-pattern-rules></A></P>
<P>For example, =E2=80=98<SAMP>%.c</SAMP>=E2=80=99 as a pattern matches =
any file name that ends=20
in =E2=80=98<SAMP>.c</SAMP>=E2=80=99. =
=E2=80=98<SAMP>s.%.c</SAMP>=E2=80=99 as a pattern matches any file name=20
that starts with =E2=80=98<SAMP>s.</SAMP>=E2=80=99, ends in =
=E2=80=98<SAMP>.c</SAMP>=E2=80=99 and is at least=20
five characters long. (There must be at least one character to match the =

=E2=80=98<SAMP>%</SAMP>=E2=80=99.) The substring that the =
=E2=80=98<SAMP>%</SAMP>=E2=80=99 matches is called the=20
<EM>stem</EM>. </P>
<P>=E2=80=98<SAMP>%</SAMP>=E2=80=99 in a prerequisite of a pattern rule =
stands for the same stem=20
that was matched by the =E2=80=98<SAMP>%</SAMP>=E2=80=99 in the target. =
In order for the pattern=20
rule to apply, its target pattern must match the file name under =
consideration=20
and all of its prerequisites (after pattern substitution) must name =
files that=20
exist or can be made. These files become prerequisites of the target. <A =

name=3Dindex-prerequisite-pattern_002c-implicit></A></P>
<P>Thus, a rule of the form </P>
<DIV class=3Dexample><PRE class=3Dexample>%.o : %.c ; =
<VAR>recipe</VAR>=E2=80=A6
</PRE></DIV>
<P>specifies how to make a file <SAMP><VAR>n</VAR>.o</SAMP>, with =
another file=20
<SAMP><VAR>n</VAR>.c</SAMP> as its prerequisite, provided that=20
<SAMP><VAR>n</VAR>.c</SAMP> exists or can be made. </P>
<P>There may also be prerequisites that do not use =
=E2=80=98<SAMP>%</SAMP>=E2=80=99; such a=20
prerequisite attaches to every file made by this pattern rule. These =
unvarying=20
prerequisites are useful occasionally. </P>
<P>A pattern rule need not have any prerequisites that contain =
=E2=80=98<SAMP>%</SAMP>=E2=80=99,=20
or in fact any prerequisites at all. Such a rule is effectively a =
general=20
wildcard. It provides a way to make any file that matches the target =
pattern.=20
See <A =
href=3D"http://www.gnu.org/software/make/manual/make.html#Last-Resort">La=
st=20
Resort</A>. </P>
<P>More than one pattern rule may match a target. In this case =
<CODE>make</CODE>=20
will choose the =E2=80=9Cbest fit=E2=80=9D rule. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Match">=
How=20
Patterns Match</A>. </P>
<P>Pattern rules may have more than one target. Unlike normal rules, =
this does=20
not act as many different rules with the same prerequisites and recipe. =
If a=20
pattern rule has multiple targets, <CODE>make</CODE> knows that the =
rule=E2=80=99s=20
recipe is responsible for making all of the targets. The recipe is =
executed only=20
once to make all the targets. When searching for a pattern rule to match =
a=20
target, the target patterns of a rule other than the one that matches =
the target=20
in need of a rule are incidental: <CODE>make</CODE> worries only about =
giving a=20
recipe and prerequisites to the file presently in question. However, =
when this=20
file=E2=80=99s recipe is run, the other targets are marked as having =
been updated=20
themselves. <A name=3Dindex-multiple-targets_002c-in-pattern-rule></A><A =

name=3Dindex-target_002c-multiple-in-pattern-rule></A></P>
<HR>
<A name=3DPattern-Examples></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles"=20
rel=3Dnext>Automatic Variables</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Intro" =

rel=3Dprev>Pattern Intro</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Rules" =

rel=3Dup>Pattern Rules</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DPattern-Rule-Examples></A>
<H4 class=3Dsubsection>10.5.2 Pattern Rule Examples</H4>
<P>Here are some examples of pattern rules actually predefined in=20
<CODE>make</CODE>. First, the rule that compiles =
=E2=80=98<SAMP>.c</SAMP>=E2=80=99 files into=20
=E2=80=98<SAMP>.o</SAMP>=E2=80=99 files: </P>
<DIV class=3Dexample><PRE class=3Dexample>%.o : %.c
        $(CC) -c $(CFLAGS) $(CPPFLAGS) $&lt; -o $@
</PRE></DIV>
<P>defines a rule that can make any file <SAMP><VAR>x</VAR>.o</SAMP> =
from=20
<SAMP><VAR>x</VAR>.c</SAMP>. The recipe uses the automatic variables=20
=E2=80=98<SAMP>$@</SAMP>=E2=80=99 and =
=E2=80=98<SAMP>$&lt;</SAMP>=E2=80=99 to substitute the names of the =
target=20
file and the source file in each case where the rule applies (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
Variables</A>). </P>
<P>Here is a second built-in rule: </P>
<DIV class=3Dexample><PRE class=3Dexample>% :: RCS/%,v
        $(CO) $(COFLAGS) $&lt;
</PRE></DIV>
<P>defines a rule that can make any file <SAMP><VAR>x</VAR></SAMP> =
whatsoever=20
from a corresponding file <SAMP><VAR>x</VAR>,v</SAMP> in the =
sub-directory=20
<SAMP>RCS</SAMP>. Since the target is =E2=80=98<SAMP>%</SAMP>=E2=80=99, =
this rule will apply to=20
any file whatever, provided the appropriate prerequisite file exists. =
The double=20
colon makes the rule <EM>terminal</EM>, which means that its =
prerequisite may=20
not be an intermediate file (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Match_002dAnyth=
ing-Rules">Match-Anything=20
Pattern Rules</A>). </P>
<P>This pattern rule has two targets: </P>
<DIV class=3Dexample><PRE class=3Dexample>%.tab.c %.tab.h: %.y
        bison -d $&lt;
</PRE></DIV>
<P>This tells <CODE>make</CODE> that the recipe =E2=80=98<SAMP>bison -d=20
<VAR>x</VAR>.y</SAMP>=E2=80=99 will make both =
<SAMP><VAR>x</VAR>.tab.c</SAMP> and=20
<SAMP><VAR>x</VAR>.tab.h</SAMP>. If the file <SAMP>foo</SAMP> depends on =
the=20
files <SAMP>parse.tab.o</SAMP> and <SAMP>scan.o</SAMP> and the file=20
<SAMP>scan.o</SAMP> depends on the file <SAMP>parse.tab.h</SAMP>, when=20
<SAMP>parse.y</SAMP> is changed, the recipe =E2=80=98<SAMP>bison -d =
parse.y</SAMP>=E2=80=99 will=20
be executed only once, and the prerequisites of both =
<SAMP>parse.tab.o</SAMP>=20
and <SAMP>scan.o</SAMP> will be satisfied. (Presumably the file=20
<SAMP>parse.tab.o</SAMP> will be recompiled from =
<SAMP>parse.tab.c</SAMP> and=20
the file <SAMP>scan.o</SAMP> from <SAMP>scan.c</SAMP>, while =
<SAMP>foo</SAMP> is=20
linked from <SAMP>parse.tab.o</SAMP>, <SAMP>scan.o</SAMP>, and its other =

prerequisites, and it will execute happily ever after.) </P>
<HR>
<A name=3DAutomatic-Variables></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Match" =

rel=3Dnext>Pattern Match</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Example=
s"=20
rel=3Dprev>Pattern Examples</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Rules" =

rel=3Dup>Pattern Rules</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DAutomatic-Variables-1></A>
<H4 class=3Dsubsection>10.5.3 Automatic Variables</H4><A=20
name=3Dindex-automatic-variables></A><A =
name=3Dindex-variables_002c-automatic></A><A=20
name=3Dindex-variables_002c-and-implicit-rule></A>
<P>Suppose you are writing a pattern rule to compile a =
=E2=80=98<SAMP>.c</SAMP>=E2=80=99 file=20
into a =E2=80=98<SAMP>.o</SAMP>=E2=80=99 file: how do you write the =
=E2=80=98<SAMP>cc</SAMP>=E2=80=99 command so=20
that it operates on the right source file name? You cannot write the =
name in the=20
recipe, because the name is different each time the implicit rule is =
applied.=20
</P>
<P>What you do is use a special feature of <CODE>make</CODE>, the =
<EM>automatic=20
variables</EM>. These variables have values computed afresh for each =
rule that=20
is executed, based on the target and prerequisites of the rule. In this =
example,=20
you would use =E2=80=98<SAMP>$@</SAMP>=E2=80=99 for the object file name =
and=20
=E2=80=98<SAMP>$&lt;</SAMP>=E2=80=99 for the source file name. </P><A=20
name=3Dindex-automatic-variables-in-prerequisites></A><A=20
name=3Dindex-prerequisites_002c-and-automatic-variables></A>
<P>It=E2=80=99s very important that you recognize the limited scope in =
which automatic=20
variable values are available: they only have values within the recipe. =
In=20
particular, you cannot use them anywhere within the target list of a =
rule; they=20
have no value there and will expand to the empty string. Also, they =
cannot be=20
accessed directly within the prerequisite list of a rule. A common =
mistake is=20
attempting to use <CODE>$@</CODE> within the prerequisites list; this =
will not=20
work. However, there is a special feature of GNU <CODE>make</CODE>, =
secondary=20
expansion (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Secondary-Expan=
sion">Secondary=20
Expansion</A>), which will allow automatic variable values to be used in =

prerequisite lists. </P>
<P>Here is a table of automatic variables: </P>
<DL compact>
  <DD><A name=3Dindex-_0024_0040></A><A=20
  name=3Dindex-_0040-_0028automatic-variable_0029></A></DD>
  <DT><CODE>$@</CODE></DT>
  <DD>
  <P>The file name of the target of the rule. If the target is an =
archive=20
  member, then =E2=80=98<SAMP>$@</SAMP>=E2=80=99 is the name of the =
archive file. In a pattern=20
  rule that has multiple targets (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Intro">=
Introduction=20
  to Pattern Rules</A>), =E2=80=98<SAMP>$@</SAMP>=E2=80=99 is the name =
of whichever target=20
  caused the rule=E2=80=99s recipe to be run. </P><A =
name=3Dindex-_0024_0025></A><A=20
  name=3Dindex-_0025-_0028automatic-variable_0029></A></DD>
  <DT><CODE>$%</CODE></DT>
  <DD>
  <P>The target member name, when the target is an archive member. See =
<A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archives">Archi=
ves</A>.=20
  For example, if the target is <SAMP>foo.a(bar.o)</SAMP> then =
=E2=80=98<SAMP>$%</SAMP>=E2=80=99=20
  is <SAMP>bar.o</SAMP> and =E2=80=98<SAMP>$@</SAMP>=E2=80=99 is =
<SAMP>foo.a</SAMP>.=20
  =E2=80=98<SAMP>$%</SAMP>=E2=80=99 is empty when the target is not an =
archive member. </P><A=20
  name=3Dindex-_0024_003c></A><A=20
  name=3Dindex-_003c-_0028automatic-variable_0029></A></DD>
  <DT><CODE>$&lt;</CODE></DT>
  <DD>
  <P>The name of the first prerequisite. If the target got its recipe =
from an=20
  implicit rule, this will be the first prerequisite added by the =
implicit rule=20
  (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rules"=
>Implicit=20
  Rules</A>). </P><A name=3Dindex-_0024_003f></A><A=20
  name=3Dindex-_003f-_0028automatic-variable_0029></A></DD>
  <DT><CODE>$?</CODE></DT>
  <DD>
  <P>The names of all the prerequisites that are newer than the target, =
with=20
  spaces between them. For prerequisites which are archive members, only =
the=20
  named member is used (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archives">Archi=
ves</A>).=20
  <A name=3Dindex-prerequisites_002c-list-of-changed></A><A=20
  name=3Dindex-list-of-changed-prerequisites></A></P><A=20
  name=3Dindex-_0024_005e></A><A=20
  name=3Dindex-_005e-_0028automatic-variable_0029></A></DD>
  <DT><CODE>$^</CODE></DT>
  <DD>
  <P>The names of all the prerequisites, with spaces between them. For=20
  prerequisites which are archive members, only the named member is used =
(see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archives">Archi=
ves</A>).=20
  A target has only one prerequisite on each other file it depends on, =
no matter=20
  how many times each file is listed as a prerequisite. So if you list a =

  prerequisite more than once for a target, the value of <CODE>$^</CODE> =

  contains just one copy of the name. This list does =
<STRONG>not</STRONG>=20
  contain any of the order-only prerequisites; for those see the=20
  =E2=80=98<SAMP>$|</SAMP>=E2=80=99 variable, below. <A=20
  name=3Dindex-prerequisites_002c-list-of-all></A><A=20
  name=3Dindex-list-of-all-prerequisites></A></P><A =
name=3Dindex-_0024_002b></A><A=20
  name=3Dindex-_002b-_0028automatic-variable_0029></A></DD>
  <DT><CODE>$+</CODE></DT>
  <DD>
  <P>This is like =E2=80=98<SAMP>$^</SAMP>=E2=80=99, but prerequisites =
listed more than once are=20
  duplicated in the order they were listed in the makefile. This is =
primarily=20
  useful for use in linking commands where it is meaningful to repeat =
library=20
  file names in a particular order. </P><A =
name=3Dindex-_0024_007c></A><A=20
  name=3Dindex-_007c-_0028automatic-variable_0029></A></DD>
  <DT><CODE>$|</CODE></DT>
  <DD>
  <P>The names of all the order-only prerequisites, with spaces between =
them.=20
  </P><A name=3Dindex-_0024_002a></A><A=20
  name=3Dindex-_002a-_0028automatic-variable_0029></A></DD>
  <DT><CODE>$*</CODE></DT>
  <DD>
  <P>The stem with which an implicit rule matches (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Match">=
How=20
  Patterns Match</A>). If the target is <SAMP>dir/a.foo.b</SAMP> and the =
target=20
  pattern is <SAMP>a.%.b</SAMP> then the stem is <SAMP>dir/foo</SAMP>. =
The stem=20
  is useful for constructing names of related files. <A=20
  name=3Dindex-stem_002c-variable-for></A></P>
  <P>In a static pattern rule, the stem is part of the file name that =
matched=20
  the =E2=80=98<SAMP>%</SAMP>=E2=80=99 in the target pattern. </P>
  <P>In an explicit rule, there is no stem; so =
=E2=80=98<SAMP>$*</SAMP>=E2=80=99 cannot be=20
  determined in that way. Instead, if the target name ends with a =
recognized=20
  suffix (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Suffix-Rules">O=
ld-Fashioned=20
  Suffix Rules</A>), =E2=80=98<SAMP>$*</SAMP>=E2=80=99 is set to the =
target name minus the=20
  suffix. For example, if the target name is =
=E2=80=98<SAMP>foo.c</SAMP>=E2=80=99, then=20
  =E2=80=98<SAMP>$*</SAMP>=E2=80=99 is set to =
=E2=80=98<SAMP>foo</SAMP>=E2=80=99, since =
=E2=80=98<SAMP>.c</SAMP>=E2=80=99 is a=20
  suffix. GNU <CODE>make</CODE> does this bizarre thing only for =
compatibility=20
  with other implementations of <CODE>make</CODE>. You should generally =
avoid=20
  using =E2=80=98<SAMP>$*</SAMP>=E2=80=99 except in implicit rules or =
static pattern rules. </P>
  <P>If the target name in an explicit rule does not end with a =
recognized=20
  suffix, =E2=80=98<SAMP>$*</SAMP>=E2=80=99 is set to the empty string =
for that rule.=20
</P></DD></DL>
<P>=E2=80=98<SAMP>$?</SAMP>=E2=80=99 is useful even in explicit rules =
when you wish to operate=20
on only the prerequisites that have changed. For example, suppose that =
an=20
archive named <SAMP>lib</SAMP> is supposed to contain copies of several =
object=20
files. This rule copies just the changed object files into the archive: =
</P>
<DIV class=3Dexample><PRE class=3Dexample>lib: foo.o bar.o lose.o win.o
        ar r lib $?
</PRE></DIV>
<P>Of the variables listed above, four have values that are single file =
names,=20
and three have values that are lists of file names. These seven have =
variants=20
that get just the file=E2=80=99s directory name or just the file name =
within the=20
directory. The variant variables=E2=80=99 names are formed by appending =
=E2=80=98<SAMP>D</SAMP>=E2=80=99=20
or =E2=80=98<SAMP>F</SAMP>=E2=80=99, respectively. These variants are =
semi-obsolete in GNU=20
<CODE>make</CODE> since the functions <CODE>dir</CODE> and =
<CODE>notdir</CODE>=20
can be used to get a similar effect (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">Functions=20
for File Names</A>). Note, however, that the =
=E2=80=98<SAMP>D</SAMP>=E2=80=99 variants all omit=20
the trailing slash which always appears in the output of the =
<CODE>dir</CODE>=20
function. Here is a table of the variants: </P>
<DL compact>
  <DD><A name=3Dindex-_0024_0028_0040D_0029></A><A=20
  name=3Dindex-_0040D-_0028automatic-variable_0029></A></DD>
  <DT>=E2=80=98<SAMP>$(@D)</SAMP>=E2=80=99</DT>
  <DD>
  <P>The directory part of the file name of the target, with the =
trailing slash=20
  removed. If the value of =E2=80=98<SAMP>$@</SAMP>=E2=80=99 is =
<SAMP>dir/foo.o</SAMP> then=20
  =E2=80=98<SAMP>$(@D)</SAMP>=E2=80=99 is <SAMP>dir</SAMP>. This value =
is <SAMP>.</SAMP> if=20
  =E2=80=98<SAMP>$@</SAMP>=E2=80=99 does not contain a slash. </P><A=20
  name=3Dindex-_0024_0028_0040F_0029></A><A=20
  name=3Dindex-_0040F-_0028automatic-variable_0029></A></DD>
  <DT>=E2=80=98<SAMP>$(@F)</SAMP>=E2=80=99</DT>
  <DD>
  <P>The file-within-directory part of the file name of the target. If =
the value=20
  of =E2=80=98<SAMP>$@</SAMP>=E2=80=99 is <SAMP>dir/foo.o</SAMP> then =
=E2=80=98<SAMP>$(@F)</SAMP>=E2=80=99 is=20
  <SAMP>foo.o</SAMP>. =E2=80=98<SAMP>$(@F)</SAMP>=E2=80=99 is equivalent =
to =E2=80=98<SAMP>$(notdir=20
  $@)</SAMP>=E2=80=99. </P><A name=3Dindex-_0024_0028_002aD_0029></A><A=20
  name=3Dindex-_002aD-_0028automatic-variable_0029></A></DD>
  <DT>=E2=80=98<SAMP>$(*D)</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_0024_0028_002aF_0029></A><A=20
  name=3Dindex-_002aF-_0028automatic-variable_0029></A></DD>
  <DT>=E2=80=98<SAMP>$(*F)</SAMP>=E2=80=99</DT>
  <DD>
  <P>The directory part and the file-within-directory part of the stem;=20
  <SAMP>dir</SAMP> and <SAMP>foo</SAMP> in this example. </P><A=20
  name=3Dindex-_0024_0028_0025D_0029></A><A=20
  name=3Dindex-_0025D-_0028automatic-variable_0029></A></DD>
  <DT>=E2=80=98<SAMP>$(%D)</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_0024_0028_0025F_0029></A><A=20
  name=3Dindex-_0025F-_0028automatic-variable_0029></A></DD>
  <DT>=E2=80=98<SAMP>$(%F)</SAMP>=E2=80=99</DT>
  <DD>
  <P>The directory part and the file-within-directory part of the target =
archive=20
  member name. This makes sense only for archive member targets of the =
form=20
  <SAMP><VAR>archive</VAR>(<VAR>member</VAR>)</SAMP> and is useful only =
when=20
  <VAR>member</VAR> may contain a directory name. (See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Members=
">Archive=20
  Members as Targets</A>.) </P><A =
name=3Dindex-_0024_0028_003cD_0029></A><A=20
  name=3Dindex-_003cD-_0028automatic-variable_0029></A></DD>
  <DT>=E2=80=98<SAMP>$(&lt;D)</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_0024_0028_003cF_0029></A><A=20
  name=3Dindex-_003cF-_0028automatic-variable_0029></A></DD>
  <DT>=E2=80=98<SAMP>$(&lt;F)</SAMP>=E2=80=99</DT>
  <DD>
  <P>The directory part and the file-within-directory part of the first=20
  prerequisite. </P><A name=3Dindex-_0024_0028_005eD_0029></A><A=20
  name=3Dindex-_005eD-_0028automatic-variable_0029></A></DD>
  <DT>=E2=80=98<SAMP>$(^D)</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_0024_0028_005eF_0029></A><A=20
  name=3Dindex-_005eF-_0028automatic-variable_0029></A></DD>
  <DT>=E2=80=98<SAMP>$(^F)</SAMP>=E2=80=99</DT>
  <DD>
  <P>Lists of the directory parts and the file-within-directory parts of =
all=20
  prerequisites. </P><A name=3Dindex-_0024_0028_002bD_0029></A><A=20
  name=3Dindex-_002bD-_0028automatic-variable_0029></A></DD>
  <DT>=E2=80=98<SAMP>$(+D)</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_0024_0028_002bF_0029></A><A=20
  name=3Dindex-_002bF-_0028automatic-variable_0029></A></DD>
  <DT>=E2=80=98<SAMP>$(+F)</SAMP>=E2=80=99</DT>
  <DD>
  <P>Lists of the directory parts and the file-within-directory parts of =
all=20
  prerequisites, including multiple instances of duplicated =
prerequisites.=20
  </P><A name=3Dindex-_0024_0028_003fD_0029></A><A=20
  name=3Dindex-_003fD-_0028automatic-variable_0029></A></DD>
  <DT>=E2=80=98<SAMP>$(?D)</SAMP>=E2=80=99</DT>
  <DD><A name=3Dindex-_0024_0028_003fF_0029></A><A=20
  name=3Dindex-_003fF-_0028automatic-variable_0029></A></DD>
  <DT>=E2=80=98<SAMP>$(?F)</SAMP>=E2=80=99</DT>
  <DD>
  <P>Lists of the directory parts and the file-within-directory parts of =
all=20
  prerequisites that are newer than the target. </P></DD></DL>
<P>Note that we use a special stylistic convention when we talk about =
these=20
automatic variables; we write =E2=80=9Cthe value of =
=E2=80=98<SAMP>$&lt;</SAMP>=E2=80=99=E2=80=9D, rather than=20
=E2=80=9Cthe&nbsp;variable&nbsp;<CODE>&lt;</CODE>=E2=80=9D<!-- /@w --> =
as we would write for=20
ordinary variables such as <CODE>objects</CODE> and <CODE>CFLAGS</CODE>. =
We=20
think this convention looks more natural in this special case. Please do =
not=20
assume it has a deep significance; =E2=80=98<SAMP>$&lt;</SAMP>=E2=80=99 =
refers to the variable=20
named <CODE>&lt;</CODE> just as =E2=80=98<SAMP>$(CFLAGS)</SAMP>=E2=80=99 =
refers to the variable=20
named <CODE>CFLAGS</CODE>. You could just as well use =
=E2=80=98<SAMP>$(&lt;)</SAMP>=E2=80=99 in=20
place of =E2=80=98<SAMP>$&lt;</SAMP>=E2=80=99. </P>
<HR>
<A name=3DPattern-Match></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Match_002dAnyth=
ing-Rules"=20
rel=3Dnext>Match-Anything Rules</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles"=20
rel=3Dprev>Automatic Variables</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Rules" =

rel=3Dup>Pattern Rules</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DHow-Patterns-Match></A>
<H4 class=3Dsubsection>10.5.4 How Patterns Match</H4><A =
name=3Dindex-stem-1></A>
<P>A target pattern is composed of a =E2=80=98<SAMP>%</SAMP>=E2=80=99 =
between a prefix and a=20
suffix, either or both of which may be empty. The pattern matches a file =
name=20
only if the file name starts with the prefix and ends with the suffix, =
without=20
overlap. The text between the prefix and the suffix is called the =
<EM>stem</EM>.=20
Thus, when the pattern =E2=80=98<SAMP>%.o</SAMP>=E2=80=99 matches the =
file name=20
<SAMP>test.o</SAMP>, the stem is =E2=80=98<SAMP>test</SAMP>=E2=80=99. =
The pattern rule=20
prerequisites are turned into actual file names by substituting the stem =
for the=20
character =E2=80=98<SAMP>%</SAMP>=E2=80=99. Thus, if in the same example =
one of the=20
prerequisites is written as =E2=80=98<SAMP>%.c</SAMP>=E2=80=99, it =
expands to=20
=E2=80=98<SAMP>test.c</SAMP>=E2=80=99. </P>
<P>When the target pattern does not contain a slash (and it usually does =
not),=20
directory names in the file names are removed from the file name before =
it is=20
compared with the target prefix and suffix. After the comparison of the =
file=20
name to the target pattern, the directory names, along with the slash =
that ends=20
them, are added on to the prerequisite file names generated from the =
pattern=20
rule=E2=80=99s prerequisite patterns and the file name. The directories =
are ignored only=20
for the purpose of finding an implicit rule to use, not in the =
application of=20
that rule. Thus, =E2=80=98<SAMP>e%t</SAMP>=E2=80=99 matches the file =
name <SAMP>src/eat</SAMP>,=20
with =E2=80=98<SAMP>src/a</SAMP>=E2=80=99 as the stem. When =
prerequisites are turned into file=20
names, the directories from the stem are added at the front, while the =
rest of=20
the stem is substituted for the =E2=80=98<SAMP>%</SAMP>=E2=80=99. The =
stem =E2=80=98<SAMP>src/a</SAMP>=E2=80=99=20
with a prerequisite pattern =E2=80=98<SAMP>c%r</SAMP>=E2=80=99 gives the =
file name=20
<SAMP>src/car</SAMP>. </P><A =
name=3Dindex-pattern-rules_002c-order-of></A><A=20
name=3Dindex-order-of-pattern-rules></A>
<P>A pattern rule can be used to build a given file only if there is a =
target=20
pattern that matches the file name, <EM>and</EM> all prerequisites in =
that rule=20
either exist or can be built. The rules you write take precedence over =
those=20
that are built in. Note however, that a rule whose prerequisites =
actually exist=20
or are mentioned always takes priority over a rule with prerequisites =
that must=20
be made by chaining other implicit rules. </P><A=20
name=3Dindex-stem_002c-shortest></A>
<P>It is possible that more than one pattern rule will meet these =
criteria. In=20
that case, <CODE>make</CODE> will choose the rule with the shortest stem =
(that=20
is, the pattern that matches most specifically). If more than one =
pattern rule=20
has the shortest stem, <CODE>make</CODE> will choose the first one found =
in the=20
makefile. </P>
<P>This algorithm results in more specific rules being preferred over =
more=20
generic ones; for example: </P>
<DIV class=3Dexample><PRE class=3Dexample>%.o: %.c
        $(CC) -c $(CFLAGS) $(CPPFLAGS) $&lt; -o $@

%.o : %.f
        $(COMPILE.F) $(OUTPUT_OPTION) $&lt;

lib/%.o: lib/%.c
        $(CC) -fPIC -c $(CFLAGS) $(CPPFLAGS) $&lt; -o $@
</PRE></DIV>
<P>Given these rules and asked to build <SAMP>bar.o</SAMP> where both=20
<SAMP>bar.c</SAMP> and <SAMP>bar.f</SAMP> exist, <CODE>make</CODE> will =
choose=20
the first rule and compile <SAMP>bar.c</SAMP> into <SAMP>bar.o</SAMP>. =
In the=20
same situation where <SAMP>bar.c</SAMP> does not exist, then =
<CODE>make</CODE>=20
will choose the second rule and compile <SAMP>bar.f</SAMP> into=20
<SAMP>bar.o</SAMP>. </P>
<P>If <CODE>make</CODE> is asked to build <SAMP>lib/bar.o</SAMP> and =
both=20
<SAMP>lib/bar.c</SAMP> and <SAMP>lib/bar.f</SAMP> exist, then the third =
rule=20
will be chosen since the stem for this rule =
(=E2=80=98<SAMP>bar</SAMP>=E2=80=99) is shorter than=20
the stem for the first rule (=E2=80=98<SAMP>lib/bar</SAMP>=E2=80=99). If =
<SAMP>lib/bar.c</SAMP>=20
does not exist then the third rule is not eligible and the second rule =
will be=20
used, even though the stem is longer. </P>
<HR>
<A name=3DMatch_002dAnything-Rules></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Canceling-Rules=
"=20
rel=3Dnext>Canceling Rules</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Match" =

rel=3Dprev>Pattern Match</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Rules" =

rel=3Dup>Pattern Rules</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DMatch_002dAnything-Pattern-Rules></A>
<H4 class=3Dsubsection>10.5.5 Match-Anything Pattern Rules</H4><A=20
name=3Dindex-match_002danything-rule></A><A =
name=3Dindex-terminal-rule></A>
<P>When a pattern rule=E2=80=99s target is just =
=E2=80=98<SAMP>%</SAMP>=E2=80=99, it matches any file=20
name whatever. We call these rules <EM>match-anything</EM> rules. They =
are very=20
useful, but it can take a lot of time for <CODE>make</CODE> to think =
about them,=20
because it must consider every such rule for each file name listed =
either as a=20
target or as a prerequisite. </P>
<P>Suppose the makefile mentions <SAMP>foo.c</SAMP>. For this target,=20
<CODE>make</CODE> would have to consider making it by linking an object =
file=20
<SAMP>foo.c.o</SAMP>, or by C compilation-and-linking in one step from=20
<SAMP>foo.c.c</SAMP>, or by Pascal compilation-and-linking from=20
<SAMP>foo.c.p</SAMP>, and many other possibilities. </P>
<P>We know these possibilities are ridiculous since <SAMP>foo.c</SAMP> =
is a C=20
source file, not an executable. If <CODE>make</CODE> did consider these=20
possibilities, it would ultimately reject them, because files such as=20
<SAMP>foo.c.o</SAMP> and <SAMP>foo.c.p</SAMP> would not exist. But these =

possibilities are so numerous that <CODE>make</CODE> would run very =
slowly if it=20
had to consider them. </P>
<P>To gain speed, we have put various constraints on the way =
<CODE>make</CODE>=20
considers match-anything rules. There are two different constraints that =
can be=20
applied, and each time you define a match-anything rule you must choose =
one or=20
the other for that rule. </P>
<P>One choice is to mark the match-anything rule as <EM>terminal</EM> by =

defining it with a double colon. When a rule is terminal, it does not =
apply=20
unless its prerequisites actually exist. Prerequisites that could be =
made with=20
other implicit rules are not good enough. In other words, no further =
chaining is=20
allowed beyond a terminal rule. </P>
<P>For example, the built-in implicit rules for extracting sources from =
RCS and=20
SCCS files are terminal; as a result, if the file <SAMP>foo.c,v</SAMP> =
does not=20
exist, <CODE>make</CODE> will not even consider trying to make it as an=20
intermediate file from <SAMP>foo.c,v.o</SAMP> or from=20
<SAMP>RCS/SCCS/s.foo.c,v</SAMP>. RCS and SCCS files are generally =
ultimate=20
source files, which should not be remade from any other files; =
therefore,=20
<CODE>make</CODE> can save time by not looking for ways to remake them. =
</P>
<P>If you do not mark the match-anything rule as terminal, then it is=20
non-terminal. A non-terminal match-anything rule cannot apply to a file =
name=20
that indicates a specific type of data. A file name indicates a specific =
type of=20
data if some non-match-anything implicit rule target matches it. </P>
<P>For example, the file name <SAMP>foo.c</SAMP> matches the target for =
the=20
pattern rule =E2=80=98<SAMP>%.c : %.y</SAMP>=E2=80=99 (the rule to run =
Yacc). Regardless of=20
whether this rule is actually applicable (which happens only if there is =
a file=20
<SAMP>foo.y</SAMP>), the fact that its target matches is enough to =
prevent=20
consideration of any non-terminal match-anything rules for the file=20
<SAMP>foo.c</SAMP>. Thus, <CODE>make</CODE> will not even consider =
trying to=20
make <SAMP>foo.c</SAMP> as an executable file from <SAMP>foo.c.o</SAMP>, =

<SAMP>foo.c.c</SAMP>, <SAMP>foo.c.p</SAMP>, etc. </P>
<P>The motivation for this constraint is that non-terminal =
match-anything rules=20
are used for making files containing specific types of data (such as =
executable=20
files) and a file name with a recognized suffix indicates some other =
specific=20
type of data (such as a C source file). </P>
<P>Special built-in dummy pattern rules are provided solely to recognize =
certain=20
file names so that non-terminal match-anything rules will not be =
considered.=20
These dummy rules have no prerequisites and no recipes, and they are =
ignored for=20
all other purposes. For example, the built-in implicit rule </P>
<DIV class=3Dexample><PRE class=3Dexample>%.p :
</PRE></DIV>
<P>exists to make sure that Pascal source files such as =
<SAMP>foo.p</SAMP> match=20
a specific target pattern and thereby prevent time from being wasted =
looking for=20
<SAMP>foo.p.o</SAMP> or <SAMP>foo.p.c</SAMP>. </P>
<P>Dummy pattern rules such as the one for =
=E2=80=98<SAMP>%.p</SAMP>=E2=80=99 are made for every=20
suffix listed as valid for use in suffix rules (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Suffix-Rules">O=
ld-Fashioned=20
Suffix Rules</A>). </P>
<HR>
<A name=3DCanceling-Rules></A>
<DIV class=3Dheader>
<P>Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Match_002dAnyth=
ing-Rules"=20
rel=3Dprev>Match-Anything Rules</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Rules" =

rel=3Dup>Pattern Rules</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DCanceling-Implicit-Rules></A>
<H4 class=3Dsubsection>10.5.6 Canceling Implicit Rules</H4>
<P>You can override a built-in implicit rule (or one you have defined =
yourself)=20
by defining a new pattern rule with the same target and prerequisites, =
but a=20
different recipe. When the new rule is defined, the built-in one is =
replaced.=20
The new rule=E2=80=99s position in the sequence of implicit rules is =
determined by where=20
you write the new rule. </P>
<P>You can cancel a built-in implicit rule by defining a pattern rule =
with the=20
same target and prerequisites, but no recipe. For example, the following =
would=20
cancel the rule that runs the assembler: </P>
<DIV class=3Dexample><PRE class=3Dexample>%.o : %.s
</PRE></DIV>
<HR>
<A name=3DLast-Resort></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Suffix-Rules"=20
rel=3Dnext>Suffix Rules</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Rules" =

rel=3Dprev>Pattern Rules</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rules"=
=20
rel=3Dup>Implicit Rules</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A=20
name=3DDefining-Last_002dResort-Default-Rules></A>
<H3 class=3Dsection>10.6 Defining Last-Resort Default Rules</H3><A=20
name=3Dindex-last_002dresort-default-rules></A><A=20
name=3Dindex-default-rules_002c-last_002dresort></A>
<P>You can define a last-resort implicit rule by writing a terminal=20
match-anything pattern rule with no prerequisites (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Match_002dAnyth=
ing-Rules">Match-Anything=20
Rules</A>). This is just like any other pattern rule; the only thing =
special=20
about it is that it will match any target. So such a rule=E2=80=99s =
recipe is used for=20
all targets and prerequisites that have no recipe of their own and for =
which no=20
other implicit rule applies. </P>
<P>For example, when testing a makefile, you might not care if the =
source files=20
contain real data, only that they exist. Then you might do this: </P>
<DIV class=3Dexample><PRE class=3Dexample>%::
        touch $@
</PRE></DIV>
<P>to cause all the source files needed (as prerequisites) to be created =

automatically. </P><A name=3Dindex-_002eDEFAULT-1></A>
<P>You can instead define a recipe to be used for targets for which =
there are no=20
rules at all, even ones which don=E2=80=99t specify recipes. You do this =
by writing a=20
rule for the target <CODE>.DEFAULT</CODE>. Such a rule=E2=80=99s recipe =
is used for all=20
prerequisites which do not appear as targets in any explicit rule, and =
for which=20
no implicit rule applies. Naturally, there is no <CODE>.DEFAULT</CODE> =
rule=20
unless you write one. </P>
<P>If you use <CODE>.DEFAULT</CODE> with no recipe or prerequisites: =
</P>
<DIV class=3Dexample><PRE class=3Dexample>.DEFAULT:
</PRE></DIV>
<P>the recipe previously stored for <CODE>.DEFAULT</CODE> is cleared. =
Then=20
<CODE>make</CODE> acts as if you had never defined <CODE>.DEFAULT</CODE> =
at all.=20
</P>
<P>If you do not want a target to get the recipe from a match-anything =
pattern=20
rule or <CODE>.DEFAULT</CODE>, but you also do not want any recipe to be =
run for=20
the target, you can give it an empty recipe (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Empty-Recipes">=
Defining=20
Empty Recipes</A>). </P>
<P>You can use a last-resort rule to override part of another makefile. =
See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Overriding-Make=
files">Overriding=20
Part of Another Makefile</A>. </P>
<HR>
<A name=3DSuffix-Rules></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rule-S=
earch"=20
rel=3Dnext>Implicit Rule Search</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Last-Resort"=20
rel=3Dprev>Last Resort</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rules"=
=20
rel=3Dup>Implicit Rules</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DOld_002dFashioned-Suffix-Rules></A>
<H3 class=3Dsection>10.7 Old-Fashioned Suffix Rules</H3><A=20
name=3Dindex-old_002dfashioned-suffix-rules></A><A =
name=3Dindex-suffix-rule></A>
<P><EM>Suffix rules</EM> are the old-fashioned way of defining implicit =
rules=20
for <CODE>make</CODE>. Suffix rules are obsolete because pattern rules =
are more=20
general and clearer. They are supported in GNU <CODE>make</CODE> for=20
compatibility with old makefiles. They come in two kinds: =
<EM>double-suffix</EM>=20
and <EM>single-suffix</EM>. </P>
<P>A double-suffix rule is defined by a pair of suffixes: the target =
suffix and=20
the source suffix. It matches any file whose name ends with the target =
suffix.=20
The corresponding implicit prerequisite is made by replacing the target =
suffix=20
with the source suffix in the file name. A two-suffix rule whose target =
and=20
source suffixes are =E2=80=98<SAMP>.o</SAMP>=E2=80=99 and =
=E2=80=98<SAMP>.c</SAMP>=E2=80=99 is equivalent to the=20
pattern rule =E2=80=98<SAMP>%.o : %.c</SAMP>=E2=80=99. </P>
<P>A single-suffix rule is defined by a single suffix, which is the =
source=20
suffix. It matches any file name, and the corresponding implicit =
prerequisite=20
name is made by appending the source suffix. A single-suffix rule whose =
source=20
suffix is =E2=80=98<SAMP>.c</SAMP>=E2=80=99 is equivalent to the pattern =
rule =E2=80=98<SAMP>% :=20
%.c</SAMP>=E2=80=99. </P>
<P>Suffix rule definitions are recognized by comparing each =
rule=E2=80=99s target=20
against a defined list of known suffixes. When <CODE>make</CODE> sees a =
rule=20
whose target is a known suffix, this rule is considered a single-suffix =
rule.=20
When <CODE>make</CODE> sees a rule whose target is two known suffixes=20
concatenated, this rule is taken as a double-suffix rule. </P>
<P>For example, =E2=80=98<SAMP>.c</SAMP>=E2=80=99 and =
=E2=80=98<SAMP>.o</SAMP>=E2=80=99 are both on the default=20
list of known suffixes. Therefore, if you define a rule whose target is=20
=E2=80=98<SAMP>.c.o</SAMP>=E2=80=99, <CODE>make</CODE> takes it to be a =
double-suffix rule with=20
source suffix =E2=80=98<SAMP>.c</SAMP>=E2=80=99 and target suffix =
=E2=80=98<SAMP>.o</SAMP>=E2=80=99. Here is the=20
old-fashioned way to define the rule for compiling a C source file: </P>
<DIV class=3Dexample><PRE class=3Dexample>.c.o:
        $(CC) -c $(CFLAGS) $(CPPFLAGS) -o $@ $&lt;
</PRE></DIV>
<P>Suffix rules cannot have any prerequisites of their own. If they have =
any,=20
they are treated as normal files with funny names, not as suffix rules. =
Thus,=20
the rule: </P>
<DIV class=3Dexample><PRE class=3Dexample>.c.o: foo.h
        $(CC) -c $(CFLAGS) $(CPPFLAGS) -o $@ $&lt;
</PRE></DIV>
<P>tells how to make the file <SAMP>.c.o</SAMP> from the prerequisite =
file=20
<SAMP>foo.h</SAMP>, and is not at all like the pattern rule: </P>
<DIV class=3Dexample><PRE class=3Dexample>%.o: %.c foo.h
        $(CC) -c $(CFLAGS) $(CPPFLAGS) -o $@ $&lt;
</PRE></DIV>
<P>which tells how to make =E2=80=98<SAMP>.o</SAMP>=E2=80=99 files from =
=E2=80=98<SAMP>.c</SAMP>=E2=80=99 files,=20
and makes all =E2=80=98<SAMP>.o</SAMP>=E2=80=99 files using this pattern =
rule also depend on=20
<SAMP>foo.h</SAMP>. </P>
<P>Suffix rules with no recipe are also meaningless. They do not remove =
previous=20
rules as do pattern rules with no recipe (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Canceling-Rules=
">Canceling=20
Implicit Rules</A>). They simply enter the suffix or pair of suffixes=20
concatenated as a target in the data base. </P><A=20
name=3Dindex-_002eSUFFIXES-1></A>
<P>The known suffixes are simply the names of the prerequisites of the =
special=20
target <CODE>.SUFFIXES</CODE>. You can add your own suffixes by writing =
a rule=20
for <CODE>.SUFFIXES</CODE> that adds more prerequisites, as in: </P>
<DIV class=3Dexample><PRE class=3Dexample>.SUFFIXES: .hack .win
</PRE></DIV>
<P>which adds =E2=80=98<SAMP>.hack</SAMP>=E2=80=99 and =
=E2=80=98<SAMP>.win</SAMP>=E2=80=99 to the end of the=20
list of suffixes. </P>
<P>If you wish to eliminate the default known suffixes instead of just =
adding to=20
them, write a rule for <CODE>.SUFFIXES</CODE> with no prerequisites. By =
special=20
dispensation, this eliminates all existing prerequisites of=20
<CODE>.SUFFIXES</CODE>. You can then write another rule to add the =
suffixes you=20
want. For example, </P>
<DIV class=3Dexample><PRE class=3Dexample>.SUFFIXES:            # <SPAN =
class=3Droman>Delete the default suffixes</SPAN>
.SUFFIXES: .c .o .h   # <SPAN class=3Droman>Define our suffix =
list</SPAN>
</PRE></DIV>
<P>The =E2=80=98<SAMP>-r</SAMP>=E2=80=99 or =
=E2=80=98<SAMP>--no-builtin-rules</SAMP>=E2=80=99 flag causes the=20
default list of suffixes to be empty. </P><A name=3Dindex-SUFFIXES></A>
<P>The variable <CODE>SUFFIXES</CODE> is defined to the default list of =
suffixes=20
before <CODE>make</CODE> reads any makefiles. You can change the list of =

suffixes with a rule for the special target <CODE>.SUFFIXES</CODE>, but =
that=20
does not alter this variable. </P>
<HR>
<A name=3DImplicit-Rule-Search></A>
<DIV class=3Dheader>
<P>Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Suffix-Rules"=20
rel=3Dprev>Suffix Rules</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rules"=
=20
rel=3Dup>Implicit Rules</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DImplicit-Rule-Search-Algorithm></A>
<H3 class=3Dsection>10.8 Implicit Rule Search Algorithm</H3><A=20
name=3Dindex-implicit-rule_002c-search-algorithm></A><A=20
name=3Dindex-search-algorithm_002c-implicit-rule></A>
<P>Here is the procedure <CODE>make</CODE> uses for searching for an =
implicit=20
rule for a target <VAR>t</VAR>. This procedure is followed for each =
double-colon=20
rule with no recipe, for each target of ordinary rules none of which =
have a=20
recipe, and for each prerequisite that is not the target of any rule. It =
is also=20
followed recursively for prerequisites that come from implicit rules, in =
the=20
search for a chain of rules. </P>
<P>Suffix rules are not mentioned in this algorithm because suffix rules =
are=20
converted to equivalent pattern rules once the makefiles have been read =
in. </P>
<P>For an archive member target of the form=20
=E2=80=98<SAMP><VAR>archive</VAR>(<VAR>member</VAR>)</SAMP>=E2=80=99, =
the following algorithm is=20
run twice, first using the entire target name <VAR>t</VAR>, and second =
using=20
=E2=80=98<SAMP>(<VAR>member</VAR>)</SAMP>=E2=80=99 as the target =
<VAR>t</VAR> if the first run=20
found no rule. </P>
<OL>
  <LI>Split <VAR>t</VAR> into a directory part, called <VAR>d</VAR>, and =
the=20
  rest, called <VAR>n</VAR>. For example, if <VAR>t</VAR> is=20
  =E2=80=98<SAMP>src/foo.o</SAMP>=E2=80=99, then <VAR>d</VAR> is =
=E2=80=98<SAMP>src/</SAMP>=E2=80=99 and=20
  <VAR>n</VAR> is =E2=80=98<SAMP>foo.o</SAMP>=E2=80=99. </LI>
  <LI>Make a list of all the pattern rules one of whose targets matches=20
  <VAR>t</VAR> or <VAR>n</VAR>. If the target pattern contains a slash, =
it is=20
  matched against <VAR>t</VAR>; otherwise, against <VAR>n</VAR>. </LI>
  <LI>If any rule in that list is <EM>not</EM> a match-anything rule, =
then=20
  remove all non-terminal match-anything rules from the list. </LI>
  <LI>Remove from the list all rules with no recipe. </LI>
  <LI>For each pattern rule in the list:=20
  <OL>
    <LI>Find the stem <VAR>s</VAR>, which is the nonempty part of =
<VAR>t</VAR>=20
    or <VAR>n</VAR> matched by the =E2=80=98<SAMP>%</SAMP>=E2=80=99 in =
the target pattern. </LI>
    <LI>Compute the prerequisite names by substituting <VAR>s</VAR> for=20
    =E2=80=98<SAMP>%</SAMP>=E2=80=99; if the target pattern does not =
contain a slash, append=20
    <VAR>d</VAR> to the front of each prerequisite name. </LI>
    <LI>Test whether all the prerequisites exist or ought to exist. (If =
a file=20
    name is mentioned in the makefile as a target or as an explicit=20
    prerequisite, then we say it ought to exist.)=20
    <P>If all prerequisites exist or ought to exist, or there are no=20
    prerequisites, then this rule applies. </P></LI></OL></LI>
  <LI>If no pattern rule has been found so far, try harder. For each =
pattern=20
  rule in the list:=20
  <OL>
    <LI>If the rule is terminal, ignore it and go on to the next rule. =
</LI>
    <LI>Compute the prerequisite names as before. </LI>
    <LI>Test whether all the prerequisites exist or ought to exist. =
</LI>
    <LI>For each prerequisite that does not exist, follow this algorithm =

    recursively to see if the prerequisite can be made by an implicit =
rule.=20
</LI>
    <LI>If all prerequisites exist, ought to exist, or can be made by =
implicit=20
    rules, then this rule applies. </LI></OL></LI>
  <LI>If no implicit rule applies, the rule for <CODE>.DEFAULT</CODE>, =
if any,=20
  applies. In that case, give <VAR>t</VAR> the same recipe that=20
  <CODE>.DEFAULT</CODE> has. Otherwise, there is no recipe for =
<VAR>t</VAR>.=20
  </LI></OL>
<P>Once a rule that applies has been found, for each target pattern of =
the rule=20
other than the one that matched <VAR>t</VAR> or <VAR>n</VAR>, the=20
=E2=80=98<SAMP>%</SAMP>=E2=80=99 in the pattern is replaced with =
<VAR>s</VAR> and the resultant=20
file name is stored until the recipe to remake the target file =
<VAR>t</VAR> is=20
executed. After the recipe is executed, each of these stored file names =
are=20
entered into the data base and marked as having been updated and having =
the same=20
update status as the file <VAR>t</VAR>. </P>
<P>When the recipe of a pattern rule is executed for <VAR>t</VAR>, the =
automatic=20
variables are set corresponding to the target and prerequisites. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
Variables</A>. </P>
<HR>
<A name=3DArchives></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Extending-make"=
=20
rel=3Dnext>Extending make</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rules"=
=20
rel=3Dprev>Implicit Rules</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Top" =
rel=3Dup>Top</A>=20
&nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DUsing-make-to-Update-Archive-Files></A>
<H2 class=3Dchapter>11 Using <CODE>make</CODE> to Update Archive =
Files</H2><A=20
name=3Dindex-archive></A>
<P><EM>Archive files</EM> are files containing named sub-files called=20
<EM>members</EM>; they are maintained with the program <CODE>ar</CODE> =
and their=20
main use is as subroutine libraries for linking. </P>
<TABLE class=3Dmenu border=3D0 cellSpacing=3D0>
  <TBODY>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D1=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Members=
">Archive=20
      Members</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Archive members as targets. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D2=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Update"=
>Archive=20
      Update</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>The implicit rule for archive member =
targets.=20
  </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D3=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Pitfall=
s">Archive=20
      Pitfalls</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Dangers to watch out for when using =
archives.=20
  </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D4=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Suffix-=
Rules">Archive=20
      Suffix Rules</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>You can write a special kind of suffix =
rule for=20
      updating archives. </TD></TR></TBODY></TABLE>
<HR>
<A name=3DArchive-Members></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Update"=
=20
rel=3Dnext>Archive Update</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Archives"=20
rel=3Dprev>Archives</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Archives"=20
rel=3Dup>Archives</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DArchive-Members-as-Targets></A>
<H3 class=3Dsection>11.1 Archive Members as Targets</H3><A=20
name=3Dindex-archive-member-targets></A>
<P>An individual member of an archive file can be used as a target or=20
prerequisite in <CODE>make</CODE>. You specify the member named=20
<VAR>member</VAR> in archive file <VAR>archive</VAR> as follows: </P>
<DIV class=3Dexample><PRE =
class=3Dexample><VAR>archive</VAR>(<VAR>member</VAR>)
</PRE></DIV>
<P>This construct is available only in targets and prerequisites, not in =

recipes! Most programs that you might use in recipes do not support this =
syntax=20
and cannot act directly on archive members. Only <CODE>ar</CODE> and =
other=20
programs specifically designed to operate on archives can do so. =
Therefore,=20
valid recipes to update an archive member target probably must use=20
<CODE>ar</CODE>. For example, this rule says to create a member=20
<SAMP>hack.o</SAMP> in archive <SAMP>foolib</SAMP> by copying the file=20
<SAMP>hack.o</SAMP>: </P>
<DIV class=3Dexample><PRE class=3Dexample>foolib(hack.o) : hack.o
        ar cr foolib hack.o
</PRE></DIV>
<P>In fact, nearly all archive member targets are updated in just this =
way and=20
there is an implicit rule to do it for you. <STRONG>Please =
note:</STRONG> The=20
=E2=80=98<SAMP>c</SAMP>=E2=80=99 flag to <CODE>ar</CODE> is required if =
the archive file does=20
not already exist. </P>
<P>To specify several members in the same archive, you can write all the =
member=20
names together between the parentheses. For example: </P>
<DIV class=3Dexample><PRE class=3Dexample>foolib(hack.o kludge.o)
</PRE></DIV>
<P>is equivalent to: </P>
<DIV class=3Dexample><PRE class=3Dexample>foolib(hack.o) =
foolib(kludge.o)
</PRE></DIV><A name=3Dindex-wildcard_002c-in-archive-member></A>
<P>You can also use shell-style wildcards in an archive member =
reference. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcards">Usin=
g=20
Wildcard Characters in File Names</A>. For example, =
=E2=80=98<SAMP>foolib(*.o)</SAMP>=E2=80=99<!-- /@w --> expands to all =
existing members of the=20
<SAMP>foolib</SAMP> archive whose names end in =
=E2=80=98<SAMP>.o</SAMP>=E2=80=99; perhaps=20
=E2=80=98<SAMP>foolib(hack.o)<!-- /@w --> foolib(kludge.o)<!-- /@w =
--></SAMP>=E2=80=99. </P>
<HR>
<A name=3DArchive-Update></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Pitfall=
s"=20
rel=3Dnext>Archive Pitfalls</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Members=
"=20
rel=3Dprev>Archive Members</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Archives"=20
rel=3Dup>Archives</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A=20
name=3DImplicit-Rule-for-Archive-Member-Targets></A>
<H3 class=3Dsection>11.2 Implicit Rule for Archive Member Targets</H3>
<P>Recall that a target that looks like =
<SAMP><VAR>a</VAR>(<VAR>m</VAR>)</SAMP>=20
stands for the member named <VAR>m</VAR> in the archive file =
<VAR>a</VAR>. </P>
<P>When <CODE>make</CODE> looks for an implicit rule for such a target, =
as a=20
special feature it considers implicit rules that match=20
<SAMP>(<VAR>m</VAR>)</SAMP>, as well as those that match the actual =
target=20
<SAMP><VAR>a</VAR>(<VAR>m</VAR>)</SAMP>. </P>
<P>This causes one special rule whose target is <SAMP>(%)</SAMP> to =
match. This=20
rule updates the target <SAMP><VAR>a</VAR>(<VAR>m</VAR>)</SAMP> by =
copying the=20
file <VAR>m</VAR> into the archive. For example, it will update the =
archive=20
member target <SAMP>foo.a(bar.o)</SAMP> by copying the <EM>file</EM>=20
<SAMP>bar.o</SAMP> into the archive <SAMP>foo.a</SAMP> as a =
<EM>member</EM>=20
named <SAMP>bar.o</SAMP>. </P>
<P>When this rule is chained with others, the result is very powerful. =
Thus,=20
=E2=80=98<SAMP>make "foo.a(bar.o)"</SAMP>=E2=80=99 (the quotes are =
needed to protect the=20
=E2=80=98<SAMP>(</SAMP>=E2=80=99 and =E2=80=98<SAMP>)</SAMP>=E2=80=99 =
from being interpreted specially by the=20
shell) in the presence of a file <SAMP>bar.c</SAMP> is enough to cause =
the=20
following recipe to be run, even without a makefile: </P>
<DIV class=3Dexample><PRE class=3Dexample>cc -c bar.c -o bar.o
ar r foo.a bar.o
rm -f bar.o
</PRE></DIV>
<P>Here <CODE>make</CODE> has envisioned the file <SAMP>bar.o</SAMP> as =
an=20
intermediate file. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Chained-Rules">=
Chains of=20
Implicit Rules</A>. </P>
<P>Implicit rules such as this one are written using the automatic =
variable=20
=E2=80=98<SAMP>$%</SAMP>=E2=80=99. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
Variables</A>. </P>
<P>An archive member name in an archive cannot contain a directory name, =
but it=20
may be useful in a makefile to pretend that it does. If you write an =
archive=20
member target <SAMP>foo.a(dir/file.o)</SAMP>, <CODE>make</CODE> will =
perform=20
automatic updating with this recipe: </P>
<DIV class=3Dexample><PRE class=3Dexample>ar r foo.a dir/file.o
</PRE></DIV>
<P>which has the effect of copying the file <SAMP>dir/file.o</SAMP> into =
a=20
member named <SAMP>file.o</SAMP>. In connection with such usage, the =
automatic=20
variables <CODE>%D</CODE> and <CODE>%F</CODE> may be useful. </P>
<TABLE class=3Dmenu border=3D0 cellSpacing=3D0>
  <TBODY>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D1=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Symbols=
">Archive=20
      Symbols</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How to update archive symbol =
directories.=20
  </TD></TR></TBODY></TABLE>
<HR>
<A name=3DArchive-Symbols></A>
<DIV class=3Dheader>
<P>Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Update"=
=20
rel=3Dprev>Archive Update</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Update"=
=20
rel=3Dup>Archive Update</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DUpdating-Archive-Symbol-Directories></A>
<H4 class=3Dsubsection>11.2.1 Updating Archive Symbol Directories</H4><A =

name=3Dindex-_005f_005f_002eSYMDEF></A><A=20
name=3Dindex-updating-archive-symbol-directories></A><A=20
name=3Dindex-archive-symbol-directory-updating></A><A=20
name=3Dindex-symbol-directories_002c-updating-archive></A><A=20
name=3Dindex-directories_002c-updating-archive-symbol></A>
<P>An archive file that is used as a library usually contains a special =
member=20
named <SAMP>__.SYMDEF</SAMP> that contains a directory of the external =
symbol=20
names defined by all the other members. After you update any other =
members, you=20
need to update <SAMP>__.SYMDEF</SAMP> so that it will summarize the =
other=20
members properly. This is done by running the <CODE>ranlib</CODE> =
program: </P>
<DIV class=3Dexample><PRE class=3Dexample>ranlib <VAR>archivefile</VAR>
</PRE></DIV>
<P>Normally you would put this command in the rule for the archive file, =
and=20
make all the members of the archive file prerequisites of that rule. For =

example, </P>
<DIV class=3Dexample><PRE class=3Dexample>libfoo.a: libfoo.a(x.o) =
libfoo.a(y.o) =E2=80=A6
        ranlib libfoo.a
</PRE></DIV>
<P>The effect of this is to update archive members <SAMP>x.o</SAMP>,=20
<SAMP>y.o</SAMP>, etc., and then update the symbol directory member=20
<SAMP>__.SYMDEF</SAMP> by running <CODE>ranlib</CODE>. The rules for =
updating=20
the members are not shown here; most likely you can omit them and use =
the=20
implicit rule which copies files into the archive, as described in the =
preceding=20
section. </P>
<P>This is not necessary when using the GNU <CODE>ar</CODE> program, =
which=20
updates the <SAMP>__.SYMDEF</SAMP> member automatically. </P>
<HR>
<A name=3DArchive-Pitfalls></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Suffix-=
Rules"=20
rel=3Dnext>Archive Suffix Rules</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Update"=
=20
rel=3Dprev>Archive Update</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Archives"=20
rel=3Dup>Archives</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DDangers-When-Using-Archives></A>
<H3 class=3Dsection>11.3 Dangers When Using Archives</H3><A=20
name=3Dindex-archive_002c-and-parallel-execution></A><A=20
name=3Dindex-parallel-execution_002c-and-archive-update></A><A=20
name=3Dindex-archive_002c-and-_002dj></A><A=20
name=3Dindex-_002dj_002c-and-archive-update></A>
<P>It is important to be careful when using parallel execution (the=20
<CODE>-j</CODE> switch; see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel">Paral=
lel=20
Execution</A>) and archives. If multiple <CODE>ar</CODE> commands run at =
the=20
same time on the same archive file, they will not know about each other =
and can=20
corrupt the file. </P>
<P>Possibly a future version of <CODE>make</CODE> will provide a =
mechanism to=20
circumvent this problem by serializing all recipes that operate on the =
same=20
archive file. But for the time being, you must either write your =
makefiles to=20
avoid this problem in some other way, or not use <CODE>-j</CODE>. </P>
<HR>
<A name=3DArchive-Suffix-Rules></A>
<DIV class=3Dheader>
<P>Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Pitfall=
s"=20
rel=3Dprev>Archive Pitfalls</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Archives"=20
rel=3Dup>Archives</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DSuffix-Rules-for-Archive-Files></A>
<H3 class=3Dsection>11.4 Suffix Rules for Archive Files</H3><A=20
name=3Dindex-suffix-rule_002c-for-archive></A><A=20
name=3Dindex-archive_002c-suffix-rule-for></A><A=20
name=3Dindex-library-archive_002c-suffix-rule-for></A><A=20
name=3Dindex-_002ea-_0028archives_0029></A>
<P>You can write a special kind of suffix rule for dealing with archive =
files.=20
See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Suffix-Rules">S=
uffix=20
Rules</A>, for a full explanation of suffix rules. Archive suffix rules =
are=20
obsolete in GNU <CODE>make</CODE>, because pattern rules for archives =
are a more=20
general mechanism (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Update"=
>Archive=20
Update</A>). But they are retained for compatibility with other=20
<CODE>make</CODE>s. </P>
<P>To write a suffix rule for archives, you simply write a suffix rule =
using the=20
target suffix =E2=80=98<SAMP>.a</SAMP>=E2=80=99 (the usual suffix for =
archive files). For=20
example, here is the old-fashioned suffix rule to update a library =
archive from=20
C source files: </P>
<DIV class=3Dexample><PRE class=3Dexample>.c.a:
        $(CC) $(CFLAGS) $(CPPFLAGS) -c $&lt; -o $*.o
        $(AR) r $@ $*.o
        $(RM) $*.o
</PRE></DIV>
<P>This works just as if you had written the pattern rule: </P>
<DIV class=3Dexample><PRE class=3Dexample>(%.o): %.c
        $(CC) $(CFLAGS) $(CPPFLAGS) -c $&lt; -o $*.o
        $(AR) r $@ $*.o
        $(RM) $*.o
</PRE></DIV>
<P>In fact, this is just what <CODE>make</CODE> does when it sees a =
suffix rule=20
with =E2=80=98<SAMP>.a</SAMP>=E2=80=99 as the target suffix. Any =
double-suffix rule=20
=E2=80=98<SAMP>.<VAR>x</VAR>.a</SAMP>=E2=80=99<!-- /@w --> is converted =
to a pattern rule with=20
the target pattern =E2=80=98<SAMP>(%.o)</SAMP>=E2=80=99 and a =
prerequisite pattern of=20
=E2=80=98<SAMP>%.<VAR>x</VAR></SAMP>=E2=80=99. </P>
<P>Since you might want to use =E2=80=98<SAMP>.a</SAMP>=E2=80=99 as the =
suffix for some other=20
kind of file, <CODE>make</CODE> also converts archive suffix rules to =
pattern=20
rules in the normal way (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Suffix-Rules">S=
uffix=20
Rules</A>). Thus a double-suffix rule =
=E2=80=98<SAMP>.<VAR>x</VAR>.a</SAMP>=E2=80=99<!-- /@w -->=20
produces two pattern rules: =E2=80=98<SAMP>(%.o):<!-- /@w -->=20
%.<VAR>x</VAR><!-- /@w --></SAMP>=E2=80=99 and =E2=80=98<SAMP>%.a<!-- =
/@w -->: %.<VAR>x</VAR><!-- /@w --></SAMP>=E2=80=99. </P>
<HR>
<A name=3DExtending-make></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Features"=20
rel=3Dnext>Features</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Archives"=20
rel=3Dprev>Archives</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Top" =
rel=3Dup>Top</A>=20
&nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DExtending-GNU-make></A>
<H2 class=3Dchapter>12 Extending GNU <CODE>make</CODE></H2><A=20
name=3Dindex-make-extensions></A>
<P>GNU <CODE>make</CODE> provides many advanced capabilities, including =
many=20
useful functions. However, it does not contain a complete programming =
language=20
and so it has limitations. Sometimes these limitations can be overcome =
through=20
use of the <CODE>shell</CODE> function to invoke a separate program, =
although=20
this can be inefficient. </P>
<P>In cases where the built-in capabilities of GNU <CODE>make</CODE> are =

insufficient to your requirements there are two options for extending=20
<CODE>make</CODE>. On systems where it=E2=80=99s provided, you can =
utilize GNU Guile as=20
an embedded scripting language (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Integrati=
on">GNU=20
Guile Integration</A>). On systems which support dynamically loadable =
objects,=20
you can write your own extension in any language (which can be compiled =
into=20
such an object) and load it to provide extended capabilities (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#load-Directive"=
>The=20
<CODE>load</CODE> Directive</A>). </P>
<TABLE class=3Dmenu border=3D0 cellSpacing=3D0>
  <TBODY>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D1=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Integrati=
on">Guile=20
      Integration</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Using Guile as an embedded scripting =
language.=20
    </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D2=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Loading-Objects=
">Loading=20
      Objects</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Loading dynamic objects as extensions. =

  </TD></TR></TBODY></TABLE>
<HR>
<A name=3DGuile-Integration></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Loading-Objects=
"=20
rel=3Dnext>Loading Objects</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Extending-make"=
=20
rel=3Dprev>Extending make</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Extending-make"=
=20
rel=3Dup>Extending make</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DGNU-Guile-Integration></A>
<H3 class=3Dsection>12.1 GNU Guile Integration</H3><A =
name=3Dindex-Guile-1></A><A=20
name=3Dindex-extensions_002c-Guile></A>
<P>GNU <CODE>make</CODE> may be built with support for GNU Guile as an =
embedded=20
extension language. Guile implements the Scheme language. A review of =
GNU Guile=20
and the Scheme language and its features is beyond the scope of this =
manual: see=20
the documentation for GNU Guile and Scheme. </P>
<P>You can determine if <CODE>make</CODE> contains support for Guile by=20
examining the <CODE>.FEATURES</CODE> variable; it will contain the word=20
<VAR>guile</VAR> if Guile support is available. </P>
<P>The Guile integration provides one new <CODE>make</CODE> function:=20
<CODE>guile</CODE>. The <CODE>guile</CODE> function takes one argument =
which is=20
first expanded by <CODE>make</CODE> in the normal fashion, then passed =
to the=20
GNU Guile evaluator. The result of the evaluator is converted into a =
string and=20
used as the expansion of the <CODE>guile</CODE> function in the =
makefile. </P>
<P>In addition, GNU <CODE>make</CODE> exposes Guile procedures for use =
in Guile=20
scripts. </P>
<TABLE class=3Dmenu border=3D0 cellSpacing=3D0>
  <TBODY>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D1=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Types">Gu=
ile=20
      Types</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Converting Guile types to =
<CODE>make</CODE>=20
      strings. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D2=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Interface=
">Guile=20
      Interface</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Invoking <CODE>make</CODE> functions =
from Guile.=20
    </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D3=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Example">=
Guile=20
      Example</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Example using Guile in =
<CODE>make</CODE>.=20
  </TD></TR></TBODY></TABLE>
<HR>
<A name=3DGuile-Types></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Interface=
"=20
rel=3Dnext>Guile Interface</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Integrati=
on"=20
rel=3Dprev>Guile Integration</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Integrati=
on"=20
rel=3Dup>Guile Integration</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DConversion-of-Guile-Types></A>
<H4 class=3Dsubsection>12.1.1 Conversion of Guile Types</H4><A=20
name=3Dindex-convert-guile-types></A><A=20
name=3Dindex-guile_002c-conversion-of-types></A><A=20
name=3Dindex-types_002c-conversion-of></A>
<P>There is only one =E2=80=9Cdata type=E2=80=9D in <CODE>make</CODE>: a =
string. GNU Guile, on=20
the other hand, provides a rich variety of different data types. An =
important=20
aspect of the interface between <CODE>make</CODE> and GNU Guile is the=20
conversion of Guile data types into <CODE>make</CODE> strings. </P>
<P>This conversion is relevant in two places: when a makefile invokes =
the=20
<CODE>guile</CODE> function to evaluate a Guile expression, the result =
of that=20
evaluation must be converted into a make string so it can be further =
evaluated=20
by <CODE>make</CODE>. And secondly, when a Guile script invokes one of =
the=20
procedures exported by <CODE>make</CODE> the argument provided to the =
procedure=20
must be converted into a string. </P>
<P>The conversion of Guile types into <CODE>make</CODE> strings is as =
below:=20
</P>
<DL compact>
  <DT><CODE>#f</CODE></DT>
  <DD>
  <P>False is converted into the empty string: in <CODE>make</CODE> =
conditionals=20
  the empty string is considered false. </P></DD>
  <DT><CODE>#t</CODE></DT>
  <DD>
  <P>True is converted to the string =E2=80=98<SAMP>#t</SAMP>=E2=80=99: =
in <CODE>make</CODE>=20
  conditionals any non-empty string is considered true. </P></DD>
  <DT><CODE>symbol</CODE></DT>
  <DT><CODE>number</CODE></DT>
  <DD>
  <P>A symbol or number is converted into the string representation of =
that=20
  symbol or number. </P></DD>
  <DT><CODE>character</CODE></DT>
  <DD>
  <P>A printable character is converted to the same character. </P></DD>
  <DT><CODE>string</CODE></DT>
  <DD>
  <P>A string containing only printable characters is converted to the =
same=20
  string. </P></DD>
  <DT><CODE>list</CODE></DT>
  <DD>
  <P>A list is converted recursively according to the above rules. This =
implies=20
  that any structured list will be flattened (that is, a result of =
=E2=80=98<SAMP>'(a b=20
  (c d) e)</SAMP>=E2=80=99 will be converted to the <CODE>make</CODE> =
string =E2=80=98<SAMP>a b=20
  c d e</SAMP>=E2=80=99). </P></DD>
  <DT><CODE>other</CODE></DT>
  <DD>
  <P>Any other Guile type results in an error. In future versions of=20
  <CODE>make</CODE>, other Guile types may be converted. </P></DD></DL>
<P>The translation of =E2=80=98<SAMP>#f</SAMP>=E2=80=99 (to the empty =
string) and=20
=E2=80=98<SAMP>#t</SAMP>=E2=80=99 (to the non-empty string =
=E2=80=98<SAMP>#t</SAMP>=E2=80=99) is designed to=20
allow you to use Guile boolean results directly as <CODE>make</CODE> =
boolean=20
conditions. For example: </P>
<DIV class=3Dexample><PRE class=3Dexample>$(if $(guile (access? "myfile" =
R_OK)),$(info myfile exists))
</PRE></DIV>
<P>As a consequence of these conversion rules you must consider the =
result of=20
your Guile script, as that result will be converted into a string and =
parsed by=20
<CODE>make</CODE>. If there is no natural result for the script (that =
is, the=20
script exists solely for its side-effects), you should add =
=E2=80=98<SAMP>#f</SAMP>=E2=80=99 as=20
the final expression in order to avoid syntax errors in your makefile. =
</P>
<HR>
<A name=3DGuile-Interface></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Example" =

rel=3Dnext>Guile Example</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Types"=20
rel=3Dprev>Guile Types</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Integrati=
on"=20
rel=3Dup>Guile Integration</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DInterfaces-from-Guile-to-make></A>
<H4 class=3Dsubsection>12.1.2 Interfaces from Guile to =
<CODE>make</CODE></H4><A=20
name=3Dindex-make-interface-to-guile></A><A=20
name=3Dindex-make-procedures-in-guile></A>
<P>In addition to the <CODE>guile</CODE> function available in =
makefiles,=20
<CODE>make</CODE> exposes some procedures for use in your Guile scripts. =
At=20
startup <CODE>make</CODE> creates a new Guile module, <CODE>gnu =
make</CODE>, and=20
exports these procedures as public interfaces from that module: </P>
<DL compact>
  <DT><CODE>gmk-expand</CODE></DT>
  <DD><A name=3Dindex-gmk_002dexpand></A>
  <P>This procedure takes a single argument which is converted into a =
string.=20
  The string is expanded by <CODE>make</CODE> using normal =
<CODE>make</CODE>=20
  expansion rules. The result of the expansion is converted into a Guile =
string=20
  and provided as the result of the procedure. </P></DD>
  <DT><CODE>gmk-eval</CODE></DT>
  <DD><A name=3Dindex-gmk_002deval></A>
  <P>This procedure takes a single argument which is converted into a =
string.=20
  The string is evaluated by <CODE>make</CODE> as if it were a makefile. =
This is=20
  the same capability available via the <CODE>eval</CODE> function (see =
<A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Eval-Function">=
Eval=20
  Function</A>). The result of the <CODE>gmk-eval</CODE> procedure is =
always the=20
  empty string. </P>
  <P>Note that <CODE>gmk-eval</CODE> is not quite the same as using=20
  <CODE>gmk-expand</CODE> with the <CODE>eval</CODE> function: in the =
latter=20
  case the evaluated string will be expanded <EM>twice</EM>; first by=20
  <CODE>gmk-expand</CODE>, then again by the <CODE>eval</CODE> function. =

  </P></DD></DL>
<HR>
<A name=3DGuile-Example></A>
<DIV class=3Dheader>
<P>Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Interface=
"=20
rel=3Dprev>Guile Interface</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Integrati=
on"=20
rel=3Dup>Guile Integration</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DExample-Using-Guile-in-make></A>
<H4 class=3Dsubsection>12.1.3 Example Using Guile in =
<CODE>make</CODE></H4><A=20
name=3Dindex-Guile-example></A><A name=3Dindex-example-using-Guile></A>
<P>Here is a very simple example using GNU Guile to manage writing to a =
file.=20
These Guile procedures simply open a file, allow writing to the file =
(one string=20
per line), and close the file. Note that because we cannot store complex =
values=20
such as Guile ports in <CODE>make</CODE> variables, we=E2=80=99ll keep =
the port as a=20
global variable in the Guile interpreter. </P>
<P>You can create Guile functions easily using=20
<CODE>define</CODE>/<CODE>endef</CODE> to create a Guile script, then =
use the=20
<CODE>guile</CODE> function to internalize it: </P>
<DIV class=3Dexample><PRE class=3Dexample>define GUILEIO
;; A simple Guile IO library for GNU make

(define MKPORT #f)

(define (mkopen name mode)
  (set! MKPORT (open-file name mode))
  #f)

(define (mkwrite s)
  (display s MKPORT)
  (newline MKPORT)
  #f)

(define (mkclose)
  (close-port MKPORT)
  #f)

#f
endef

# Internalize the Guile IO functions
$(guile $(GUILEIO))
</PRE></DIV>
<P>If you have a significant amount of Guile support code, you might =
consider=20
keeping it in a different file (e.g., <SAMP>guileio.scm</SAMP>) and then =
loading=20
it in your makefile using the <CODE>guile</CODE> function: </P>
<DIV class=3Dexample><PRE class=3Dexample>$(guile (load "guileio.scm"))
</PRE></DIV>
<P>An advantage to this method is that when editing =
<SAMP>guileio.scm</SAMP>,=20
your editor will understand that this file contains Scheme syntax rather =
than=20
makefile syntax. </P>
<P>Now you can use these Guile functions to create files. Suppose you =
need to=20
operate on a very large list, which cannot fit on the command line, but =
the=20
utility you=E2=80=99re using accepts the list as input as well: </P>
<DIV class=3Dexample><PRE class=3Dexample>prog: $(PREREQS)
        @$(guile (mkopen "tmp.out" "w")) \
         $(foreach X,$^,$(guile (mkwrite "$(X)"))) \
         $(guile (mkclose))
        $(LINK) &lt; tmp.out
</PRE></DIV>
<P>A more comprehensive suite of file manipulation procedures is =
possible of=20
course. You could, for example, maintain multiple output files at the =
same time=20
by choosing a symbol for each one and using it as the key to a hash =
table, where=20
the value is a port, then returning the symbol to be stored in a=20
<CODE>make</CODE> variable. </P>
<HR>
<A name=3DLoading-Objects></A>
<DIV class=3Dheader>
<P>Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Integrati=
on"=20
rel=3Dprev>Guile Integration</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Extending-make"=
=20
rel=3Dup>Extending make</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DLoading-Dynamic-Objects></A>
<H3 class=3Dsection>12.2 Loading Dynamic Objects</H3><A=20
name=3Dindex-loaded-objects></A><A =
name=3Dindex-objects_002c-loaded></A><A=20
name=3Dindex-extensions_002c-loading></A>
<TABLE class=3Dcartouche border=3D1>
  <TBODY>
  <TR>
    <TD>
      <BLOCKQUOTE>
        <P><B>Warning:</B> The <CODE>load</CODE> directive and extension =

        capability is considered a =E2=80=9Ctechnology preview=E2=80=9D =
in this release of GNU=20
        make. We encourage you to experiment with this feature and we =
appreciate=20
        any feedback on it. However we cannot guarantee to maintain=20
        backward-compatibility in the next release. Consider using GNU =
Guile=20
        instead for extending GNU make (see <A=20
        =
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Function"=
>The=20
        <CODE>guile</CODE> Function</A>). =
</P></BLOCKQUOTE></TD></TR></TBODY></TABLE>
<P>Many operating systems provide a facility for dynamically loading =
compiled=20
objects. If your system provides this facility, GNU <CODE>make</CODE> =
can make=20
use of it to load dynamic objects at runtime, providing new capabilities =
which=20
may then be invoked by your makefile. </P>
<P>The <CODE>load</CODE> directive is used to load a dynamic object. =
Once the=20
object is loaded, a =E2=80=9Csetup=E2=80=9D function will be invoked to =
allow the object to=20
initialize itself and register new facilities with GNU =
<CODE>make</CODE>. A=20
dynamic object might include new <CODE>make</CODE> functions, for =
example, and=20
the =E2=80=9Csetup=E2=80=9D function would register them with GNU =
<CODE>make</CODE>=E2=80=99s function=20
handling system. </P>
<TABLE class=3Dmenu border=3D0 cellSpacing=3D0>
  <TBODY>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D1=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#load-Directive"=
>load=20
      Directive</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Loading dynamic objects as extensions. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D2=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Remaking-Loaded=
-Objects">Remaking=20
      Loaded Objects</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>How loaded objects get remade. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D3=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Loaded-Object-A=
PI">Loaded=20
      Object API</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Programmatic interface for loaded =
objects.=20
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D4=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Loaded-Object-E=
xample">Loaded=20
      Object Example</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Example of a loaded object =
</TD></TR></TBODY></TABLE>
<HR>
<A name=3Dload-Directive></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Remaking-Loaded=
-Objects"=20
rel=3Dnext>Remaking Loaded Objects</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Loading-Objects=
"=20
rel=3Dprev>Loading Objects</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Loading-Objects=
"=20
rel=3Dup>Loading Objects</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DThe-load-Directive></A>
<H4 class=3Dsubsection>12.2.1 The <CODE>load</CODE> Directive</H4><A=20
name=3Dindex-load-directive></A><A =
name=3Dindex-extensions_002c-load-directive></A>
<P>Objects are loaded into GNU <CODE>make</CODE> by placing the=20
<CODE>load</CODE> directive into your makefile. The syntax of the=20
<CODE>load</CODE> directive is as follows: </P><A name=3Dindex-load></A>
<DIV class=3Dexample><PRE class=3Dexample>load <VAR>object-file</VAR> =
=E2=80=A6
</PRE></DIV>
<P>or: </P>
<DIV class=3Dexample><PRE class=3Dexample>load =
<VAR>object-file</VAR>(<VAR>symbol-name</VAR>) =E2=80=A6
</PRE></DIV>
<P>The file <VAR>object-file</VAR> is dynamically loaded by GNU=20
<CODE>make</CODE>. If <VAR>object-file</VAR> does not include a =
directory path=20
then it is first looked for in the current directory. If it is not found =
there,=20
or a directory path is included, then system-specific paths will be =
searched. If=20
the load fails for any reason, <CODE>make</CODE> will print a message =
and exit.=20
</P>
<P>If the load succeeds <CODE>make</CODE> will invoke an initializing =
function.=20
</P>
<P>If <VAR>symbol-name</VAR> is provided, it will be used as the name of =
the=20
initializing function. </P>
<P>If no <VAR>symbol-name</VAR> is provided, the initializing function =
name is=20
created by taking the base file name of <VAR>object-file</VAR>, up to =
the first=20
character which is not a valid symbol name character (alphanumerics and=20
underscores are valid symbol name characters). To this prefix will be =
appended=20
the suffix <CODE>_gmk_setup</CODE>. </P>
<P>More than one object file may be loaded with a single =
<CODE>load</CODE>=20
directive, and both forms of <CODE>load</CODE> arguments may be used in =
the same=20
directive. </P>
<P>The initializing function will be provided the file name and line =
number of=20
the invocation of the <CODE>load</CODE> operation. It should return a =
value of=20
type <CODE>int</CODE>, which must be <CODE>0</CODE> on failure and=20
non-<CODE>0</CODE> on success. If the return value is <CODE>-1</CODE>, =
then GNU=20
make will <EM>not</EM> attempt to rebuild the object file (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Remaking-Loaded=
-Objects">How=20
Loaded Objects Are Remade</A>). </P>
<P>For example: </P>
<DIV class=3Dexample><PRE class=3Dexample>load ../mk_funcs.so
</PRE></DIV>
<P>will load the dynamic object <SAMP>../mk_funcs.so</SAMP>. After the =
object is=20
loaded, <CODE>make</CODE> will invoke the function (assumed to be =
defined by the=20
shared object) <CODE>mk_funcs_gmk_setup</CODE>. </P>
<P>On the other hand: </P>
<DIV class=3Dexample><PRE class=3Dexample>load =
../mk_funcs.so(init_mk_func)
</PRE></DIV>
<P>will load the dynamic object <SAMP>../mk_funcs.so</SAMP>. After the =
object is=20
loaded, <CODE>make</CODE> will invoke the function =
<CODE>init_mk_func</CODE>.=20
</P>
<P>Regardless of how many times an object file appears in a =
<CODE>load</CODE>=20
directive, it will only be loaded (and its setup function will only be =
invoked)=20
once. </P><A name=3Dindex-_002eLOADED></A>
<P>After an object has been successfully loaded, its file name is =
appended to=20
the <CODE>.LOADED</CODE> variable. </P><A name=3Dindex-_002dload></A>
<P>If you would prefer that failure to load a dynamic object not be =
reported as=20
an error, you can use the <CODE>-load</CODE> directive instead of=20
<CODE>load</CODE>. GNU <CODE>make</CODE> will not fail and no message =
will be=20
generated if an object fails to load. The failed object is not added to =
the=20
<CODE>.LOADED</CODE> variable, which can then be consulted to determine =
if the=20
load was successful. </P>
<HR>
<A name=3DRemaking-Loaded-Objects></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Loaded-Object-A=
PI"=20
rel=3Dnext>Loaded Object API</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#load-Directive"=
=20
rel=3Dprev>load Directive</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Loading-Objects=
"=20
rel=3Dup>Loading Objects</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DHow-Loaded-Objects-Are-Remade></A>
<H4 class=3Dsubsection>12.2.2 How Loaded Objects Are Remade</H4><A=20
name=3Dindex-updating-loaded-objects></A><A=20
name=3Dindex-remaking-loaded-objects></A><A=20
name=3Dindex-loaded-objects_002c-remaking-of></A>
<P>Loaded objects undergo the same re-make procedure as makefiles (see =
<A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Remaking-Makefi=
les">How=20
Makefiles Are Remade</A>). If any loaded object is recreated, then=20
<CODE>make</CODE> will start from scratch and re-read all the makefiles, =
and=20
reload the object files again. It is not necessary for the loaded object =
to do=20
anything special to support this. </P>
<P>It=E2=80=99s up to the makefile author to provide the rules needed =
for rebuilding the=20
loaded object. </P>
<HR>
<A name=3DLoaded-Object-API></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Loaded-Object-E=
xample"=20
rel=3Dnext>Loaded Object Example</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Remaking-Loaded=
-Objects"=20
rel=3Dprev>Remaking Loaded Objects</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Loading-Objects=
"=20
rel=3Dup>Loading Objects</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DLoaded-Object-Interface></A>
<H4 class=3Dsubsection>12.2.3 Loaded Object Interface</H4><A=20
name=3Dindex-loaded-object-API></A><A =
name=3Dindex-interface-for-loaded-objects></A>
<TABLE class=3Dcartouche border=3D1>
  <TBODY>
  <TR>
    <TD>
      <BLOCKQUOTE>
        <P><B>Warning:</B> For this feature to be useful your extensions =
will=20
        need to invoke various functions internal to GNU =
<CODE>make</CODE>. The=20
        programming interfaces provided in this release should not be =
considered=20
        stable: functions may be added, removed, or change calling =
signatures or=20
        implementations in future versions of GNU <CODE>make</CODE>.=20
      </P></BLOCKQUOTE></TD></TR></TBODY></TABLE>
<P>To be useful, loaded objects must be able to interact with GNU=20
<CODE>make</CODE>. This interaction includes both interfaces the loaded =
object=20
provides to makefiles and also interfaces <CODE>make</CODE> provides to =
the=20
loaded object to manipulate <CODE>make</CODE>=E2=80=99s operation. </P>
<P>The interface between loaded objects and <CODE>make</CODE> is defined =
by the=20
<SAMP>gnumake.h</SAMP> C header file. All loaded objects written in C =
should=20
include this header file. Any loaded object not written in C will need =
to=20
implement the interface defined in this header file. </P>
<P>Typically, a loaded object will register one or more new GNU=20
<CODE>make</CODE> functions using the <CODE>gmk_add_function</CODE> =
routine from=20
within its setup function. The implementations of these =
<CODE>make</CODE>=20
functions may make use of the <CODE>gmk_expand</CODE> and =
<CODE>gmk_eval</CODE>=20
routines to perform their tasks, then optionally return a string as the =
result=20
of the function expansion. </P><A name=3DLoaded-Object-Licensing></A>
<H4 class=3Dsubsubheading>Loaded Object Licensing</H4><A=20
name=3Dindex-loaded-object-licensing></A><A=20
name=3Dindex-plugin_005fis_005fGPL_005fcompatible></A>
<P>Every dynamic extension should define the global symbol=20
<CODE>plugin_is_GPL_compatible</CODE> to assert that it has been =
licensed under=20
a GPL-compatible license. If this symbol does not exist, =
<CODE>make</CODE> emits=20
a fatal error and exits when it tries to load your extension. </P>
<P>The declared type of the symbol should be <CODE>int</CODE>. It does =
not need=20
to be in any allocated section, though. The code merely asserts that the =
symbol=20
exists in the global scope. Something like this is enough: </P>
<DIV class=3Dexample><PRE class=3Dexample>int plugin_is_GPL_compatible;
</PRE></DIV><A name=3DData-Structures></A>
<H4 class=3Dsubsubheading>Data Structures</H4>
<DL compact>
  <DT><CODE>gmk_floc</CODE></DT>
  <DD>
  <P>This structure represents a filename/location pair. It is provided =
when=20
  defining items, so GNU <CODE>make</CODE> can inform the user later =
where the=20
  definition occurred if necessary. </P></DD></DL><A=20
name=3DRegistering-Functions></A>
<H4 class=3Dsubsubheading>Registering Functions</H4><A=20
name=3Dindex-gmk_005fadd_005ffunction></A>
<P>There is currently one way for makefiles to invoke operations =
provided by the=20
loaded object: through the <CODE>make</CODE> function call interface. A =
loaded=20
object can register one or more new functions which may then be invoked =
from=20
within the makefile in the same way as any other function. </P>
<P>Use <CODE>gmk_add_function</CODE> to create a new <CODE>make</CODE> =
function.=20
Its arguments are as follows: </P>
<DL compact>
  <DT><CODE>name</CODE></DT>
  <DD>
  <P>The function name. This is what the makefile should use to invoke =
the=20
  function. The name must be between 1 and 255 characters long and it =
may only=20
  contain alphanumeric, period (=E2=80=98<SAMP>.</SAMP>=E2=80=99), dash =
(=E2=80=98<SAMP>-</SAMP>=E2=80=99), and=20
  underscore (=E2=80=98<SAMP>_</SAMP>=E2=80=99) characters. It may not =
begin with a period.=20
  </P></DD>
  <DT><CODE>func_ptr</CODE></DT>
  <DD>
  <P>A pointer to a function that <CODE>make</CODE> will invoke when it =
expands=20
  the function in a makefile. This function must be defined by the =
loaded=20
  object. </P></DD>
  <DT><CODE>min_args</CODE></DT>
  <DD>
  <P>The minimum number of arguments the function will accept. Must be =
between 0=20
  and 255. GNU <CODE>make</CODE> will check this and fail before =
invoking=20
  <CODE>func_ptr</CODE> if the function was invoked with too few =
arguments.=20
  </P></DD>
  <DT><CODE>max_args</CODE></DT>
  <DD>
  <P>The maximum number of arguments the function will accept. Must be =
between 0=20
  and 255. GNU <CODE>make</CODE> will check this and fail before =
invoking=20
  <CODE>func_ptr</CODE> if the function was invoked with too few =
arguments. If=20
  the value is 0, then any number of arguments is accepted. If the value =
is=20
  greater than 0, then it must be greater than or equal to=20
  <CODE>min_args</CODE>. </P></DD>
  <DT><CODE>flags</CODE></DT>
  <DD>
  <P>Flags that specify how this function will operate; the desired =
flags should=20
  be OR=E2=80=99d together. If the <CODE>GMK_FUNC_NOEXPAND</CODE> flag =
is given then the=20
  function arguments will not be expanded before the function is called; =

  otherwise they will be expanded first. </P></DD></DL><A=20
name=3DRegistered-Function-Interface></A>
<H4 class=3Dsubsubheading>Registered Function Interface</H4><A=20
name=3Dindex-gmk_005ffunc_005fptr></A>
<P>A function registered with <CODE>make</CODE> must match the=20
<CODE>gmk_func_ptr</CODE> type. It will be invoked with three =
parameters:=20
<CODE>name</CODE> (the name of the function), <CODE>argc</CODE> (the =
number of=20
arguments to the function), and <CODE>argv</CODE> (an array of pointers =
to=20
arguments to the function). The last pointer (that is, =
<CODE>argv[argc]</CODE>)=20
will be null (<CODE>0</CODE>). </P>
<P>The return value of the function is the result of expanding the =
function. If=20
the function expands to nothing the return value may be null. Otherwise, =
it must=20
be a pointer to a string created with <CODE>gmk_alloc</CODE>. Once the =
function=20
returns, <CODE>make</CODE> owns this string and will free it when =
appropriate;=20
it cannot be accessed by the loaded object. </P><A =
name=3DGNU-make-Facilities></A>
<H4 class=3Dsubsubheading>GNU <CODE>make</CODE> Facilities</H4>
<P>There are some facilities exported by GNU <CODE>make</CODE> for use =
by loaded=20
objects. Typically these would be run from within the setup function =
and/or the=20
functions registered via <CODE>gmk_add_function</CODE>, to retrieve or =
modify=20
the data <CODE>make</CODE> works with. </P>
<DL compact>
  <DT><CODE>gmk_expand</CODE></DT>
  <DD><A name=3Dindex-gmk_005fexpand></A>
  <P>This function takes a string and expands it using <CODE>make</CODE> =

  expansion rules. The result of the expansion is returned in a =
nil-terminated=20
  string buffer. The caller is responsible for calling =
<CODE>gmk_free</CODE>=20
  with a pointer to the returned buffer when done. </P></DD>
  <DT><CODE>gmk_eval</CODE></DT>
  <DD><A name=3Dindex-gmk_005feval></A>
  <P>This function takes a buffer and evaluates it as a segment of =
makefile=20
  syntax. This function can be used to define new variables, new rules, =
etc. It=20
  is equivalent to using the <CODE>eval</CODE> <CODE>make</CODE> =
function.=20
  </P></DD></DL>
<P>Note that there is a difference between <CODE>gmk_eval</CODE> and =
calling=20
<CODE>gmk_expand</CODE> with a string using the <CODE>eval</CODE> =
function: in=20
the latter case the string will be expanded <EM>twice</EM>; once by=20
<CODE>gmk_expand</CODE> and then again by the <CODE>eval</CODE> =
function. Using=20
<CODE>gmk_eval</CODE> the buffer is only expanded once, at most (as =
it=E2=80=99s read by=20
the <CODE>make</CODE> parser). </P><A name=3DMemory-Management></A>
<H4 class=3Dsubsubheading>Memory Management</H4>
<P>Some systems allow for different memory management schemes. Thus you =
should=20
never pass memory that you=E2=80=99ve allocated directly to any =
<CODE>make</CODE>=20
function, nor should you attempt to directly free any memory returned to =
you by=20
any <CODE>make</CODE> function. Instead, use the <CODE>gmk_alloc</CODE> =
and=20
<CODE>gmk_free</CODE> functions. </P>
<P>In particular, the string returned to <CODE>make</CODE> by a function =

registered using <CODE>gmk_add_function</CODE> <EM>must</EM> be =
allocated using=20
<CODE>gmk_alloc</CODE>, and the string returned from the =
<CODE>make</CODE>=20
<CODE>gmk_expand</CODE> function <EM>must</EM> be freed (when no longer =
needed)=20
using <CODE>gmk_free</CODE>. </P>
<DL compact>
  <DT><CODE>gmk_alloc</CODE></DT>
  <DD><A name=3Dindex-gmk_005falloc></A>
  <P>Return a pointer to a newly-allocated buffer. This function will =
always=20
  return a valid pointer; if not enough memory is available =
<CODE>make</CODE>=20
  will exit. </P></DD>
  <DT><CODE>gmk_free</CODE></DT>
  <DD><A name=3Dindex-gmk_005ffree></A>
  <P>Free a buffer returned to you by <CODE>make</CODE>. Once the=20
  <CODE>gmk_free</CODE> function returns the string will no longer be =
valid.=20
  </P></DD></DL>
<HR>
<A name=3DLoaded-Object-Example></A>
<DIV class=3Dheader>
<P>Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Loaded-Object-A=
PI"=20
rel=3Dprev>Loaded Object API</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Loading-Objects=
"=20
rel=3Dup>Loading Objects</A> &nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DExample-Loaded-Object></A>
<H4 class=3Dsubsection>12.2.4 Example Loaded Object</H4><A=20
name=3Dindex-loaded-object-example></A><A=20
name=3Dindex-example-of-loaded-objects></A>
<P>Let=E2=80=99s suppose we wanted to write a new GNU <CODE>make</CODE> =
function that=20
would create a temporary file and return its name. We would like our =
function to=20
take a prefix as an argument. First we can write the function in a file=20
<SAMP>mk_temp.c</SAMP>: </P>
<DIV class=3Dexample><PRE class=3Dexample>#include &lt;stdlib.h&gt;
#include &lt;stdlib.h&gt;
#include &lt;stdio.h&gt;
#include &lt;string.h&gt;
#include &lt;unistd.h&gt;
#include &lt;errno.h&gt;

#include &lt;gnumake.h&gt;

int plugin_is_GPL_compatible;

char *
gen_tmpfile(const char *nm, int argc, char **argv)
{
  int fd;

  /* Compute the size of the filename and allocate space for it.  */
  int len =3D strlen (argv[0]) + 6 + 1;
  char *buf =3D gmk_alloc (len);

  strcpy (buf, argv[0]);
  strcat (buf, "XXXXXX");

  fd =3D mkstemp(buf);
  if (fd &gt;=3D 0)
    {
      /* Don't leak the file descriptor.  */
      close (fd);
      return buf;
    }

  /* Failure.  */
  fprintf (stderr, "mkstemp(%s) failed: %s\n", buf, strerror (errno));
  gmk_free (buf);
  return NULL;
}

int
mk_temp_gmk_setup ()
{
  /* Register the function with make name "mk-temp".  */
  gmk_add_function ("mk-temp", gen_tmpfile, 1, 1, 1);
  return 1;
}
</PRE></DIV>
<P>Next, we will write a makefile that can build this shared object, =
load it,=20
and use it: </P>
<DIV class=3Dexample><PRE class=3Dexample>all:
        @echo Temporary file: $(mk-temp tmpfile.)

load mk_temp.so

mk_temp.so: mk_temp.c
        $(CC) -shared -fPIC -o $&nbsp;$&lt;
</PRE></DIV>
<P>On MS-Windows, due to peculiarities of how shared objects are =
produced, the=20
compiler needs to scan the <EM>import library</EM> produced when =
building=20
<CODE>make</CODE>, typically called=20
<SAMP>libgnumake-<VAR>version</VAR>.dll.a</SAMP>, where =
<VAR>version</VAR> is=20
the version of the load object API. So the recipe to produce a shared =
object=20
will look on Windows like this (assuming the API version is 1): </P>
<DIV class=3Dexample><PRE class=3Dexample>mk_temp.dll: mk_temp.c
        $(CC) -shared -o $&nbsp;$&lt; -lgnumake-1
</PRE></DIV>
<P>Now when you run <CODE>make</CODE> you=E2=80=99ll see something like: =
</P>
<DIV class=3Dexample><PRE class=3Dexample>$ make
cc -shared -fPIC -o mk_temp.so mk_temp.c
Temporary filename: tmpfile.A7JEwd
</PRE></DIV>
<HR>
<A name=3DFeatures></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Missing"=20
rel=3Dnext>Missing</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Extending-make"=
=20
rel=3Dprev>Extending make</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Top" =
rel=3Dup>Top</A>=20
&nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DFeatures-of-GNU-make></A>
<H2 class=3Dchapter>13 Features of GNU <CODE>make</CODE></H2><A=20
name=3Dindex-features-of-GNU-make></A><A name=3Dindex-portability></A><A =

name=3Dindex-compatibility></A>
<P>Here is a summary of the features of GNU <CODE>make</CODE>, for =
comparison=20
with and credit to other versions of <CODE>make</CODE>. We consider the =
features=20
of <CODE>make</CODE> in 4.2 BSD systems as a baseline. If you are =
concerned with=20
writing portable makefiles, you should not use the features of =
<CODE>make</CODE>=20
listed here, nor the ones in <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Missing">Missin=
g</A>.=20
</P>
<P>Many features come from the version of <CODE>make</CODE> in System V. =
</P>
<UL>
  <LI>The <CODE>VPATH</CODE> variable and its special meaning. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Directory-Searc=
h">Searching=20
  Directories for Prerequisites</A>. This feature exists in System V=20
  <CODE>make</CODE>, but is undocumented. It is documented in 4.3 BSD=20
  <CODE>make</CODE> (which says it mimics System V=E2=80=99s =
<CODE>VPATH</CODE>=20
  feature). </LI>
  <LI>Included makefiles. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Include">Includ=
ing=20
  Other Makefiles</A>. Allowing multiple files to be included with a =
single=20
  directive is a GNU extension. </LI>
  <LI>Variables are read from and communicated via the environment. See =
<A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Environment">Va=
riables=20
  from the Environment</A>. </LI>
  <LI>Options passed through the variable <CODE>MAKEFLAGS</CODE> to =
recursive=20
  invocations of <CODE>make</CODE>. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Communicating=20
  Options to a Sub-<CODE>make</CODE></A>. </LI>
  <LI>The automatic variable <CODE>$%</CODE> is set to the member name =
in an=20
  archive reference. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
  Variables</A>. </LI>
  <LI>The automatic variables <CODE>$@</CODE>, <CODE>$*</CODE>,=20
  <CODE>$&lt;</CODE>, <CODE>$%</CODE>, and <CODE>$?</CODE> have =
corresponding=20
  forms like <CODE>$(@F)</CODE> and <CODE>$(@D)</CODE>. We have =
generalized this=20
  to <CODE>$^</CODE> as an obvious extension. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
  Variables</A>. </LI>
  <LI>Substitution variable references. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Reference">Basi=
cs of=20
  Variable References</A>. </LI>
  <LI>The command line options =E2=80=98<SAMP>-b</SAMP>=E2=80=99 and =
=E2=80=98<SAMP>-m</SAMP>=E2=80=99, accepted=20
  and ignored. In System V <CODE>make</CODE>, these options actually do=20
  something. </LI>
  <LI>Execution of recursive commands to run <CODE>make</CODE> via the =
variable=20
  <CODE>MAKE</CODE> even if =E2=80=98<SAMP>-n</SAMP>=E2=80=99, =
=E2=80=98<SAMP>-q</SAMP>=E2=80=99 or=20
  =E2=80=98<SAMP>-t</SAMP>=E2=80=99 is specified. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Recursion">Recu=
rsive=20
  Use of <CODE>make</CODE></A>. </LI>
  <LI>Support for suffix =E2=80=98<SAMP>.a</SAMP>=E2=80=99 in suffix =
rules. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Suffix-=
Rules">Archive=20
  Suffix Rules</A>. This feature is obsolete in GNU <CODE>make</CODE>, =
because=20
  the general feature of rule chaining (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Chained-Rules">=
Chains=20
  of Implicit Rules</A>) allows one pattern rule for installing members =
in an=20
  archive (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Update"=
>Archive=20
  Update</A>) to be sufficient. </LI>
  <LI>The arrangement of lines and backslash/newline combinations in =
recipes is=20
  retained when the recipes are printed, so they appear as they do in =
the=20
  makefile, except for the stripping of initial whitespace. </LI></UL>
<P>The following features were inspired by various other versions of=20
<CODE>make</CODE>. In some cases it is unclear exactly which versions =
inspired=20
which others. </P>
<UL>
  <LI>Pattern rules using =E2=80=98<SAMP>%</SAMP>=E2=80=99. This has =
been implemented in several=20
  versions of <CODE>make</CODE>. We=E2=80=99re not sure who invented it =
first, but it=E2=80=99s=20
  been spread around a bit. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Rules">=
Defining=20
  and Redefining Pattern Rules</A>. </LI>
  <LI>Rule chaining and implicit intermediate files. This was =
implemented by Stu=20
  Feldman in his version of <CODE>make</CODE> for AT&amp;T Eighth =
Edition=20
  Research Unix, and later by Andrew Hume of AT&amp;T Bell Labs in his=20
  <CODE>mk</CODE> program (where he terms it =E2=80=9Ctransitive =
closure=E2=80=9D). We do not=20
  really know if we got this from either of them or thought it up =
ourselves at=20
  the same time. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Chained-Rules">=
Chains=20
  of Implicit Rules</A>. </LI>
  <LI>The automatic variable <CODE>$^</CODE> containing a list of all=20
  prerequisites of the current target. We did not invent this, but we =
have no=20
  idea who did. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
  Variables</A>. The automatic variable <CODE>$+</CODE> is a simple =
extension of=20
  <CODE>$^</CODE>. </LI>
  <LI>The =E2=80=9Cwhat if=E2=80=9D flag =
(=E2=80=98<SAMP>-W</SAMP>=E2=80=99 in GNU <CODE>make</CODE>) was (as=20
  far as we know) invented by Andrew Hume in <CODE>mk</CODE>. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution">Instead=20
  of Executing Recipes</A>. </LI>
  <LI>The concept of doing several things at once (parallelism) exists =
in many=20
  incarnations of <CODE>make</CODE> and similar programs, though not in =
the=20
  System V or BSD implementations. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Execution">Reci=
pe=20
  Execution</A>. </LI>
  <LI>A number of different build tools that support parallelism also =
support=20
  collecting output and displaying as a single block. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel-Output=
">Output=20
  During Parallel Execution</A>. </LI>
  <LI>Modified variable references using pattern substitution come from =
SunOS 4.=20
  See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Reference">Basi=
cs of=20
  Variable References</A>. This functionality was provided in GNU=20
  <CODE>make</CODE> by the <CODE>patsubst</CODE> function before the =
alternate=20
  syntax was implemented for compatibility with SunOS 4. It is not =
altogether=20
  clear who inspired whom, since GNU <CODE>make</CODE> had =
<CODE>patsubst</CODE>=20
  before SunOS 4 was released. </LI>
  <LI>The special significance of =E2=80=98<SAMP>+</SAMP>=E2=80=99 =
characters preceding recipe=20
  lines (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution">Instead=20
  of Executing Recipes</A>) is mandated by <CITE>IEEE Standard=20
  1003.2-1992</CITE> (POSIX.2). </LI>
  <LI>The =E2=80=98<SAMP>+=3D</SAMP>=E2=80=99 syntax to append to the =
value of a variable comes=20
  from SunOS 4 <CODE>make</CODE>. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Appending">Appe=
nding=20
  More Text to Variables</A>. </LI>
  <LI>The syntax=20
  =
=E2=80=98<SAMP><VAR>archive</VAR>(<VAR>mem1</VAR>&nbsp;<VAR>mem2</VAR>=E2=
=80=A6)</SAMP>=E2=80=99<!-- /@w -->=20
  to list multiple members in a single archive file comes from SunOS 4=20
  <CODE>make</CODE>. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Members=
">Archive=20
  Members</A>. </LI>
  <LI>The <CODE>-include</CODE> directive to include makefiles with no =
error for=20
  a nonexistent file comes from SunOS 4 <CODE>make</CODE>. (But note =
that SunOS=20
  4 <CODE>make</CODE> does not allow multiple makefiles to be specified =
in one=20
  <CODE>-include</CODE> directive.) The same feature appears with the =
name=20
  <CODE>sinclude</CODE> in SGI <CODE>make</CODE> and perhaps others. =
</LI>
  <LI>The <CODE>!=3D</CODE> shell assignment operator exists in many BSD =
of=20
  <CODE>make</CODE> and is purposefully implemented here to behave =
identically=20
  to those implementations. </LI>
  <LI>Various build management tools are implemented using scripting =
languages=20
  such as Perl or Python and thus provide a natural embedded scripting =
language,=20
  similar to GNU <CODE>make</CODE>=E2=80=99s integration of GNU Guile. =
</LI></UL>
<P>The remaining features are inventions new in GNU <CODE>make</CODE>: =
</P>
<UL>
  <LI>Use the =E2=80=98<SAMP>-v</SAMP>=E2=80=99 or =
=E2=80=98<SAMP>--version</SAMP>=E2=80=99 option to print=20
  version and copyright information. </LI>
  <LI>Use the =E2=80=98<SAMP>-h</SAMP>=E2=80=99 or =
=E2=80=98<SAMP>--help</SAMP>=E2=80=99 option to summarize the=20
  options to <CODE>make</CODE>. </LI>
  <LI>Simply-expanded variables. See <A=20
  href=3D"http://www.gnu.org/software/make/manual/make.html#Flavors">The =
Two=20
  Flavors of Variables</A>. </LI>
  <LI>Pass command line variable assignments automatically through the =
variable=20
  <CODE>MAKE</CODE> to recursive <CODE>make</CODE> invocations. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Recursion">Recu=
rsive=20
  Use of <CODE>make</CODE></A>. </LI>
  <LI>Use the =E2=80=98<SAMP>-C</SAMP>=E2=80=99 or =
=E2=80=98<SAMP>--directory</SAMP>=E2=80=99 command option to=20
  change directory. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Summary=20
  of Options</A>. </LI>
  <LI>Make verbatim variable definitions with <CODE>define</CODE>. See =
<A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Multi_002dLine"=
>Defining=20
  Multi-Line Variables</A>. </LI>
  <LI>Declare phony targets with the special target <CODE>.PHONY</CODE>. =

  <P>Andrew Hume of AT&amp;T Bell Labs implemented a similar feature =
with a=20
  different syntax in his <CODE>mk</CODE> program. This seems to be a =
case of=20
  parallel discovery. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Phony-Targets">=
Phony=20
  Targets</A>. </P></LI>
  <LI>Manipulate text by calling functions. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Functions">Func=
tions=20
  for Transforming Text</A>. </LI>
  <LI>Use the =E2=80=98<SAMP>-o</SAMP>=E2=80=99 or =
=E2=80=98<SAMP>--old-file</SAMP>=E2=80=99 option to pretend a=20
  file=E2=80=99s modification-time is old. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Avoiding-Compil=
ation">Avoiding=20
  Recompilation of Some Files</A>. </LI>
  <LI>Conditional execution.=20
  <P>This feature has been implemented numerous times in various =
versions of=20
  <CODE>make</CODE>; it seems a natural extension derived from the =
features of=20
  the C preprocessor and similar macro languages and is not a =
revolutionary=20
  concept. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditionals">C=
onditional=20
  Parts of Makefiles</A>. </P></LI>
  <LI>Specify a search path for included makefiles. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Include">Includ=
ing=20
  Other Makefiles</A>. </LI>
  <LI>Specify extra makefiles to read with an environment variable. See =
<A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#MAKEFILES-Varia=
ble">The=20
  Variable <CODE>MAKEFILES</CODE></A>. </LI>
  <LI>Strip leading sequences of =E2=80=98<SAMP>./</SAMP>=E2=80=99 from =
file names, so that=20
  <SAMP>./<VAR>file</VAR></SAMP> and <SAMP><VAR>file</VAR></SAMP> are =
considered=20
  to be the same file. </LI>
  <LI>Use a special search method for library prerequisites written in =
the form=20
  =E2=80=98<SAMP>-l<VAR>name</VAR></SAMP>=E2=80=99. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Libraries_002fS=
earch">Directory=20
  Search for Link Libraries</A>. </LI>
  <LI>Allow suffixes for suffix rules (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Suffix-Rules">O=
ld-Fashioned=20
  Suffix Rules</A>) to contain any characters. In other versions of=20
  <CODE>make</CODE>, they must begin with =
=E2=80=98<SAMP>.</SAMP>=E2=80=99 and not contain any=20
  =E2=80=98<SAMP>/</SAMP>=E2=80=99 characters. </LI>
  <LI>Keep track of the current level of <CODE>make</CODE> recursion =
using the=20
  variable <CODE>MAKELEVEL</CODE>. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Recursion">Recu=
rsive=20
  Use of <CODE>make</CODE></A>. </LI>
  <LI>Provide any goals given on the command line in the variable=20
  <CODE>MAKECMDGOALS</CODE>. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Goals">Argument=
s to=20
  Specify the Goals</A>. </LI>
  <LI>Specify static pattern rules. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-Pattern"=
>Static=20
  Pattern Rules</A>. </LI>
  <LI>Provide selective <CODE>vpath</CODE> search. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Directory-Searc=
h">Searching=20
  Directories for Prerequisites</A>. </LI>
  <LI>Provide computed variable references. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Reference">Basi=
cs of=20
  Variable References</A>. </LI>
  <LI>Update makefiles. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Remaking-Makefi=
les">How=20
  Makefiles Are Remade</A>. System V <CODE>make</CODE> has a very, very =
limited=20
  form of this functionality in that it will check out SCCS files for =
makefiles.=20
  </LI>
  <LI>Various new built-in implicit rules. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
  of Built-In Rules</A>. </LI>
  <LI>Load dynamic objects which can modify the behavior of =
<CODE>make</CODE>.=20
  See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Loading-Objects=
">Loading=20
  Dynamic Objects</A>. </LI></UL>
<HR>
<A name=3DMissing></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Conven=
tions"=20
rel=3Dnext>Makefile Conventions</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Features"=20
rel=3Dprev>Features</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Top" =
rel=3Dup>Top</A>=20
&nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A=20
name=3DIncompatibilities-and-Missing-Features></A>
<H2 class=3Dchapter>14 Incompatibilities and Missing Features</H2><A=20
name=3Dindex-incompatibilities></A><A =
name=3Dindex-missing-features></A><A=20
name=3Dindex-features_002c-missing></A>
<P>The <CODE>make</CODE> programs in various other systems support a few =

features that are not implemented in GNU <CODE>make</CODE>. The POSIX.2 =
standard=20
(<CITE>IEEE Standard 1003.2-1992</CITE>) which specifies =
<CODE>make</CODE> does=20
not require any of these features. </P>
<UL>
  <LI>A target of the form =
=E2=80=98<SAMP><VAR>file</VAR>((<VAR>entry</VAR>))</SAMP>=E2=80=99=20
  stands for a member of archive file <VAR>file</VAR>. The member is =
chosen, not=20
  by name, but by being an object file which defines the linker symbol=20
  <VAR>entry</VAR>.=20
  <P>This feature was not put into GNU <CODE>make</CODE> because of the=20
  non-modularity of putting knowledge into <CODE>make</CODE> of the =
internal=20
  format of archive file symbol tables. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Symbols=
">Updating=20
  Archive Symbol Directories</A>. </P></LI>
  <LI>Suffixes (used in suffix rules) that end with the character=20
  =E2=80=98<SAMP>~</SAMP>=E2=80=99 have a special meaning to System V =
<CODE>make</CODE>; they=20
  refer to the SCCS file that corresponds to the file one would get =
without the=20
  =E2=80=98<SAMP>~</SAMP>=E2=80=99. For example, the suffix rule =
=E2=80=98<SAMP>.c~.o</SAMP>=E2=80=99 would make=20
  the file <SAMP><VAR>n</VAR>.o</SAMP> from the SCCS file=20
  <SAMP>s.<VAR>n</VAR>.c</SAMP>. For complete coverage, a whole series =
of such=20
  suffix rules is required. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Suffix-Rules">O=
ld-Fashioned=20
  Suffix Rules</A>.=20
  <P>In GNU <CODE>make</CODE>, this entire series of cases is handled by =
two=20
  pattern rules for extraction from SCCS, in combination with the =
general=20
  feature of rule chaining. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Chained-Rules">=
Chains=20
  of Implicit Rules</A>. </P></LI>
  <LI>In System V and 4.3 BSD <CODE>make</CODE>, files found by=20
  <CODE>VPATH</CODE> search (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Directory-Searc=
h">Searching=20
  Directories for Prerequisites</A>) have their names changed inside =
recipes. We=20
  feel it is much cleaner to always use automatic variables and thus =
make this=20
  feature obsolete. </LI>
  <LI>In some Unix <CODE>make</CODE>s, the automatic variable =
<CODE>$*</CODE>=20
  appearing in the prerequisites of a rule has the amazingly strange =
=E2=80=9Cfeature=E2=80=9D=20
  of expanding to the full name of the <EM>target of that rule</EM>. We =
cannot=20
  imagine what went on in the minds of Unix <CODE>make</CODE> developers =
to do=20
  this; it is utterly inconsistent with the normal definition of=20
  <CODE>$*</CODE>. <A=20
  =
name=3Dindex-_002a-_0028automatic-variable_0029_002c-unsupported-bizarre-=
usage></A></LI>
  <LI>In some Unix <CODE>make</CODE>s, implicit rule search (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rules"=
>Using=20
  Implicit Rules</A>) is apparently done for <EM>all</EM> targets, not =
just=20
  those without recipes. This means you can do:=20
  <DIV class=3Dexample><PRE class=3Dexample>foo.o:
        cc -c foo.c
</PRE></DIV>
  <P>and Unix <CODE>make</CODE> will intuit that <SAMP>foo.o</SAMP> =
depends on=20
  <SAMP>foo.c</SAMP>. </P>
  <P>We feel that such usage is broken. The prerequisite properties of=20
  <CODE>make</CODE> are well-defined (for GNU <CODE>make</CODE>, at =
least), and=20
  doing such a thing simply does not fit the model. </P></LI>
  <LI>GNU <CODE>make</CODE> does not include any built-in implicit rules =
for=20
  compiling or preprocessing EFL programs. If we hear of anyone who is =
using=20
  EFL, we will gladly add them. </LI>
  <LI>It appears that in SVR4 <CODE>make</CODE>, a suffix rule can be =
specified=20
  with no recipe, and it is treated as if it had an empty recipe (see <A =

  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Empty-Recipes">=
Empty=20
  Recipes</A>). For example:=20
  <DIV class=3Dexample><PRE class=3Dexample>.c.a:
</PRE></DIV>
  <P>will override the built-in <SAMP>.c.a</SAMP> suffix rule. </P>
  <P>We feel that it is cleaner for a rule without a recipe to always =
simply add=20
  to the prerequisite list for the target. The above example can be =
easily=20
  rewritten to get the desired behavior in GNU <CODE>make</CODE>: </P>
  <DIV class=3Dexample><PRE class=3Dexample>.c.a: ;
</PRE></DIV></LI>
  <LI>Some versions of <CODE>make</CODE> invoke the shell with the=20
  =E2=80=98<SAMP>-e</SAMP>=E2=80=99 flag, except under =
=E2=80=98<SAMP>-k</SAMP>=E2=80=99 (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Testing">Testin=
g the=20
  Compilation of a Program</A>). The =E2=80=98<SAMP>-e</SAMP>=E2=80=99 =
flag tells the shell to=20
  exit as soon as any program it runs returns a nonzero status. We feel =
it is=20
  cleaner to write each line of the recipe to stand on its own and not =
require=20
  this special treatment. </LI></UL>
<HR>
<A name=3DMakefile-Conventions></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Quick-Reference=
"=20
rel=3Dnext>Quick Reference</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Missing"=20
rel=3Dprev>Missing</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Top" =
rel=3Dup>Top</A>=20
&nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DMakefile-Conventions-1></A>
<H2 class=3Dchapter>15 Makefile Conventions</H2><A=20
name=3Dindex-makefile_002c-conventions-for></A><A=20
name=3Dindex-conventions-for-makefiles></A><A=20
name=3Dindex-standards-for-makefiles></A>
<P>This describes conventions for writing the Makefiles for GNU =
programs. Using=20
Automake will help you write a Makefile that follows these conventions. =
For more=20
information on portable Makefiles, see <SMALL>POSIX</SMALL> and <A=20
href=3D"http://www.gnu.org/software/autoconf/manual/autoconf.html#Portabl=
e-Make">Portable=20
Make Programming</A> in <CITE>Autoconf</CITE>. </P>
<TABLE class=3Dmenu border=3D0 cellSpacing=3D0>
  <TBODY>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D1=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Basics=
">Makefile=20
      Basics</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>General conventions for Makefiles. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D2=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Utilities-in-Ma=
kefiles">Utilities=20
      in Makefiles</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Utilities to be used in Makefiles. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D3=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Command-Variabl=
es">Command=20
      Variables</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Variables for specifying commands. =
</TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D4=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#DESTDIR">DESTDI=
R</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Supporting staged installs. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D5=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Directory-Varia=
bles">Directory=20
      Variables</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Variables for installation =
directories. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D6=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Standard-Target=
s">Standard=20
      Targets</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Standard targets for users. </TD></TR>
  <TR>
    <TD vAlign=3Dtop align=3Dleft>=E2=80=A2 <A accessKey=3D7=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Install-Command=
-Categories">Install=20
      Command Categories</A>:</TD>
    <TD>&nbsp;&nbsp;</TD>
    <TD vAlign=3Dtop align=3Dleft>Three categories of commands in the =
=E2=80=98install=E2=80=99=20
      rule: normal, pre-install and post-install. =
</TD></TR></TBODY></TABLE>
<HR>
<A name=3DMakefile-Basics></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Utilities-in-Ma=
kefiles"=20
rel=3Dnext>Utilities in Makefiles</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Conven=
tions"=20
rel=3Dup>Makefile Conventions</A> &nbsp; [<A title=3D"Table of contents" =

href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DGeneral-Conventions-for-Makefiles></A>
<H3 class=3Dsection>15.1 General Conventions for Makefiles</H3>
<P>Every Makefile should contain this line: </P>
<DIV class=3Dexample><PRE class=3Dexample>SHELL =3D /bin/sh
</PRE></DIV>
<P>to avoid trouble on systems where the <CODE>SHELL</CODE> variable =
might be=20
inherited from the environment. (This is never a problem with GNU=20
<CODE>make</CODE>.) </P>
<P>Different <CODE>make</CODE> programs have incompatible suffix lists =
and=20
implicit rules, and this sometimes creates confusion or misbehavior. So =
it is a=20
good idea to set the suffix list explicitly using only the suffixes you =
need in=20
the particular Makefile, like this: </P>
<DIV class=3Dexample><PRE class=3Dexample>.SUFFIXES:
.SUFFIXES: .c .o
</PRE></DIV>
<P>The first line clears out the suffix list, the second introduces all =
suffixes=20
which may be subject to implicit rules in this Makefile. </P>
<P>Don=E2=80=99t assume that <SAMP>.</SAMP> is in the path for command =
execution. When=20
you need to run programs that are a part of your package during the =
make, please=20
make sure that it uses <SAMP>./</SAMP> if the program is built as part =
of the=20
make or <SAMP>$(srcdir)/</SAMP> if the file is an unchanging part of the =
source=20
code. Without one of these prefixes, the current search path is used. =
</P>
<P>The distinction between <SAMP>./</SAMP> (the <EM>build =
directory</EM>) and=20
<SAMP>$(srcdir)/</SAMP> (the <EM>source directory</EM>) is important =
because=20
users can build in a separate directory using the =
=E2=80=98<SAMP>--srcdir</SAMP>=E2=80=99 option=20
to <SAMP>configure</SAMP>. A rule of the form: </P>
<DIV class=3Dsmallexample><PRE class=3Dsmallexample>foo.1 : foo.man =
sedscript
        sed -f sedscript foo.man &gt; foo.1
</PRE></DIV>
<P>will fail when the build directory is not the source directory, =
because=20
<SAMP>foo.man</SAMP> and <SAMP>sedscript</SAMP> are in the source =
directory.=20
</P>
<P>When using GNU <CODE>make</CODE>, relying on =
=E2=80=98<SAMP>VPATH</SAMP>=E2=80=99 to find the=20
source file will work in the case where there is a single dependency =
file, since=20
the <CODE>make</CODE> automatic variable =
=E2=80=98<SAMP>$&lt;</SAMP>=E2=80=99 will represent the=20
source file wherever it is. (Many versions of <CODE>make</CODE> set=20
=E2=80=98<SAMP>$&lt;</SAMP>=E2=80=99 only in implicit rules.) A Makefile =
target like </P>
<DIV class=3Dsmallexample><PRE class=3Dsmallexample>foo.o : bar.c
        $(CC) -I. -I$(srcdir) $(CFLAGS) -c bar.c -o foo.o
</PRE></DIV>
<P>should instead be written as </P>
<DIV class=3Dsmallexample><PRE class=3Dsmallexample>foo.o : bar.c
        $(CC) -I. -I$(srcdir) $(CFLAGS) -c $&lt; -o $@
</PRE></DIV>
<P>in order to allow =E2=80=98<SAMP>VPATH</SAMP>=E2=80=99 to work =
correctly. When the target has=20
multiple dependencies, using an explicit =
=E2=80=98<SAMP>$(srcdir)</SAMP>=E2=80=99 is the easiest=20
way to make the rule work well. For example, the target above for=20
<SAMP>foo.1</SAMP> is best written as: </P>
<DIV class=3Dsmallexample><PRE class=3Dsmallexample>foo.1 : foo.man =
sedscript
        sed -f $(srcdir)/sedscript $(srcdir)/foo.man &gt; $@
</PRE></DIV>
<P>GNU distributions usually contain some files which are not source =
files=E2=80=94for=20
example, Info files, and the output from Autoconf, Automake, Bison or =
Flex.=20
Since these files normally appear in the source directory, they should =
always=20
appear in the source directory, not in the build directory. So Makefile =
rules to=20
update them should put the updated files in the source directory. </P>
<P>However, if a file does not appear in the distribution, then the =
Makefile=20
should not put it in the source directory, because building a program in =

ordinary circumstances should not modify the source directory in any =
way. </P>
<P>Try to make the build and installation targets, at least (and all =
their=20
subtargets) work correctly with a parallel <CODE>make</CODE>. </P>
<HR>
<A name=3DUtilities-in-Makefiles></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Command-Variabl=
es"=20
rel=3Dnext>Command Variables</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Basics=
"=20
rel=3Dprev>Makefile Basics</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Conven=
tions"=20
rel=3Dup>Makefile Conventions</A> &nbsp; [<A title=3D"Table of contents" =

href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DUtilities-in-Makefiles-1></A>
<H3 class=3Dsection>15.2 Utilities in Makefiles</H3>
<P>Write the Makefile commands (and any shell scripts, such as=20
<CODE>configure</CODE>) to run under <CODE>sh</CODE> (both the =
traditional=20
Bourne shell and the <SMALL>POSIX</SMALL> shell), not <CODE>csh</CODE>. =
Don=E2=80=99t=20
use any special features of <CODE>ksh</CODE> or <CODE>bash</CODE>, or=20
<SMALL>POSIX</SMALL> features not widely supported in traditional Bourne =

<CODE>sh</CODE>. </P>
<P>The <CODE>configure</CODE> script and the Makefile rules for building =
and=20
installation should not use any utilities directly except these: </P>
<DIV class=3Dexample><PRE class=3Dexample>awk cat cmp cp diff echo egrep =
expr false grep install-info ln ls
mkdir mv printf pwd rm rmdir sed sleep sort tar test touch tr true
</PRE></DIV>
<P>Compression programs such as <CODE>gzip</CODE> can be used in the=20
<CODE>dist</CODE> rule. </P>
<P>Generally, stick to the widely-supported (usually=20
<SMALL>POSIX</SMALL>-specified) options and features of these programs. =
For=20
example, don=E2=80=99t use =E2=80=98<SAMP>mkdir -p</SAMP>=E2=80=99, =
convenient as it may be, because a=20
few systems don=E2=80=99t support it at all and with others, it is not =
safe for parallel=20
execution. For a list of known incompatibilities, see <A=20
href=3D"http://www.gnu.org/software/autoconf/manual/autoconf.html#Portabl=
e-Shell">Portable=20
Shell Programming</A> in <CITE>Autoconf</CITE>. </P>
<P>It is a good idea to avoid creating symbolic links in makefiles, =
since a few=20
file systems don=E2=80=99t support them. </P>
<P>The Makefile rules for building and installation can also use =
compilers and=20
related programs, but should do so via <CODE>make</CODE> variables so =
that the=20
user can substitute alternatives. Here are some of the programs we mean: =
</P>
<DIV class=3Dexample><PRE class=3Dexample>ar bison cc flex install ld =
ldconfig lex
make makeinfo ranlib texi2dvi yacc
</PRE></DIV>
<P>Use the following <CODE>make</CODE> variables to run those programs: =
</P>
<DIV class=3Dexample><PRE class=3Dexample>$(AR) $(BISON) $(CC) $(FLEX) =
$(INSTALL) $(LD) $(LDCONFIG) $(LEX)
$(MAKE) $(MAKEINFO) $(RANLIB) $(TEXI2DVI) $(YACC)
</PRE></DIV>
<P>When you use <CODE>ranlib</CODE> or <CODE>ldconfig</CODE>, you should =
make=20
sure nothing bad happens if the system does not have the program in =
question.=20
Arrange to ignore an error from that command, and print a message before =
the=20
command to tell the user that failure of this command does not mean a =
problem.=20
(The Autoconf =E2=80=98<SAMP>AC_PROG_RANLIB</SAMP>=E2=80=99 macro can =
help with this.) </P>
<P>If you use symbolic links, you should implement a fallback for =
systems that=20
don=E2=80=99t have symbolic links. </P>
<P>Additional utilities that can be used via Make variables are: </P>
<DIV class=3Dexample><PRE class=3Dexample>chgrp chmod chown mknod
</PRE></DIV>
<P>It is ok to use other utilities in Makefile portions (or scripts) =
intended=20
only for particular systems where you know those utilities exist. </P>
<HR>
<A name=3DCommand-Variables></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#DESTDIR"=20
rel=3Dnext>DESTDIR</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Utilities-in-Ma=
kefiles"=20
rel=3Dprev>Utilities in Makefiles</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Conven=
tions"=20
rel=3Dup>Makefile Conventions</A> &nbsp; [<A title=3D"Table of contents" =

href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DVariables-for-Specifying-Commands></A>
<H3 class=3Dsection>15.3 Variables for Specifying Commands</H3>
<P>Makefiles should provide variables for overriding certain commands, =
options,=20
and so on. </P>
<P>In particular, you should run most utility programs via variables. =
Thus, if=20
you use Bison, have a variable named <CODE>BISON</CODE> whose default =
value is=20
set with =E2=80=98<SAMP>BISON =3D bison</SAMP>=E2=80=99, and refer to it =
with=20
<CODE>$(BISON)</CODE> whenever you need to use Bison. </P>
<P>File management utilities such as <CODE>ln</CODE>, <CODE>rm</CODE>,=20
<CODE>mv</CODE>, and so on, need not be referred to through variables in =
this=20
way, since users don=E2=80=99t need to replace them with other programs. =
</P>
<P>Each program-name variable should come with an options variable that =
is used=20
to supply options to the program. Append =
=E2=80=98<SAMP>FLAGS</SAMP>=E2=80=99 to the=20
program-name variable name to get the options variable name=E2=80=94for =
example,=20
<CODE>BISONFLAGS</CODE>. (The names <CODE>CFLAGS</CODE> for the C =
compiler,=20
<CODE>YFLAGS</CODE> for yacc, and <CODE>LFLAGS</CODE> for lex, are =
exceptions to=20
this rule, but we keep them because they are standard.) Use=20
<CODE>CPPFLAGS</CODE> in any compilation command that runs the =
preprocessor, and=20
use <CODE>LDFLAGS</CODE> in any compilation command that does linking as =
well as=20
in any direct use of <CODE>ld</CODE>. </P>
<P>If there are C compiler options that <EM>must</EM> be used for proper =

compilation of certain files, do not include them in =
<CODE>CFLAGS</CODE>. Users=20
expect to be able to specify <CODE>CFLAGS</CODE> freely themselves. =
Instead,=20
arrange to pass the necessary options to the C compiler independently of =

<CODE>CFLAGS</CODE>, by writing them explicitly in the compilation =
commands or=20
by defining an implicit rule, like this: </P>
<DIV class=3Dsmallexample><PRE class=3Dsmallexample>CFLAGS =3D -g
ALL_CFLAGS =3D -I. $(CFLAGS)
.c.o:
        $(CC) -c $(CPPFLAGS) $(ALL_CFLAGS) $&lt;
</PRE></DIV>
<P>Do include the =E2=80=98<SAMP>-g</SAMP>=E2=80=99 option in =
<CODE>CFLAGS</CODE>, because that=20
is not <EM>required</EM> for proper compilation. You can consider it a =
default=20
that is only recommended. If the package is set up so that it is =
compiled with=20
GCC by default, then you might as well include =
=E2=80=98<SAMP>-O</SAMP>=E2=80=99 in the default=20
value of <CODE>CFLAGS</CODE> as well. </P>
<P>Put <CODE>CFLAGS</CODE> last in the compilation command, after other=20
variables containing compiler options, so the user can use =
<CODE>CFLAGS</CODE>=20
to override the others. </P>
<P><CODE>CFLAGS</CODE> should be used in every invocation of the C =
compiler,=20
both those which do compilation and those which do linking. </P>
<P>Every Makefile should define the variable <CODE>INSTALL</CODE>, which =
is the=20
basic command for installing a file into the system. </P>
<P>Every Makefile should also define the variables =
<CODE>INSTALL_PROGRAM</CODE>=20
and <CODE>INSTALL_DATA</CODE>. (The default for =
<CODE>INSTALL_PROGRAM</CODE>=20
should be <CODE>$(INSTALL)</CODE>; the default for =
<CODE>INSTALL_DATA</CODE>=20
should be <CODE>${INSTALL} -m 644</CODE>.) Then it should use those =
variables as=20
the commands for actual installation, for executables and =
non-executables=20
respectively. Minimal use of these variables is as follows: </P>
<DIV class=3Dexample><PRE class=3Dexample>$(INSTALL_PROGRAM) foo =
$(bindir)/foo
$(INSTALL_DATA) libfoo.a $(libdir)/libfoo.a
</PRE></DIV>
<P>However, it is preferable to support a <CODE>DESTDIR</CODE> prefix on =
the=20
target files, as explained in the next section. </P>
<P>It is acceptable, but not required, to install multiple files in one =
command,=20
with the final argument being a directory, as in: </P>
<DIV class=3Dexample><PRE class=3Dexample>$(INSTALL_PROGRAM) foo bar baz =
$(bindir)
</PRE></DIV>
<HR>
<A name=3DDESTDIR></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Directory-Varia=
bles"=20
rel=3Dnext>Directory Variables</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Command-Variabl=
es"=20
rel=3Dprev>Command Variables</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Conven=
tions"=20
rel=3Dup>Makefile Conventions</A> &nbsp; [<A title=3D"Table of contents" =

href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A=20
name=3DDESTDIR_003a-Support-for-Staged-Installs></A>
<H3 class=3Dsection>15.4 <CODE>DESTDIR</CODE>: Support for Staged =
Installs</H3><A=20
name=3Dindex-DESTDIR></A><A name=3Dindex-staged-installs></A><A=20
name=3Dindex-installations_002c-staged></A>
<P><CODE>DESTDIR</CODE> is a variable prepended to each installed target =
file,=20
like this: </P>
<DIV class=3Dexample><PRE class=3Dexample>$(INSTALL_PROGRAM) foo =
$(DESTDIR)$(bindir)/foo
$(INSTALL_DATA) libfoo.a $(DESTDIR)$(libdir)/libfoo.a
</PRE></DIV>
<P>The <CODE>DESTDIR</CODE> variable is specified by the user on the=20
<CODE>make</CODE> command line as an absolute file name. For example: =
</P>
<DIV class=3Dexample><PRE class=3Dexample>make DESTDIR=3D/tmp/stage =
install
</PRE></DIV>
<P><CODE>DESTDIR</CODE> should be supported only in the =
<CODE>install*</CODE>=20
and <CODE>uninstall*</CODE> targets, as those are the only targets where =
it is=20
useful. </P>
<P>If your installation step would normally install=20
<SAMP>/usr/local/bin/foo</SAMP> and =
<SAMP>/usr/local/lib/libfoo.a</SAMP>, then=20
an installation invoked as in the example above would install=20
<SAMP>/tmp/stage/usr/local/bin/foo</SAMP> and=20
<SAMP>/tmp/stage/usr/local/lib/libfoo.a</SAMP> instead. </P>
<P>Prepending the variable <CODE>DESTDIR</CODE> to each target in this =
way=20
provides for <EM>staged installs</EM>, where the installed files are not =
placed=20
directly into their expected location but are instead copied into a =
temporary=20
location (<CODE>DESTDIR</CODE>). However, installed files maintain their =

relative directory structure and any embedded file names will not be =
modified.=20
</P>
<P>You should not set the value of <CODE>DESTDIR</CODE> in your=20
<SAMP>Makefile</SAMP> at all; then the files are installed into their =
expected=20
locations by default. Also, specifying <CODE>DESTDIR</CODE> should not =
change=20
the operation of the software in any way, so its value should not be =
included in=20
any file contents. </P>
<P><CODE>DESTDIR</CODE> support is commonly used in package creation. It =
is also=20
helpful to users who want to understand what a given package will =
install where,=20
and to allow users who don=E2=80=99t normally have permissions to =
install into protected=20
areas to build and install before gaining those permissions. Finally, it =
can be=20
useful with tools such as <CODE>stow</CODE>, where code is installed in =
one=20
place but made to appear to be installed somewhere else using symbolic =
links or=20
special mount operations. So, we strongly recommend GNU packages support =

<CODE>DESTDIR</CODE>, though it is not an absolute requirement. </P>
<HR>
<A name=3DDirectory-Variables></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Standard-Target=
s"=20
rel=3Dnext>Standard Targets</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#DESTDIR"=20
rel=3Dprev>DESTDIR</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Conven=
tions"=20
rel=3Dup>Makefile Conventions</A> &nbsp; [<A title=3D"Table of contents" =

href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A=20
name=3DVariables-for-Installation-Directories></A>
<H3 class=3Dsection>15.5 Variables for Installation Directories</H3>
<P>Installation directories should always be named by variables, so it =
is easy=20
to install in a nonstandard place. The standard names for these =
variables and=20
the values they should have in GNU packages are described below. They =
are based=20
on a standard file system layout; variants of it are used in GNU/Linux =
and other=20
modern operating systems. </P>
<P>Installers are expected to override these values when calling=20
<CODE>make</CODE> (e.g., <KBD>make prefix=3D/usr install</KBD> or=20
<CODE>configure</CODE> (e.g., <KBD>configure --prefix=3D/usr</KBD>). GNU =
packages=20
should not try to guess which value should be appropriate for these =
variables on=20
the system they are being installed onto: use the default settings =
specified=20
here so that all GNU packages behave identically, allowing the installer =
to=20
achieve any desired layout. </P><A=20
name=3Dindex-directories_002c-creating-installation></A><A=20
name=3Dindex-installation-directories_002c-creating></A>
<P>All installation directories, and their parent directories, should be =
created=20
(if necessary) before they are installed into. </P>
<P>These first two variables set the root for the installation. All the =
other=20
installation directories should be subdirectories of one of these two, =
and=20
nothing should be directly installed into these two directories. </P>
<DL compact>
  <DT><CODE>prefix</CODE></DT>
  <DD><A name=3Dindex-prefix></A>
  <P>A prefix used in constructing the default values of the variables =
listed=20
  below. The default value of <CODE>prefix</CODE> should be=20
  <SAMP>/usr/local</SAMP>. When building the complete GNU system, the =
prefix=20
  will be empty and <SAMP>/usr</SAMP> will be a symbolic link to =
<SAMP>/</SAMP>.=20
  (If you are using Autoconf, write it as =
=E2=80=98<SAMP>@prefix@</SAMP>=E2=80=99.) </P>
  <P>Running =E2=80=98<SAMP>make install</SAMP>=E2=80=99 with a =
different value of=20
  <CODE>prefix</CODE> from the one used to build the program should =
<EM>not</EM>=20
  recompile the program. </P></DD>
  <DT><CODE>exec_prefix</CODE></DT>
  <DD><A name=3Dindex-exec_005fprefix></A>
  <P>A prefix used in constructing the default values of some of the =
variables=20
  listed below. The default value of <CODE>exec_prefix</CODE> should be=20
  <CODE>$(prefix)</CODE>. (If you are using Autoconf, write it as=20
  =E2=80=98<SAMP>@exec_prefix@</SAMP>=E2=80=99.) </P>
  <P>Generally, <CODE>$(exec_prefix)</CODE> is used for directories that =
contain=20
  machine-specific files (such as executables and subroutine libraries), =
while=20
  <CODE>$(prefix)</CODE> is used directly for other directories. </P>
  <P>Running =E2=80=98<SAMP>make install</SAMP>=E2=80=99 with a =
different value of=20
  <CODE>exec_prefix</CODE> from the one used to build the program should =

  <EM>not</EM> recompile the program. </P></DD></DL>
<P>Executable programs are installed in one of the following =
directories. </P>
<DL compact>
  <DT><CODE>bindir</CODE></DT>
  <DD><A name=3Dindex-bindir></A>
  <P>The directory for installing executable programs that users can =
run. This=20
  should normally be <SAMP>/usr/local/bin</SAMP>, but write it as=20
  <SAMP>$(exec_prefix)/bin</SAMP>. (If you are using Autoconf, write it =
as=20
  =E2=80=98<SAMP>@bindir@</SAMP>=E2=80=99.) </P></DD>
  <DT><CODE>sbindir</CODE></DT>
  <DD><A name=3Dindex-sbindir></A>
  <P>The directory for installing executable programs that can be run =
from the=20
  shell, but are only generally useful to system administrators. This =
should=20
  normally be <SAMP>/usr/local/sbin</SAMP>, but write it as=20
  <SAMP>$(exec_prefix)/sbin</SAMP>. (If you are using Autoconf, write it =
as=20
  =E2=80=98<SAMP>@sbindir@</SAMP>=E2=80=99.) </P></DD>
  <DT><CODE>libexecdir</CODE></DT>
  <DD><A name=3Dindex-libexecdir></A>
  <P>The directory for installing executable programs to be run by other =

  programs rather than by users. This directory should normally be=20
  <SAMP>/usr/local/libexec</SAMP>, but write it as=20
  <SAMP>$(exec_prefix)/libexec</SAMP>. (If you are using Autoconf, write =
it as=20
  =E2=80=98<SAMP>@libexecdir@</SAMP>=E2=80=99.) </P>
  <P>The definition of =E2=80=98<SAMP>libexecdir</SAMP>=E2=80=99 is the =
same for all packages,=20
  so you should install your data in a subdirectory thereof. Most =
packages=20
  install their data under =
<SAMP>$(libexecdir)/<VAR>package-name</VAR>/</SAMP>,=20
  possibly within additional subdirectories thereof, such as=20
  =
<SAMP>$(libexecdir)/<VAR>package-name</VAR>/<VAR>machine</VAR>/<VAR>versi=
on</VAR></SAMP>.=20
  </P></DD></DL>
<P>Data files used by the program during its execution are divided into=20
categories in two ways. </P>
<UL>
  <LI>Some files are normally modified by programs; others are never =
normally=20
  modified (though users may edit some of these). </LI>
  <LI>Some files are architecture-independent and can be shared by all =
machines=20
  at a site; some are architecture-dependent and can be shared only by =
machines=20
  of the same kind and operating system; others may never be shared =
between two=20
  machines. </LI></UL>
<P>This makes for six different possibilities. However, we want to =
discourage=20
the use of architecture-dependent files, aside from object files and =
libraries.=20
It is much cleaner to make other data files architecture-independent, =
and it is=20
generally not hard. </P>
<P>Here are the variables Makefiles should use to specify directories to =
put=20
these various kinds of files in: </P>
<DL compact>
  <DT>=E2=80=98<SAMP>datarootdir</SAMP>=E2=80=99</DT>
  <DD>
  <P>The root of the directory tree for read-only =
architecture-independent data=20
  files. This should normally be <SAMP>/usr/local/share</SAMP>, but =
write it as=20
  <SAMP>$(prefix)/share</SAMP>. (If you are using Autoconf, write it as=20
  =E2=80=98<SAMP>@datarootdir@</SAMP>=E2=80=99.) =
=E2=80=98<SAMP>datadir</SAMP>=E2=80=99=E2=80=99s default value is based=20
  on this variable; so are =E2=80=98<SAMP>infodir</SAMP>=E2=80=99, =
=E2=80=98<SAMP>mandir</SAMP>=E2=80=99, and=20
  others. </P></DD>
  <DT>=E2=80=98<SAMP>datadir</SAMP>=E2=80=99</DT>
  <DD>
  <P>The directory for installing idiosyncratic read-only=20
  architecture-independent data files for this program. This is usually =
the same=20
  place as =E2=80=98<SAMP>datarootdir</SAMP>=E2=80=99, but we use the =
two separate variables so=20
  that you can move these program-specific files without altering the =
location=20
  for Info files, man pages, etc. </P>
  <P>This should normally be <SAMP>/usr/local/share</SAMP>, but write it =
as=20
  <SAMP>$(datarootdir)</SAMP>. (If you are using Autoconf, write it as=20
  =E2=80=98<SAMP>@datadir@</SAMP>=E2=80=99.) </P>
  <P>The definition of =E2=80=98<SAMP>datadir</SAMP>=E2=80=99 is the =
same for all packages, so=20
  you should install your data in a subdirectory thereof. Most packages =
install=20
  their data under <SAMP>$(datadir)/<VAR>package-name</VAR>/</SAMP>. =
</P></DD>
  <DT>=E2=80=98<SAMP>sysconfdir</SAMP>=E2=80=99</DT>
  <DD>
  <P>The directory for installing read-only data files that pertain to a =
single=20
  machine=E2=80=93that is to say, files for configuring a host. Mailer =
and network=20
  configuration files, <SAMP>/etc/passwd</SAMP>, and so forth belong =
here. All=20
  the files in this directory should be ordinary ASCII text files. This=20
  directory should normally be <SAMP>/usr/local/etc</SAMP>, but write it =
as=20
  <SAMP>$(prefix)/etc</SAMP>. (If you are using Autoconf, write it as=20
  =E2=80=98<SAMP>@sysconfdir@</SAMP>=E2=80=99.) </P>
  <P>Do not install executables here in this directory (they probably =
belong in=20
  <SAMP>$(libexecdir)</SAMP> or <SAMP>$(sbindir)</SAMP>). Also do not =
install=20
  files that are modified in the normal course of their use (programs =
whose=20
  purpose is to change the configuration of the system excluded). Those =
probably=20
  belong in <SAMP>$(localstatedir)</SAMP>. </P></DD>
  <DT>=E2=80=98<SAMP>sharedstatedir</SAMP>=E2=80=99</DT>
  <DD>
  <P>The directory for installing architecture-independent data files =
which the=20
  programs modify while they run. This should normally be=20
  <SAMP>/usr/local/com</SAMP>, but write it as =
<SAMP>$(prefix)/com</SAMP>. (If=20
  you are using Autoconf, write it as =
=E2=80=98<SAMP>@sharedstatedir@</SAMP>=E2=80=99.)=20
</P></DD>
  <DT>=E2=80=98<SAMP>localstatedir</SAMP>=E2=80=99</DT>
  <DD>
  <P>The directory for installing data files which the programs modify =
while=20
  they run, and that pertain to one specific machine. Users should never =
need to=20
  modify files in this directory to configure the package=E2=80=99s =
operation; put such=20
  configuration information in separate files that go in =
<SAMP>$(datadir)</SAMP>=20
  or <SAMP>$(sysconfdir)</SAMP>. <SAMP>$(localstatedir)</SAMP> should =
normally=20
  be <SAMP>/usr/local/var</SAMP>, but write it as =
<SAMP>$(prefix)/var</SAMP>.=20
  (If you are using Autoconf, write it as =
=E2=80=98<SAMP>@localstatedir@</SAMP>=E2=80=99.)=20
  </P></DD>
  <DT>=E2=80=98<SAMP>runstatedir</SAMP>=E2=80=99</DT>
  <DD>
  <P>The directory for installing data files which the programs modify =
while=20
  they run, that pertain to one specific machine, and which need not =
persist=20
  longer than the execution of the program=E2=80=94which is generally =
long-lived, for=20
  example, until the next reboot. PID files for system daemons are a =
typical=20
  use. In addition, this directory should not be cleaned except perhaps =
at=20
  reboot, while the general <SAMP>/tmp</SAMP> (<CODE>TMPDIR</CODE>) may =
be=20
  cleaned arbitrarily. This should normally be <SAMP>/var/run</SAMP>, =
but write=20
  it as <SAMP>$(localstatedir)/run</SAMP>. Having it as a separate =
variable=20
  allows the use of <SAMP>/run</SAMP> if desired, for example. (If you =
are using=20
  Autoconf 2.70 or later, write it as =
=E2=80=98<SAMP>@runstatedir@</SAMP>=E2=80=99.)=20
</P></DD></DL>
<P>These variables specify the directory for installing certain specific =
types=20
of files, if your program has them. Every GNU package should have Info =
files, so=20
every program needs =E2=80=98<SAMP>infodir</SAMP>=E2=80=99, but not all =
need=20
=E2=80=98<SAMP>libdir</SAMP>=E2=80=99 or =
=E2=80=98<SAMP>lispdir</SAMP>=E2=80=99. </P>
<DL compact>
  <DT>=E2=80=98<SAMP>includedir</SAMP>=E2=80=99</DT>
  <DD>
  <P>The directory for installing header files to be included by user =
programs=20
  with the C =E2=80=98<SAMP>#include</SAMP>=E2=80=99 preprocessor =
directive. This should=20
  normally be <SAMP>/usr/local/include</SAMP>, but write it as=20
  <SAMP>$(prefix)/include</SAMP>. (If you are using Autoconf, write it =
as=20
  =E2=80=98<SAMP>@includedir@</SAMP>=E2=80=99.) </P>
  <P>Most compilers other than GCC do not look for header files in =
directory=20
  <SAMP>/usr/local/include</SAMP>. So installing the header files this =
way is=20
  only useful with GCC. Sometimes this is not a problem because some =
libraries=20
  are only really intended to work with GCC. But some libraries are =
intended to=20
  work with other compilers. They should install their header files in =
two=20
  places, one specified by <CODE>includedir</CODE> and one specified by=20
  <CODE>oldincludedir</CODE>. </P></DD>
  <DT>=E2=80=98<SAMP>oldincludedir</SAMP>=E2=80=99</DT>
  <DD>
  <P>The directory for installing =
=E2=80=98<SAMP>#include</SAMP>=E2=80=99 header files for use=20
  with compilers other than GCC. This should normally be=20
  <SAMP>/usr/include</SAMP>. (If you are using Autoconf, you can write =
it as=20
  =E2=80=98<SAMP>@oldincludedir@</SAMP>=E2=80=99.) </P>
  <P>The Makefile commands should check whether the value of=20
  <CODE>oldincludedir</CODE> is empty. If it is, they should not try to =
use it;=20
  they should cancel the second installation of the header files. </P>
  <P>A package should not replace an existing header in this directory =
unless=20
  the header came from the same package. Thus, if your Foo package =
provides a=20
  header file <SAMP>foo.h</SAMP>, then it should install the header file =
in the=20
  <CODE>oldincludedir</CODE> directory if either (1) there is no=20
  <SAMP>foo.h</SAMP> there or (2) the <SAMP>foo.h</SAMP> that exists =
came from=20
  the Foo package. </P>
  <P>To tell whether <SAMP>foo.h</SAMP> came from the Foo package, put a =
magic=20
  string in the file=E2=80=94part of a comment=E2=80=94and =
<CODE>grep</CODE> for that string.=20
  </P></DD>
  <DT>=E2=80=98<SAMP>docdir</SAMP>=E2=80=99</DT>
  <DD>
  <P>The directory for installing documentation files (other than Info) =
for this=20
  package. By default, it should be=20
  <SAMP>/usr/local/share/doc/<VAR>yourpkg</VAR></SAMP>, but it should be =
written=20
  as <SAMP>$(datarootdir)/doc/<VAR>yourpkg</VAR></SAMP>. (If you are =
using=20
  Autoconf, write it as =E2=80=98<SAMP>@docdir@</SAMP>=E2=80=99.) The =
<VAR>yourpkg</VAR>=20
  subdirectory, which may include a version number, prevents collisions =
among=20
  files with common names, such as <SAMP>README</SAMP>. </P></DD>
  <DT>=E2=80=98<SAMP>infodir</SAMP>=E2=80=99</DT>
  <DD>
  <P>The directory for installing the Info files for this package. By =
default,=20
  it should be <SAMP>/usr/local/share/info</SAMP>, but it should be =
written as=20
  <SAMP>$(datarootdir)/info</SAMP>. (If you are using Autoconf, write it =
as=20
  =E2=80=98<SAMP>@infodir@</SAMP>=E2=80=99.) <CODE>infodir</CODE> is =
separate from=20
  <CODE>docdir</CODE> for compatibility with existing practice. =
</P></DD>
  <DT>=E2=80=98<SAMP>htmldir</SAMP>=E2=80=99</DT>
  <DT>=E2=80=98<SAMP>dvidir</SAMP>=E2=80=99</DT>
  <DT>=E2=80=98<SAMP>pdfdir</SAMP>=E2=80=99</DT>
  <DT>=E2=80=98<SAMP>psdir</SAMP>=E2=80=99</DT>
  <DD>
  <P>Directories for installing documentation files in the particular =
format.=20
  They should all be set to <CODE>$(docdir)</CODE> by default. (If you =
are using=20
  Autoconf, write them as =E2=80=98<SAMP>@htmldir@</SAMP>=E2=80=99, =
=E2=80=98<SAMP>@dvidir@</SAMP>=E2=80=99,=20
  etc.) Packages which supply several translations of their =
documentation should=20
  install them in =
=E2=80=98<SAMP>$(htmldir)/</SAMP>=E2=80=99<VAR>ll</VAR>,=20
  =E2=80=98<SAMP>$(pdfdir)/</SAMP>=E2=80=99<VAR>ll</VAR>, etc. where =
<VAR>ll</VAR> is a locale=20
  abbreviation such as =E2=80=98<SAMP>en</SAMP>=E2=80=99 or =
=E2=80=98<SAMP>pt_BR</SAMP>=E2=80=99. </P></DD>
  <DT>=E2=80=98<SAMP>libdir</SAMP>=E2=80=99</DT>
  <DD>
  <P>The directory for object files and libraries of object code. Do not =
install=20
  executables here, they probably ought to go in =
<SAMP>$(libexecdir)</SAMP>=20
  instead. The value of <CODE>libdir</CODE> should normally be=20
  <SAMP>/usr/local/lib</SAMP>, but write it as =
<SAMP>$(exec_prefix)/lib</SAMP>.=20
  (If you are using Autoconf, write it as =
=E2=80=98<SAMP>@libdir@</SAMP>=E2=80=99.) </P></DD>
  <DT>=E2=80=98<SAMP>lispdir</SAMP>=E2=80=99</DT>
  <DD>
  <P>The directory for installing any Emacs Lisp files in this package. =
By=20
  default, it should be <SAMP>/usr/local/share/emacs/site-lisp</SAMP>, =
but it=20
  should be written as <SAMP>$(datarootdir)/emacs/site-lisp</SAMP>. </P>
  <P>If you are using Autoconf, write the default as =
=E2=80=98<SAMP>@lispdir@</SAMP>=E2=80=99.=20
  In order to make =E2=80=98<SAMP>@lispdir@</SAMP>=E2=80=99 work, you =
need the following lines=20
  in your <SAMP>configure.ac</SAMP> file: </P>
  <DIV class=3Dexample><PRE =
class=3Dexample>lispdir=3D'${datarootdir}/emacs/site-lisp'
AC_SUBST(lispdir)
</PRE></DIV></DD>
  <DT>=E2=80=98<SAMP>localedir</SAMP>=E2=80=99</DT>
  <DD>
  <P>The directory for installing locale-specific message catalogs for =
this=20
  package. By default, it should be =
<SAMP>/usr/local/share/locale</SAMP>, but it=20
  should be written as <SAMP>$(datarootdir)/locale</SAMP>. (If you are =
using=20
  Autoconf, write it as =E2=80=98<SAMP>@localedir@</SAMP>=E2=80=99.) =
This directory usually has=20
  a subdirectory per locale. </P></DD></DL>
<P>Unix-style man pages are installed in one of the following: </P>
<DL compact>
  <DT>=E2=80=98<SAMP>mandir</SAMP>=E2=80=99</DT>
  <DD>
  <P>The top-level directory for installing the man pages (if any) for =
this=20
  package. It will normally be <SAMP>/usr/local/share/man</SAMP>, but =
you should=20
  write it as <SAMP>$(datarootdir)/man</SAMP>. (If you are using =
Autoconf, write=20
  it as =E2=80=98<SAMP>@mandir@</SAMP>=E2=80=99.) </P></DD>
  <DT>=E2=80=98<SAMP>man1dir</SAMP>=E2=80=99</DT>
  <DD>
  <P>The directory for installing section 1 man pages. Write it as=20
  <SAMP>$(mandir)/man1</SAMP>. </P></DD>
  <DT>=E2=80=98<SAMP>man2dir</SAMP>=E2=80=99</DT>
  <DD>
  <P>The directory for installing section 2 man pages. Write it as=20
  <SAMP>$(mandir)/man2</SAMP> </P></DD>
  <DT>=E2=80=98<SAMP>=E2=80=A6</SAMP>=E2=80=99</DT>
  <DD>
  <P><STRONG>Don=E2=80=99t make the primary documentation for any GNU =
software be a man=20
  page. Write a manual in Texinfo instead. Man pages are just for the =
sake of=20
  people running GNU software on Unix, which is a secondary application=20
  only.</STRONG> </P></DD>
  <DT>=E2=80=98<SAMP>manext</SAMP>=E2=80=99</DT>
  <DD>
  <P>The file name extension for the installed man page. This should =
contain a=20
  period followed by the appropriate digit; it should normally be=20
  =E2=80=98<SAMP>.1</SAMP>=E2=80=99. </P></DD>
  <DT>=E2=80=98<SAMP>man1ext</SAMP>=E2=80=99</DT>
  <DD>
  <P>The file name extension for installed section 1 man pages. =
</P></DD>
  <DT>=E2=80=98<SAMP>man2ext</SAMP>=E2=80=99</DT>
  <DD>
  <P>The file name extension for installed section 2 man pages. =
</P></DD>
  <DT>=E2=80=98<SAMP>=E2=80=A6</SAMP>=E2=80=99</DT>
  <DD>
  <P>Use these names instead of =E2=80=98<SAMP>manext</SAMP>=E2=80=99 if =
the package needs to=20
  install man pages in more than one section of the manual. =
</P></DD></DL>
<P>And finally, you should set the following variable: </P>
<DL compact>
  <DT>=E2=80=98<SAMP>srcdir</SAMP>=E2=80=99</DT>
  <DD>
  <P>The directory for the sources being compiled. The value of this =
variable is=20
  normally inserted by the <CODE>configure</CODE> shell script. (If you =
are=20
  using Autoconf, use =E2=80=98<SAMP>srcdir =3D =
@srcdir@</SAMP>=E2=80=99.) </P></DD></DL>
<P>For example: </P>
<DIV class=3Dsmallexample><PRE class=3Dsmallexample># Common prefix for =
installation directories.
# NOTE: This directory must exist when you start the install.
prefix =3D /usr/local
datarootdir =3D $(prefix)/share
datadir =3D $(datarootdir)
exec_prefix =3D $(prefix)
# Where to put the executable for the command `gcc'.
bindir =3D $(exec_prefix)/bin
# Where to put the directories used by the compiler.
libexecdir =3D $(exec_prefix)/libexec
# Where to put the Info files.
infodir =3D $(datarootdir)/info
</PRE></DIV>
<P>If your program installs a large number of files into one of the =
standard=20
user-specified directories, it might be useful to group them into a =
subdirectory=20
particular to that program. If you do this, you should write the=20
<CODE>install</CODE> rule to create these subdirectories. </P>
<P>Do not expect the user to include the subdirectory name in the value =
of any=20
of the variables listed above. The idea of having a uniform set of =
variable=20
names for installation directories is to enable the user to specify the =
exact=20
same values for several different GNU packages. In order for this to be =
useful,=20
all the packages must be designed so that they will work sensibly when =
the user=20
does so. </P>
<P>At times, not all of these variables may be implemented in the =
current=20
release of Autoconf and/or Automake; but as of Autoconf&nbsp;2.60, we =
believe=20
all of them are. When any are missing, the descriptions here serve as=20
specifications for what Autoconf will implement. As a programmer, you =
can either=20
use a development version of Autoconf or avoid using these variables =
until a=20
stable release is made which supports them. </P>
<HR>
<A name=3DStandard-Targets></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Install-Command=
-Categories"=20
rel=3Dnext>Install Command Categories</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Directory-Varia=
bles"=20
rel=3Dprev>Directory Variables</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Conven=
tions"=20
rel=3Dup>Makefile Conventions</A> &nbsp; [<A title=3D"Table of contents" =

href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DStandard-Targets-for-Users></A>
<H3 class=3Dsection>15.6 Standard Targets for Users</H3>
<P>All GNU programs should have the following targets in their =
Makefiles: </P>
<DL compact>
  <DT>=E2=80=98<SAMP>all</SAMP>=E2=80=99</DT>
  <DD>
  <P>Compile the entire program. This should be the default target. This =
target=20
  need not rebuild any documentation files; Info files should normally =
be=20
  included in the distribution, and DVI (and other documentation format) =
files=20
  should be made only when explicitly asked for. </P>
  <P>By default, the Make rules should compile and link with =
=E2=80=98<SAMP>-g</SAMP>=E2=80=99,=20
  so that executable programs have debugging symbols. Otherwise, you are =

  essentially helpless in the face of a crash, and it is often far from =
easy to=20
  reproduce with a fresh build. </P></DD>
  <DT>=E2=80=98<SAMP>install</SAMP>=E2=80=99</DT>
  <DD>
  <P>Compile the program and copy the executables, libraries, and so on =
to the=20
  file names where they should reside for actual use. If there is a =
simple test=20
  to verify that a program is properly installed, this target should run =
that=20
  test. </P>
  <P>Do not strip executables when installing them. This helps eventual=20
  debugging that may be needed later, and nowadays disk space is cheap =
and=20
  dynamic loaders typically ensure debug sections are not loaded during =
normal=20
  execution. Users that need stripped binaries may invoke the=20
  <CODE>install-strip</CODE> target to do that. </P>
  <P>If possible, write the <CODE>install</CODE> target rule so that it =
does not=20
  modify anything in the directory where the program was built, provided =

  =E2=80=98<SAMP>make all</SAMP>=E2=80=99 has just been done. This is =
convenient for building=20
  the program under one user name and installing it under another. </P>
  <P>The commands should create all the directories in which files are =
to be=20
  installed, if they don=E2=80=99t already exist. This includes the =
directories=20
  specified as the values of the variables <CODE>prefix</CODE> and=20
  <CODE>exec_prefix</CODE>, as well as all subdirectories that are =
needed. One=20
  way to do this is by means of an <CODE>installdirs</CODE> target as =
described=20
  below. </P>
  <P>Use =E2=80=98<SAMP>-</SAMP>=E2=80=99 before any command for =
installing a man page, so that=20
  <CODE>make</CODE> will ignore any errors. This is in case there are =
systems=20
  that don=E2=80=99t have the Unix man page documentation system =
installed. </P>
  <P>The way to install Info files is to copy them into =
<SAMP>$(infodir)</SAMP>=20
  with <CODE>$(INSTALL_DATA)</CODE> (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Command-Variabl=
es">Command=20
  Variables</A>), and then run the <CODE>install-info</CODE> program if =
it is=20
  present. <CODE>install-info</CODE> is a program that edits the Info=20
  <SAMP>dir</SAMP> file to add or update the menu entry for the given =
Info file;=20
  it is part of the Texinfo package. </P>
  <P>Here is a sample rule to install an Info file that also tries to =
handle=20
  some additional situations, such as <CODE>install-info</CODE> not =
being=20
  present. </P>
  <DIV class=3Dsmallexample><PRE class=3Dsmallexample>do-install-info: =
foo.info installdirs
        $(NORMAL_INSTALL)
# Prefer an info file in . to one in srcdir.
        if test -f foo.info; then d=3D.; \
         else d=3D"$(srcdir)"; fi; \
        $(INSTALL_DATA) $$d/foo.info \
          "$(DESTDIR)$(infodir)/foo.info"
# Run install-info only if it exists.
# Use `if' instead of just prepending `-' to the
# line so we notice real errors from install-info.
# Use `$(SHELL) -c' because some shells do not
# fail gracefully when there is an unknown command.
        $(POST_INSTALL)
        if $(SHELL) -c 'install-info --version' \
           &gt;/dev/null 2&gt;&amp;1; then \
          install-info --dir-file=3D"$(DESTDIR)$(infodir)/dir" \
                       "$(DESTDIR)$(infodir)/foo.info"; \
        else true; fi
</PRE></DIV>
  <P>When writing the <CODE>install</CODE> target, you must classify all =
the=20
  commands into three categories: normal ones, <EM>pre-installation</EM> =

  commands and <EM>post-installation</EM> commands. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Install-Command=
-Categories">Install=20
  Command Categories</A>. </P></DD>
  <DT>=E2=80=98<SAMP>install-html</SAMP>=E2=80=99</DT>
  <DT>=E2=80=98<SAMP>install-dvi</SAMP>=E2=80=99</DT>
  <DT>=E2=80=98<SAMP>install-pdf</SAMP>=E2=80=99</DT>
  <DT>=E2=80=98<SAMP>install-ps</SAMP>=E2=80=99</DT>
  <DD>
  <P>These targets install documentation in formats other than Info; =
they=E2=80=99re=20
  intended to be called explicitly by the person installing the package, =
if that=20
  format is desired. GNU prefers Info files, so these must be installed =
by the=20
  <CODE>install</CODE> target. </P>
  <P>When you have many documentation files to install, we recommend =
that you=20
  avoid collisions and clutter by arranging for these targets to install =
in=20
  subdirectories of the appropriate installation directory, such as=20
  <CODE>htmldir</CODE>. As one example, if your package has multiple =
manuals,=20
  and you wish to install HTML documentation with many files (such as =
the=20
  =E2=80=9Csplit=E2=80=9D mode output by <CODE>makeinfo --html</CODE>), =
you=E2=80=99ll certainly want to=20
  use subdirectories, or two nodes with the same name in different =
manuals will=20
  overwrite each other. </P>
  <P>Please make these <CODE>install-<VAR>format</VAR></CODE> targets =
invoke the=20
  commands for the <VAR>format</VAR> target, for example, by making=20
  <VAR>format</VAR> a dependency. </P></DD>
  <DT>=E2=80=98<SAMP>uninstall</SAMP>=E2=80=99</DT>
  <DD>
  <P>Delete all the installed files=E2=80=94the copies that the =
=E2=80=98<SAMP>install</SAMP>=E2=80=99=20
  and =E2=80=98<SAMP>install-*</SAMP>=E2=80=99 targets create. </P>
  <P>This rule should not modify the directories where compilation is =
done, only=20
  the directories where files are installed. </P>
  <P>The uninstallation commands are divided into three categories, just =
like=20
  the installation commands. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Install-Command=
-Categories">Install=20
  Command Categories</A>. </P></DD>
  <DT>=E2=80=98<SAMP>install-strip</SAMP>=E2=80=99</DT>
  <DD>
  <P>Like <CODE>install</CODE>, but strip the executable files while =
installing=20
  them. In simple cases, this target can use the <CODE>install</CODE> =
target in=20
  a simple way: </P>
  <DIV class=3Dsmallexample><PRE class=3Dsmallexample>install-strip:
        $(MAKE) INSTALL_PROGRAM=3D'$(INSTALL_PROGRAM) -s' \
                install
</PRE></DIV>
  <P>But if the package installs scripts as well as real executables, =
the=20
  <CODE>install-strip</CODE> target can=E2=80=99t just refer to the =
<CODE>install</CODE>=20
  target; it has to strip the executables but not the scripts. </P>
  <P><CODE>install-strip</CODE> should not strip the executables in the =
build=20
  directory which are being copied for installation. It should only =
strip the=20
  copies that are installed. </P>
  <P>Normally we do not recommend stripping an executable unless you are =
sure=20
  the program has no bugs. However, it can be reasonable to install a =
stripped=20
  executable for actual execution while saving the unstripped executable =

  elsewhere in case there is a bug. </P></DD>
  <DT>=E2=80=98<SAMP>clean</SAMP>=E2=80=99</DT>
  <DD>
  <P>Delete all files in the current directory that are normally created =
by=20
  building the program. Also delete files in other directories if they =
are=20
  created by this makefile. However, don=E2=80=99t delete the files that =
record the=20
  configuration. Also preserve files that could be made by building, but =

  normally aren=E2=80=99t because the distribution comes with them. =
There is no need to=20
  delete parent directories that were created with =E2=80=98<SAMP>mkdir =
-p</SAMP>=E2=80=99,=20
  since they could have existed anyway. </P>
  <P>Delete <SAMP>.dvi</SAMP> files here if they are not part of the=20
  distribution. </P></DD>
  <DT>=E2=80=98<SAMP>distclean</SAMP>=E2=80=99</DT>
  <DD>
  <P>Delete all files in the current directory (or created by this =
makefile)=20
  that are created by configuring or building the program. If you have =
unpacked=20
  the source and built the program without creating any other files, =
=E2=80=98<SAMP>make=20
  distclean</SAMP>=E2=80=99 should leave only the files that were in the =
distribution.=20
  However, there is no need to delete parent directories that were =
created with=20
  =E2=80=98<SAMP>mkdir -p</SAMP>=E2=80=99, since they could have existed =
anyway. </P></DD>
  <DT>=E2=80=98<SAMP>mostlyclean</SAMP>=E2=80=99</DT>
  <DD>
  <P>Like =E2=80=98<SAMP>clean</SAMP>=E2=80=99, but may refrain from =
deleting a few files that=20
  people normally don=E2=80=99t want to recompile. For example, the=20
  =E2=80=98<SAMP>mostlyclean</SAMP>=E2=80=99 target for GCC does not =
delete=20
  <SAMP>libgcc.a</SAMP>, because recompiling it is rarely necessary and =
takes a=20
  lot of time. </P></DD>
  <DT>=E2=80=98<SAMP>maintainer-clean</SAMP>=E2=80=99</DT>
  <DD>
  <P>Delete almost everything that can be reconstructed with this =
Makefile. This=20
  typically includes everything deleted by <CODE>distclean</CODE>, plus =
more: C=20
  source files produced by Bison, tags tables, Info files, and so on. =
</P>
  <P>The reason we say =E2=80=9Calmost everything=E2=80=9D is that =
running the command=20
  =E2=80=98<SAMP>make maintainer-clean</SAMP>=E2=80=99 should not delete =
<SAMP>configure</SAMP>=20
  even if <SAMP>configure</SAMP> can be remade using a rule in the =
Makefile.=20
  More generally, =E2=80=98<SAMP>make maintainer-clean</SAMP>=E2=80=99 =
should not delete=20
  anything that needs to exist in order to run <SAMP>configure</SAMP> =
and then=20
  begin to build the program. Also, there is no need to delete parent=20
  directories that were created with =E2=80=98<SAMP>mkdir =
-p</SAMP>=E2=80=99, since they could=20
  have existed anyway. These are the only exceptions;=20
  <CODE>maintainer-clean</CODE> should delete everything else that can =
be=20
  rebuilt. </P>
  <P>The =E2=80=98<SAMP>maintainer-clean</SAMP>=E2=80=99 target is =
intended to be used by a=20
  maintainer of the package, not by ordinary users. You may need special =
tools=20
  to reconstruct some of the files that =E2=80=98<SAMP>make =
maintainer-clean</SAMP>=E2=80=99=20
  deletes. Since these files are normally included in the distribution, =
we don=E2=80=99t=20
  take care to make them easy to reconstruct. If you find you need to =
unpack the=20
  full distribution again, don=E2=80=99t blame us. </P>
  <P>To help make users aware of this, the commands for the special=20
  <CODE>maintainer-clean</CODE> target should start with these two: </P>
  <DIV class=3Dsmallexample><PRE class=3Dsmallexample>@echo 'This =
command is intended for maintainers to use; it'
@echo 'deletes files that may need special tools to rebuild.'
</PRE></DIV></DD>
  <DT>=E2=80=98<SAMP>TAGS</SAMP>=E2=80=99</DT>
  <DD>
  <P>Update a tags table for this program. </P></DD>
  <DT>=E2=80=98<SAMP>info</SAMP>=E2=80=99</DT>
  <DD>
  <P>Generate any Info files needed. The best way to write the rules is =
as=20
  follows: </P>
  <DIV class=3Dsmallexample><PRE class=3Dsmallexample>info: foo.info

foo.info: foo.texi chap1.texi chap2.texi
        $(MAKEINFO) $(srcdir)/foo.texi
</PRE></DIV>
  <P>You must define the variable <CODE>MAKEINFO</CODE> in the Makefile. =
It=20
  should run the <CODE>makeinfo</CODE> program, which is part of the =
Texinfo=20
  distribution. </P>
  <P>Normally a GNU distribution comes with Info files, and that means =
the Info=20
  files are present in the source directory. Therefore, the Make rule =
for an=20
  info file should update it in the source directory. When users build =
the=20
  package, ordinarily Make will not update the Info files because they =
will=20
  already be up to date. </P></DD>
  <DT>=E2=80=98<SAMP>dvi</SAMP>=E2=80=99</DT>
  <DT>=E2=80=98<SAMP>html</SAMP>=E2=80=99</DT>
  <DT>=E2=80=98<SAMP>pdf</SAMP>=E2=80=99</DT>
  <DT>=E2=80=98<SAMP>ps</SAMP>=E2=80=99</DT>
  <DD>
  <P>Generate documentation files in the given format. These targets =
should=20
  always exist, but any or all can be a no-op if the given output format =
cannot=20
  be generated. These targets should not be dependencies of the =
<CODE>all</CODE>=20
  target; the user must manually invoke them. </P>
  <P>Here=E2=80=99s an example rule for generating DVI files from =
Texinfo: </P>
  <DIV class=3Dsmallexample><PRE class=3Dsmallexample>dvi: foo.dvi

foo.dvi: foo.texi chap1.texi chap2.texi
        $(TEXI2DVI) $(srcdir)/foo.texi
</PRE></DIV>
  <P>You must define the variable <CODE>TEXI2DVI</CODE> in the Makefile. =
It=20
  should run the program <CODE>texi2dvi</CODE>, which is part of the =
Texinfo=20
  distribution. (<CODE>texi2dvi</CODE> uses TeX to do the real work of=20
  formatting. TeX is not distributed with Texinfo.) Alternatively, write =
only=20
  the dependencies, and allow GNU <CODE>make</CODE> to provide the =
command. </P>
  <P>Here=E2=80=99s another example, this one for generating HTML from =
Texinfo: </P>
  <DIV class=3Dsmallexample><PRE class=3Dsmallexample>html: foo.html

foo.html: foo.texi chap1.texi chap2.texi
        $(TEXI2HTML) $(srcdir)/foo.texi
</PRE></DIV>
  <P>Again, you would define the variable <CODE>TEXI2HTML</CODE> in the=20
  Makefile; for example, it might run <CODE>makeinfo --no-split =
--html</CODE>=20
  (<CODE>makeinfo</CODE> is part of the Texinfo distribution). </P></DD>
  <DT>=E2=80=98<SAMP>dist</SAMP>=E2=80=99</DT>
  <DD>
  <P>Create a distribution tar file for this program. The tar file =
should be set=20
  up so that the file names in the tar file start with a subdirectory =
name which=20
  is the name of the package it is a distribution for. This name can =
include the=20
  version number. </P>
  <P>For example, the distribution tar file of GCC version 1.40 unpacks =
into a=20
  subdirectory named <SAMP>gcc-1.40</SAMP>. </P>
  <P>The easiest way to do this is to create a subdirectory =
appropriately named,=20
  use <CODE>ln</CODE> or <CODE>cp</CODE> to install the proper files in =
it, and=20
  then <CODE>tar</CODE> that subdirectory. </P>
  <P>Compress the tar file with <CODE>gzip</CODE>. For example, the =
actual=20
  distribution file for GCC version 1.40 is called =
<SAMP>gcc-1.40.tar.gz</SAMP>.=20
  It is ok to support other free compression formats as well. </P>
  <P>The <CODE>dist</CODE> target should explicitly depend on all =
non-source=20
  files that are in the distribution, to make sure they are up to date =
in the=20
  distribution. See <A=20
  =
href=3D"http://www.gnu.org/prep/standards/standards.html#Releases">Making=
=20
  Releases</A> in <CITE>GNU Coding Standards</CITE>. </P></DD>
  <DT>=E2=80=98<SAMP>check</SAMP>=E2=80=99</DT>
  <DD>
  <P>Perform self-tests (if any). The user must build the program before =
running=20
  the tests, but need not install the program; you should write the =
self-tests=20
  so that they work when the program is built but not installed. =
</P></DD></DL>
<P>The following targets are suggested as conventional names, for =
programs in=20
which they are useful. </P>
<DL compact>
  <DT><CODE>installcheck</CODE></DT>
  <DD>
  <P>Perform installation tests (if any). The user must build and =
install the=20
  program before running the tests. You should not assume that=20
  <SAMP>$(bindir)</SAMP> is in the search path. </P></DD>
  <DT><CODE>installdirs</CODE></DT>
  <DD>
  <P>It=E2=80=99s useful to add a target named =
=E2=80=98<SAMP>installdirs</SAMP>=E2=80=99 to create the=20
  directories where files are installed, and their parent directories. =
There is=20
  a script called <SAMP>mkinstalldirs</SAMP> which is convenient for =
this; you=20
  can find it in the Gnulib package. You can use a rule like this: </P>
  <DIV class=3Dsmallexample><PRE class=3Dsmallexample># Make sure all =
installation directories (e.g. $(bindir))
# actually exist by making them if necessary.
installdirs: mkinstalldirs
        $(srcdir)/mkinstalldirs $(bindir) $(datadir) \
                                $(libdir) $(infodir) \
                                $(mandir)
</PRE></DIV>
  <P>or, if you wish to support <CODE>DESTDIR</CODE> (strongly =
encouraged), </P>
  <DIV class=3Dsmallexample><PRE class=3Dsmallexample># Make sure all =
installation directories (e.g. $(bindir))
# actually exist by making them if necessary.
installdirs: mkinstalldirs
        $(srcdir)/mkinstalldirs \
            $(DESTDIR)$(bindir) $(DESTDIR)$(datadir) \
            $(DESTDIR)$(libdir) $(DESTDIR)$(infodir) \
            $(DESTDIR)$(mandir)
</PRE></DIV>
  <P>This rule should not modify the directories where compilation is =
done. It=20
  should do nothing but create installation directories. </P></DD></DL>
<HR>
<A name=3DInstall-Command-Categories></A>
<DIV class=3Dheader>
<P>Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Standard-Target=
s"=20
rel=3Dprev>Standard Targets</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Conven=
tions"=20
rel=3Dup>Makefile Conventions</A> &nbsp; [<A title=3D"Table of contents" =

href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DInstall-Command-Categories-1></A>
<H3 class=3Dsection>15.7 Install Command Categories</H3><A=20
name=3Dindex-pre_002dinstallation-commands></A><A=20
name=3Dindex-post_002dinstallation-commands></A>
<P>When writing the <CODE>install</CODE> target, you must classify all =
the=20
commands into three categories: normal ones, <EM>pre-installation</EM> =
commands=20
and <EM>post-installation</EM> commands. </P>
<P>Normal commands move files into their proper places, and set their =
modes.=20
They may not alter any files except the ones that come entirely from the =
package=20
they belong to. </P>
<P>Pre-installation and post-installation commands may alter other =
files; in=20
particular, they can edit global configuration files or data bases. </P>
<P>Pre-installation commands are typically executed before the normal =
commands,=20
and post-installation commands are typically run after the normal =
commands. </P>
<P>The most common use for a post-installation command is to run=20
<CODE>install-info</CODE>. This cannot be done with a normal command, =
since it=20
alters a file (the Info directory) which does not come entirely and =
solely from=20
the package being installed. It is a post-installation command because =
it needs=20
to be done after the normal command which installs the package=E2=80=99s =
Info files.=20
</P>
<P>Most programs don=E2=80=99t need any pre-installation commands, but =
we have the=20
feature just in case it is needed. </P>
<P>To classify the commands in the <CODE>install</CODE> rule into these =
three=20
categories, insert <EM>category lines</EM> among them. A category line =
specifies=20
the category for the commands that follow. </P>
<P>A category line consists of a tab and a reference to a special Make =
variable,=20
plus an optional comment at the end. There are three variables you can =
use, one=20
for each category; the variable name specifies the category. Category =
lines are=20
no-ops in ordinary execution because these three Make variables are =
normally=20
undefined (and you <EM>should not</EM> define them in the makefile). =
</P>
<P>Here are the three possible category lines, each with a comment that =
explains=20
what it means: </P>
<DIV class=3Dsmallexample><PRE class=3Dsmallexample>        =
$(PRE_INSTALL)     # <SPAN class=3Droman>Pre-install commands =
follow.</SPAN>
        $(POST_INSTALL)    # <SPAN class=3Droman>Post-install commands =
follow.</SPAN>
        $(NORMAL_INSTALL)  # <SPAN class=3Droman>Normal commands =
follow.</SPAN>
</PRE></DIV>
<P>If you don=E2=80=99t use a category line at the beginning of the =
<CODE>install</CODE>=20
rule, all the commands are classified as normal until the first category =
line.=20
If you don=E2=80=99t use any category lines, all the commands are =
classified as normal.=20
</P>
<P>These are the category lines for <CODE>uninstall</CODE>: </P>
<DIV class=3Dsmallexample><PRE class=3Dsmallexample>        =
$(PRE_UNINSTALL)     # <SPAN class=3Droman>Pre-uninstall commands =
follow.</SPAN>
        $(POST_UNINSTALL)    # <SPAN class=3Droman>Post-uninstall =
commands follow.</SPAN>
        $(NORMAL_UNINSTALL)  # <SPAN class=3Droman>Normal commands =
follow.</SPAN>
</PRE></DIV>
<P>Typically, a pre-uninstall command would be used for deleting entries =
from=20
the Info directory. </P>
<P>If the <CODE>install</CODE> or <CODE>uninstall</CODE> target has any=20
dependencies which act as subroutines of installation, then you should =
start=20
<EM>each</EM> dependency=E2=80=99s commands with a category line, and =
start the main=20
target=E2=80=99s commands with a category line also. This way, you can =
ensure that each=20
command is placed in the right category regardless of which of the =
dependencies=20
actually run. </P>
<P>Pre-installation and post-installation commands should not run any =
programs=20
except for these: </P>
<DIV class=3Dexample><PRE class=3Dexample>[ basename bash cat chgrp =
chmod chown cmp cp dd diff echo
egrep expand expr false fgrep find getopt grep gunzip gzip
hostname install install-info kill ldconfig ln ls md5sum
mkdir mkfifo mknod mv printenv pwd rm rmdir sed sort tee
test touch true uname xargs yes
</PRE></DIV><A name=3Dindex-binary-packages></A>
<P>The reason for distinguishing the commands in this way is for the =
sake of=20
making binary packages. Typically a binary package contains all the =
executables=20
and other files that need to be installed, and has its own method of =
installing=20
them=E2=80=94so it does not need to run the normal installation =
commands. But installing=20
the binary package does need to execute the pre-installation and=20
post-installation commands. </P>
<P>Programs to build binary packages work by extracting the =
pre-installation and=20
post-installation commands. Here is one way of extracting the =
pre-installation=20
commands (the <SAMP>-s</SAMP> option to <CODE>make</CODE> is needed to =
silence=20
messages about entering subdirectories): </P>
<DIV class=3Dsmallexample><PRE class=3Dsmallexample>make -s -n install =
-o all \
      PRE_INSTALL=3Dpre-install \
      POST_INSTALL=3Dpost-install \
      NORMAL_INSTALL=3Dnormal-install \
  | gawk -f pre-install.awk
</PRE></DIV>
<P>where the file <SAMP>pre-install.awk</SAMP> could contain this: </P>
<DIV class=3Dsmallexample><PRE class=3Dsmallexample>$0 ~ =
/^(normal-install|post-install)[ \t]*$/ {on =3D 0}
on {print $0}
$0 ~ /^pre-install[ \t]*$/ {on =3D 1}
</PRE></DIV>
<HR>
<A name=3DQuick-Reference></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Error-Messages"=
=20
rel=3Dnext>Error Messages</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Conven=
tions"=20
rel=3Dprev>Makefile Conventions</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Top" =
rel=3Dup>Top</A>=20
&nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DQuick-Reference-1></A>
<H2 class=3Dappendix>Appendix A Quick Reference</H2>
<P>This appendix summarizes the directives, text manipulation functions, =
and=20
special variables which GNU <CODE>make</CODE> understands. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
">Special=20
Targets</A>, <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
of Built-In Rules</A>, and <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Summary=20
of Options</A>, for other summaries. </P>
<P>Here is a summary of the directives GNU <CODE>make</CODE> recognizes: =
</P>
<DL compact>
  <DT><CODE>define <VAR>variable</VAR></CODE></DT>
  <DT><CODE>define <VAR>variable</VAR> =3D</CODE></DT>
  <DT><CODE>define <VAR>variable</VAR> :=3D</CODE></DT>
  <DT><CODE>define <VAR>variable</VAR> ::=3D</CODE></DT>
  <DT><CODE>define <VAR>variable</VAR> +=3D</CODE></DT>
  <DT><CODE>define <VAR>variable</VAR> ?=3D</CODE></DT>
  <DT><CODE>endef</CODE></DT>
  <DD>
  <P>Define multi-line variables.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Multi_002dLine"=
>Multi-Line</A>.=20
  </P></DD>
  <DT><CODE>undefine <VAR>variable</VAR></CODE></DT>
  <DD>
  <P>Undefining variables.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Undefine-Direct=
ive">Undefine=20
  Directive</A>. </P></DD>
  <DT><CODE>ifdef <VAR>variable</VAR></CODE></DT>
  <DT><CODE>ifndef <VAR>variable</VAR></CODE></DT>
  <DT><CODE>ifeq (<VAR>a</VAR>,<VAR>b</VAR>)</CODE></DT>
  <DT><CODE>ifeq "<VAR>a</VAR>" "<VAR>b</VAR>"</CODE></DT>
  <DT><CODE>ifeq '<VAR>a</VAR>' '<VAR>b</VAR>'</CODE></DT>
  <DT><CODE>ifneq (<VAR>a</VAR>,<VAR>b</VAR>)</CODE></DT>
  <DT><CODE>ifneq "<VAR>a</VAR>" "<VAR>b</VAR>"</CODE></DT>
  <DT><CODE>ifneq '<VAR>a</VAR>' '<VAR>b</VAR>'</CODE></DT>
  <DT><CODE>else</CODE></DT>
  <DT><CODE>endif</CODE></DT>
  <DD>
  <P>Conditionally evaluate part of the makefile.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditionals">C=
onditionals</A>.=20
  </P></DD>
  <DT><CODE>include <VAR>file</VAR></CODE></DT>
  <DT><CODE>-include <VAR>file</VAR></CODE></DT>
  <DT><CODE>sinclude <VAR>file</VAR></CODE></DT>
  <DD>
  <P>Include another makefile.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Include">Includ=
ing=20
  Other Makefiles</A>. </P></DD>
  <DT><CODE>override <VAR>variable-assignment</VAR></CODE></DT>
  <DD>
  <P>Define a variable, overriding any previous definition, even one =
from the=20
  command line.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Override-Direct=
ive">The=20
  <CODE>override</CODE> Directive</A>. </P></DD>
  <DT><CODE>export</CODE></DT>
  <DD>
  <P>Tell <CODE>make</CODE> to export all variables to child processes =
by=20
  default.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables_002fR=
ecursion">Communicating=20
  Variables to a Sub-<CODE>make</CODE></A>. </P></DD>
  <DT><CODE>export <VAR>variable</VAR></CODE></DT>
  <DT><CODE>export <VAR>variable-assignment</VAR></CODE></DT>
  <DT><CODE>unexport <VAR>variable</VAR></CODE></DT>
  <DD>
  <P>Tell <CODE>make</CODE> whether or not to export a particular =
variable to=20
  child processes.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables_002fR=
ecursion">Communicating=20
  Variables to a Sub-<CODE>make</CODE></A>. </P></DD>
  <DT><CODE>private <VAR>variable-assignment</VAR></CODE></DT>
  <DD>
  <P>Do not allow this variable assignment to be inherited by=20
  prerequisites.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Suppressing-Inh=
eritance">Suppressing=20
  Inheritance</A>. </P></DD>
  <DT><CODE>vpath <VAR>pattern</VAR> <VAR>path</VAR></CODE></DT>
  <DD>
  <P>Specify a search path for files matching a =
=E2=80=98<SAMP>%</SAMP>=E2=80=99 pattern.<BR>See=20
  <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Selective-Searc=
h">The=20
  <CODE>vpath</CODE> Directive</A>. </P></DD>
  <DT><CODE>vpath <VAR>pattern</VAR></CODE></DT>
  <DD>
  <P>Remove all search paths previously specified for =
<VAR>pattern</VAR>.=20
  </P></DD>
  <DT><CODE>vpath</CODE></DT>
  <DD>
  <P>Remove all search paths previously specified in any =
<CODE>vpath</CODE>=20
  directive. </P></DD></DL>
<P>Here is a summary of the built-in functions (see <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Functions">Func=
tions</A>):=20
</P>
<DL compact>
  <DT><CODE>$(subst =
<VAR>from</VAR>,<VAR>to</VAR>,<VAR>text</VAR>)</CODE></DT>
  <DD>
  <P>Replace <VAR>from</VAR> with <VAR>to</VAR> in =
<VAR>text</VAR>.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Functions=20
  for String Substitution and Analysis</A>. </P></DD>
  <DT><CODE>$(patsubst=20
  <VAR>pattern</VAR>,<VAR>replacement</VAR>,<VAR>text</VAR>)</CODE></DT>
  <DD>
  <P>Replace words matching <VAR>pattern</VAR> with =
<VAR>replacement</VAR> in=20
  <VAR>text</VAR>.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Functions=20
  for String Substitution and Analysis</A>. </P></DD>
  <DT><CODE>$(strip <VAR>string</VAR>)</CODE></DT>
  <DD>
  <P>Remove excess whitespace characters from <VAR>string</VAR>.<BR>See =
<A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Functions=20
  for String Substitution and Analysis</A>. </P></DD>
  <DT><CODE>$(findstring <VAR>find</VAR>,<VAR>text</VAR>)</CODE></DT>
  <DD>
  <P>Locate <VAR>find</VAR> in <VAR>text</VAR>.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Functions=20
  for String Substitution and Analysis</A>. </P></DD>
  <DT><CODE>$(filter =
<VAR>pattern</VAR>=E2=80=A6,<VAR>text</VAR>)</CODE></DT>
  <DD>
  <P>Select words in <VAR>text</VAR> that match one of the =
<VAR>pattern</VAR>=20
  words.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Functions=20
  for String Substitution and Analysis</A>. </P></DD>
  <DT><CODE>$(filter-out =
<VAR>pattern</VAR>=E2=80=A6,<VAR>text</VAR>)</CODE></DT>
  <DD>
  <P>Select words in <VAR>text</VAR> that <EM>do not</EM> match any of =
the=20
  <VAR>pattern</VAR> words.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Functions=20
  for String Substitution and Analysis</A>. </P></DD>
  <DT><CODE>$(sort <VAR>list</VAR>)</CODE></DT>
  <DD>
  <P>Sort the words in <VAR>list</VAR> lexicographically, removing=20
  duplicates.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Functions=20
  for String Substitution and Analysis</A>. </P></DD>
  <DT><CODE>$(word <VAR>n</VAR>,<VAR>text</VAR>)</CODE></DT>
  <DD>
  <P>Extract the <VAR>n</VAR>th word (one-origin) of =
<VAR>text</VAR>.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Functions=20
  for String Substitution and Analysis</A>. </P></DD>
  <DT><CODE>$(words <VAR>text</VAR>)</CODE></DT>
  <DD>
  <P>Count the number of words in <VAR>text</VAR>.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Functions=20
  for String Substitution and Analysis</A>. </P></DD>
  <DT><CODE>$(wordlist =
<VAR>s</VAR>,<VAR>e</VAR>,<VAR>text</VAR>)</CODE></DT>
  <DD>
  <P>Returns the list of words in <VAR>text</VAR> from <VAR>s</VAR> to=20
  <VAR>e</VAR>.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Functions=20
  for String Substitution and Analysis</A>. </P></DD>
  <DT><CODE>$(firstword <VAR>names</VAR>=E2=80=A6)</CODE></DT>
  <DD>
  <P>Extract the first word of <VAR>names</VAR>.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Functions=20
  for String Substitution and Analysis</A>. </P></DD>
  <DT><CODE>$(lastword <VAR>names</VAR>=E2=80=A6)</CODE></DT>
  <DD>
  <P>Extract the last word of <VAR>names</VAR>.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Functions=20
  for String Substitution and Analysis</A>. </P></DD>
  <DT><CODE>$(dir <VAR>names</VAR>=E2=80=A6)</CODE></DT>
  <DD>
  <P>Extract the directory part of each file name.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">Functions=20
  for File Names</A>. </P></DD>
  <DT><CODE>$(notdir <VAR>names</VAR>=E2=80=A6)</CODE></DT>
  <DD>
  <P>Extract the non-directory part of each file name.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">Functions=20
  for File Names</A>. </P></DD>
  <DT><CODE>$(suffix <VAR>names</VAR>=E2=80=A6)</CODE></DT>
  <DD>
  <P>Extract the suffix (the last =E2=80=98<SAMP>.</SAMP>=E2=80=99 and =
following characters) of=20
  each file name.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">Functions=20
  for File Names</A>. </P></DD>
  <DT><CODE>$(basename <VAR>names</VAR>=E2=80=A6)</CODE></DT>
  <DD>
  <P>Extract the base name (name without suffix) of each file =
name.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">Functions=20
  for File Names</A>. </P></DD>
  <DT><CODE>$(addsuffix =
<VAR>suffix</VAR>,<VAR>names</VAR>=E2=80=A6)</CODE></DT>
  <DD>
  <P>Append <VAR>suffix</VAR> to each word in <VAR>names</VAR>.<BR>See =
<A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">Functions=20
  for File Names</A>. </P></DD>
  <DT><CODE>$(addprefix =
<VAR>prefix</VAR>,<VAR>names</VAR>=E2=80=A6)</CODE></DT>
  <DD>
  <P>Prepend <VAR>prefix</VAR> to each word in <VAR>names</VAR>.<BR>See =
<A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">Functions=20
  for File Names</A>. </P></DD>
  <DT><CODE>$(join <VAR>list1</VAR>,<VAR>list2</VAR>)</CODE></DT>
  <DD>
  <P>Join two parallel lists of words.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">Functions=20
  for File Names</A>. </P></DD>
  <DT><CODE>$(wildcard <VAR>pattern</VAR>=E2=80=A6)</CODE></DT>
  <DD>
  <P>Find file names matching a shell file name pattern (<EM>not</EM> a=20
  =E2=80=98<SAMP>%</SAMP>=E2=80=99 pattern).<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcard-Functi=
on">The=20
  Function <CODE>wildcard</CODE></A>. </P></DD>
  <DT><CODE>$(realpath <VAR>names</VAR>=E2=80=A6)</CODE></DT>
  <DD>
  <P>For each file name in <VAR>names</VAR>, expand to an absolute name =
that=20
  does not contain any <CODE>.</CODE>, <CODE>..</CODE>, nor =
symlinks.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">Functions=20
  for File Names</A>. </P></DD>
  <DT><CODE>$(abspath <VAR>names</VAR>=E2=80=A6)</CODE></DT>
  <DD>
  <P>For each file name in <VAR>names</VAR>, expand to an absolute name =
that=20
  does not contain any <CODE>.</CODE> or <CODE>..</CODE> components, but =

  preserves symlinks.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">Functions=20
  for File Names</A>. </P></DD>
  <DT><CODE>$(error <VAR>text</VAR>=E2=80=A6)</CODE></DT>
  <DD>
  <P>When this function is evaluated, <CODE>make</CODE> generates a =
fatal error=20
  with the message <VAR>text</VAR>.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Make-Control-Fu=
nctions">Functions=20
  That Control Make</A>. </P></DD>
  <DT><CODE>$(warning <VAR>text</VAR>=E2=80=A6)</CODE></DT>
  <DD>
  <P>When this function is evaluated, <CODE>make</CODE> generates a =
warning with=20
  the message <VAR>text</VAR>.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Make-Control-Fu=
nctions">Functions=20
  That Control Make</A>. </P></DD>
  <DT><CODE>$(shell <VAR>command</VAR>)</CODE></DT>
  <DD>
  <P>Execute a shell command and return its output.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Shell-Function"=
>The=20
  <CODE>shell</CODE> Function</A>. </P></DD>
  <DT><CODE>$(origin <VAR>variable</VAR>)</CODE></DT>
  <DD>
  <P>Return a string describing how the <CODE>make</CODE> variable=20
  <VAR>variable</VAR> was defined.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Origin-Function=
">The=20
  <CODE>origin</CODE> Function</A>. </P></DD>
  <DT><CODE>$(flavor <VAR>variable</VAR>)</CODE></DT>
  <DD>
  <P>Return a string describing the flavor of the <CODE>make</CODE> =
variable=20
  <VAR>variable</VAR>.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavor-Function=
">The=20
  <CODE>flavor</CODE> Function</A>. </P></DD>
  <DT><CODE>$(foreach=20
  <VAR>var</VAR>,<VAR>words</VAR>,<VAR>text</VAR>)</CODE></DT>
  <DD>
  <P>Evaluate <VAR>text</VAR> with <VAR>var</VAR> bound to each word in=20
  <VAR>words</VAR>, and concatenate the results.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Foreach-Functio=
n">The=20
  <CODE>foreach</CODE> Function</A>. </P></DD>
  <DT><CODE>$(if=20
  =
<VAR>condition</VAR>,<VAR>then-part</VAR>[,<VAR>else-part</VAR>])</CODE><=
/DT>
  <DD>
  <P>Evaluate the condition <VAR>condition</VAR>; if it=E2=80=99s =
non-empty substitute=20
  the expansion of the <VAR>then-part</VAR> otherwise substitute the =
expansion=20
  of the <VAR>else-part</VAR>.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditional-Fun=
ctions">Functions=20
  for Conditionals</A>. </P></DD>
  <DT><CODE>$(or=20
  =
<VAR>condition1</VAR>[,<VAR>condition2</VAR>[,<VAR>condition3</VAR>=E2=80=
=A6]])</CODE></DT>
  <DD>
  <P>Evaluate each condition <VAR>conditionN</VAR> one at a time; =
substitute the=20
  first non-empty expansion. If all expansions are empty, substitute the =
empty=20
  string.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditional-Fun=
ctions">Functions=20
  for Conditionals</A>. </P></DD>
  <DT><CODE>$(and=20
  =
<VAR>condition1</VAR>[,<VAR>condition2</VAR>[,<VAR>condition3</VAR>=E2=80=
=A6]])</CODE></DT>
  <DD>
  <P>Evaluate each condition <VAR>conditionN</VAR> one at a time; if any =

  expansion results in the empty string substitute the empty string. If =
all=20
  expansions result in a non-empty string, substitute the expansion of =
the last=20
  <VAR>condition</VAR>.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditional-Fun=
ctions">Functions=20
  for Conditionals</A>. </P></DD>
  <DT><CODE>$(call =
<VAR>var</VAR>,<VAR>param</VAR>,=E2=80=A6)</CODE></DT>
  <DD>
  <P>Evaluate the variable <VAR>var</VAR> replacing any references to=20
  <CODE>$(1)</CODE>, <CODE>$(2)</CODE> with the first, second, etc.=20
  <VAR>param</VAR> values.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Call-Function">=
The=20
  <CODE>call</CODE> Function</A>. </P></DD>
  <DT><CODE>$(eval <VAR>text</VAR>)</CODE></DT>
  <DD>
  <P>Evaluate <VAR>text</VAR> then read the results as makefile =
commands.=20
  Expands to the empty string.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Eval-Function">=
The=20
  <CODE>eval</CODE> Function</A>. </P></DD>
  <DT><CODE>$(file <VAR>op</VAR>=20
<VAR>filename</VAR>,<VAR>text</VAR>)</CODE></DT>
  <DD>
  <P>Expand the arguments, then open the file <VAR>filename</VAR> using =
mode=20
  <VAR>op</VAR> and write <VAR>text</VAR> to that file.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Function">=
The=20
  <CODE>file</CODE> Function</A>. </P></DD>
  <DT><CODE>$(value <VAR>var</VAR>)</CODE></DT>
  <DD>
  <P>Evaluates to the contents of the variable <VAR>var</VAR>, with no =
expansion=20
  performed on it.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Value-Function"=
>The=20
  <CODE>value</CODE> Function</A>. </P></DD></DL>
<P>Here is a summary of the automatic variables. See <A=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
Variables</A>, for full information. </P>
<DL compact>
  <DT><CODE>$@</CODE></DT>
  <DD>
  <P>The file name of the target. </P></DD>
  <DT><CODE>$%</CODE></DT>
  <DD>
  <P>The target member name, when the target is an archive member. =
</P></DD>
  <DT><CODE>$&lt;</CODE></DT>
  <DD>
  <P>The name of the first prerequisite. </P></DD>
  <DT><CODE>$?</CODE></DT>
  <DD>
  <P>The names of all the prerequisites that are newer than the target, =
with=20
  spaces between them. For prerequisites which are archive members, only =
the=20
  named member is used (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archives">Archi=
ves</A>).=20
  </P></DD>
  <DT><CODE>$^</CODE></DT>
  <DT><CODE>$+</CODE></DT>
  <DD>
  <P>The names of all the prerequisites, with spaces between them. For=20
  prerequisites which are archive members, only the named member is used =
(see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archives">Archi=
ves</A>).=20
  The value of <CODE>$^</CODE> omits duplicate prerequisites, while=20
  <CODE>$+</CODE> retains them and preserves their order. </P></DD>
  <DT><CODE>$*</CODE></DT>
  <DD>
  <P>The stem with which an implicit rule matches (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Match">=
How=20
  Patterns Match</A>). </P></DD>
  <DT><CODE>$(@D)</CODE></DT>
  <DT><CODE>$(@F)</CODE></DT>
  <DD>
  <P>The directory part and the file-within-directory part of =
<CODE>$@</CODE>.=20
  </P></DD>
  <DT><CODE>$(*D)</CODE></DT>
  <DT><CODE>$(*F)</CODE></DT>
  <DD>
  <P>The directory part and the file-within-directory part of =
<CODE>$*</CODE>.=20
  </P></DD>
  <DT><CODE>$(%D)</CODE></DT>
  <DT><CODE>$(%F)</CODE></DT>
  <DD>
  <P>The directory part and the file-within-directory part of =
<CODE>$%</CODE>.=20
  </P></DD>
  <DT><CODE>$(&lt;D)</CODE></DT>
  <DT><CODE>$(&lt;F)</CODE></DT>
  <DD>
  <P>The directory part and the file-within-directory part of=20
  <CODE>$&lt;</CODE>. </P></DD>
  <DT><CODE>$(^D)</CODE></DT>
  <DT><CODE>$(^F)</CODE></DT>
  <DD>
  <P>The directory part and the file-within-directory part of =
<CODE>$^</CODE>.=20
  </P></DD>
  <DT><CODE>$(+D)</CODE></DT>
  <DT><CODE>$(+F)</CODE></DT>
  <DD>
  <P>The directory part and the file-within-directory part of =
<CODE>$+</CODE>.=20
  </P></DD>
  <DT><CODE>$(?D)</CODE></DT>
  <DT><CODE>$(?F)</CODE></DT>
  <DD>
  <P>The directory part and the file-within-directory part of =
<CODE>$?</CODE>.=20
  </P></DD></DL>
<P>These variables are used specially by GNU <CODE>make</CODE>: </P>
<DL compact>
  <DT><CODE>MAKEFILES</CODE></DT>
  <DD>
  <P>Makefiles to be read on every invocation of =
<CODE>make</CODE>.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#MAKEFILES-Varia=
ble">The=20
  Variable <CODE>MAKEFILES</CODE></A>. </P></DD>
  <DT><CODE>VPATH</CODE></DT>
  <DD>
  <P>Directory search path for files not found in the current =
directory.<BR>See=20
  <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#General-Search"=
><CODE>VPATH</CODE>=20
  Search Path for All Prerequisites</A>. </P></DD>
  <DT><CODE>SHELL</CODE></DT>
  <DD>
  <P>The name of the system default command interpreter, usually=20
  <SAMP>/bin/sh</SAMP>. You can set <CODE>SHELL</CODE> in the makefile =
to change=20
  the shell used to run recipes. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Execution">Reci=
pe=20
  Execution</A>. The <CODE>SHELL</CODE> variable is handled specially =
when=20
  importing from and exporting to the environment. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Choosing-the-Sh=
ell">Choosing=20
  the Shell</A>. </P></DD>
  <DT><CODE>MAKESHELL</CODE></DT>
  <DD>
  <P>On MS-DOS only, the name of the command interpreter that is to be =
used by=20
  <CODE>make</CODE>. This value takes precedence over the value of=20
  <CODE>SHELL</CODE>. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Execution">MAKE=
SHELL=20
  variable</A>. </P></DD>
  <DT><CODE>MAKE</CODE></DT>
  <DD>
  <P>The name with which <CODE>make</CODE> was invoked. Using this =
variable in=20
  recipes has special meaning. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#MAKE-Variable">=
How the=20
  <CODE>MAKE</CODE> Variable Works</A>. </P></DD>
  <DT><CODE>MAKE_VERSION</CODE></DT>
  <DD>
  <P>The built-in variable =E2=80=98<SAMP>MAKE_VERSION</SAMP>=E2=80=99 =
expands to the version=20
  number of the GNU <CODE>make</CODE> program. <A=20
  name=3Dindex-MAKE_005fVERSION></A></P></DD>
  <DT><CODE>MAKE_HOST</CODE></DT>
  <DD>
  <P>The built-in variable =E2=80=98<SAMP>MAKE_HOST</SAMP>=E2=80=99 =
expands to a string=20
  representing the host that GNU <CODE>make</CODE> was built to run on. =
<A=20
  name=3Dindex-MAKE_005fHOST></A></P></DD>
  <DT><CODE>MAKELEVEL</CODE></DT>
  <DD>
  <P>The number of levels of recursion (sub-<CODE>make</CODE>s).<BR>See =
<A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables_002fR=
ecursion">Variables/Recursion</A>.=20
  </P></DD>
  <DT><CODE>MAKEFLAGS</CODE></DT>
  <DD>
  <P>The flags given to <CODE>make</CODE>. You can set this in the =
environment=20
  or a makefile to set flags.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Communicating=20
  Options to a Sub-<CODE>make</CODE></A>. </P>
  <P>It is <EM>never</EM> appropriate to use <CODE>MAKEFLAGS</CODE> =
directly in=20
  a recipe line: its contents may not be quoted correctly for use in the =
shell.=20
  Always allow recursive <CODE>make</CODE>=E2=80=99s to obtain these =
values through the=20
  environment from its parent. </P></DD>
  <DT><CODE>GNUMAKEFLAGS</CODE></DT>
  <DD>
  <P>Other flags parsed by <CODE>make</CODE>. You can set this in the=20
  environment or a makefile to set <CODE>make</CODE> command-line flags. =
GNU=20
  <CODE>make</CODE> never sets this variable itself. This variable is =
only=20
  needed if you=E2=80=99d like to set GNU <CODE>make</CODE>-specific =
flags in a=20
  POSIX-compliant makefile. This variable will be seen by GNU =
<CODE>make</CODE>=20
  and ignored by other <CODE>make</CODE> implementations. It=E2=80=99s =
not needed if you=20
  only use GNU <CODE>make</CODE>; just use <CODE>MAKEFLAGS</CODE> =
directly. See=20
  <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Communicating=20
  Options to a Sub-<CODE>make</CODE></A>. </P></DD>
  <DT><CODE>MAKECMDGOALS</CODE></DT>
  <DD>
  <P>The targets given to <CODE>make</CODE> on the command line. Setting =
this=20
  variable has no effect on the operation of <CODE>make</CODE>.<BR>See =
<A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Goals">Argument=
s to=20
  Specify the Goals</A>. </P></DD>
  <DT><CODE>CURDIR</CODE></DT>
  <DD>
  <P>Set to the pathname of the current working directory (after all=20
  <CODE>-C</CODE> options are processed, if any). Setting this variable =
has no=20
  effect on the operation of <CODE>make</CODE>.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Recursion">Recu=
rsive=20
  Use of <CODE>make</CODE></A>. </P></DD>
  <DT><CODE>SUFFIXES</CODE></DT>
  <DD>
  <P>The default list of suffixes before <CODE>make</CODE> reads any =
makefiles.=20
  </P></DD>
  <DT><CODE>.LIBPATTERNS</CODE></DT>
  <DD>
  <P>Defines the naming of the libraries <CODE>make</CODE> searches for, =
and=20
  their order.<BR>See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Libraries_002fS=
earch">Directory=20
  Search for Link Libraries</A>. </P></DD></DL>
<HR>
<A name=3DError-Messages></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Complex-Makefil=
e"=20
rel=3Dnext>Complex Makefile</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Quick-Reference=
"=20
rel=3Dprev>Quick Reference</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Top" =
rel=3Dup>Top</A>=20
&nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DErrors-Generated-by-Make></A>
<H2 class=3Dappendix>Appendix B Errors Generated by Make</H2>
<P>Here is a list of the more common errors you might see generated by=20
<CODE>make</CODE>, and some information about what they mean and how to =
fix=20
them. </P>
<P>Sometimes <CODE>make</CODE> errors are not fatal, especially in the =
presence=20
of a <CODE>-</CODE> prefix on a recipe line, or the <CODE>-k</CODE> =
command line=20
option. Errors that are fatal are prefixed with the string =
<CODE>***</CODE>.=20
</P>
<P>Error messages are all either prefixed with the name of the program =
(usually=20
=E2=80=98<SAMP>make</SAMP>=E2=80=99), or, if the error is found in a =
makefile, the name of the=20
file and line number containing the problem. </P>
<P>In the table below, these common prefixes are left off. </P>
<DL compact>
  <DT>=E2=80=98<SAMP>[<VAR>foo</VAR>] Error =
<VAR>NN</VAR></SAMP>=E2=80=99</DT>
  <DT>=E2=80=98<SAMP>[<VAR>foo</VAR>] <VAR>signal =
description</VAR></SAMP>=E2=80=99</DT>
  <DD>
  <P>These errors are not really <CODE>make</CODE> errors at all. They =
mean that=20
  a program that <CODE>make</CODE> invoked as part of a recipe returned =
a non-0=20
  error code (=E2=80=98<SAMP>Error <VAR>NN</VAR></SAMP>=E2=80=99), which =
<CODE>make</CODE>=20
  interprets as failure, or it exited in some other abnormal fashion =
(with a=20
  signal of some type). See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Errors">Errors =
in=20
  Recipes</A>. </P>
  <P>If no <CODE>***</CODE> is attached to the message, then the =
sub-process=20
  failed but the rule in the makefile was prefixed with the =
<CODE>-</CODE>=20
  special character, so <CODE>make</CODE> ignored the error. </P></DD>
  <DT>=E2=80=98<SAMP>missing separator. Stop.</SAMP>=E2=80=99</DT>
  <DT>=E2=80=98<SAMP>missing separator (did you mean TAB instead of 8 =
spaces?).=20
  Stop.</SAMP>=E2=80=99</DT>
  <DD>
  <P>This means that <CODE>make</CODE> could not understand much of =
anything=20
  about the makefile line it just read. GNU <CODE>make</CODE> looks for =
various=20
  separators (<CODE>:</CODE>, <CODE>=3D</CODE>, recipe prefix =
characters, etc.) to=20
  indicate what kind of line it=E2=80=99s parsing. This message means it =
couldn=E2=80=99t find a=20
  valid one. </P>
  <P>One of the most common reasons for this message is that you (or =
perhaps=20
  your oh-so-helpful editor, as is the case with many MS-Windows =
editors) have=20
  attempted to indent your recipe lines with spaces instead of a tab =
character.=20
  In this case, <CODE>make</CODE> will use the second form of the error =
above.=20
  Remember that every line in the recipe must begin with a tab character =
(unless=20
  you set <CODE>.RECIPEPREFIX</CODE>; see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Variabl=
es">Special=20
  Variables</A>). Eight spaces do not count. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rule-Syntax">Ru=
le=20
  Syntax</A>. </P></DD>
  <DT>=E2=80=98<SAMP>recipe commences before first target. =
Stop.</SAMP>=E2=80=99</DT>
  <DT>=E2=80=98<SAMP>missing rule before recipe. =
Stop.</SAMP>=E2=80=99</DT>
  <DD>
  <P>This means the first thing in the makefile seems to be part of a =
recipe: it=20
  begins with a recipe prefix character and doesn=E2=80=99t appear to be =
a legal=20
  <CODE>make</CODE> directive (such as a variable assignment). Recipes =
must=20
  always be associated with a target. </P>
  <P>The second form is generated if the line has a semicolon as the =
first=20
  non-whitespace character; <CODE>make</CODE> interprets this to mean =
you left=20
  out the "target: prerequisite" section of a rule. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rule-Syntax">Ru=
le=20
  Syntax</A>. </P></DD>
  <DT>=E2=80=98<SAMP>No rule to make target =
`<VAR>xxx</VAR>'.</SAMP>=E2=80=99</DT>
  <DT>=E2=80=98<SAMP>No rule to make target `<VAR>xxx</VAR>', needed by=20
  `<VAR>yyy</VAR>'.</SAMP>=E2=80=99</DT>
  <DD>
  <P>This means that <CODE>make</CODE> decided it needed to build a =
target, but=20
  then couldn=E2=80=99t find any instructions in the makefile on how to =
do that, either=20
  explicit or implicit (including in the default rules database). </P>
  <P>If you want that file to be built, you will need to add a rule to =
your=20
  makefile describing how that target can be built. Other possible =
sources of=20
  this problem are typos in the makefile (if that file name is wrong) or =
a=20
  corrupted source tree (if that file is not supposed to be built, but =
rather=20
  only a prerequisite). </P></DD>
  <DT>=E2=80=98<SAMP>No targets specified and no makefile found. =
Stop.</SAMP>=E2=80=99</DT>
  <DT>=E2=80=98<SAMP>No targets. Stop.</SAMP>=E2=80=99</DT>
  <DD>
  <P>The former means that you didn=E2=80=99t provide any targets to be =
built on the=20
  command line, and <CODE>make</CODE> couldn=E2=80=99t find any =
makefiles to read in.=20
  The latter means that some makefile was found, but it didn=E2=80=99t =
contain any=20
  default goal and none was given on the command line. GNU =
<CODE>make</CODE> has=20
  nothing to do in these situations. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Argume=
nts">Arguments=20
  to Specify the Makefile</A>. </P></DD>
  <DT>=E2=80=98<SAMP>Makefile `<VAR>xxx</VAR>' was not =
found.</SAMP>=E2=80=99</DT>
  <DT>=E2=80=98<SAMP>Included makefile `<VAR>xxx</VAR>' was not =
found.</SAMP>=E2=80=99</DT>
  <DD>
  <P>A makefile specified on the command line (first form) or included =
(second=20
  form) was not found. </P></DD>
  <DT>=E2=80=98<SAMP>warning: overriding recipe for target =
`<VAR>xxx</VAR>'</SAMP>=E2=80=99</DT>
  <DT>=E2=80=98<SAMP>warning: ignoring old recipe for target=20
  `<VAR>xxx</VAR>'</SAMP>=E2=80=99</DT>
  <DD>
  <P>GNU <CODE>make</CODE> allows only one recipe to be specified per =
target=20
  (except for double-colon rules). If you give a recipe for a target =
which=20
  already has been defined to have one, this warning is issued and the =
second=20
  recipe will overwrite the first. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Multiple-Rules"=
>Multiple=20
  Rules for One Target</A>. </P></DD>
  <DT>=E2=80=98<SAMP>Circular <VAR>xxx</VAR> &lt;- <VAR>yyy</VAR> =
dependency=20
  dropped.</SAMP>=E2=80=99</DT>
  <DD>
  <P>This means that <CODE>make</CODE> detected a loop in the dependency =
graph:=20
  after tracing the prerequisite <VAR>yyy</VAR> of target =
<VAR>xxx</VAR>, and=20
  its prerequisites, etc., one of them depended on <VAR>xxx</VAR> again. =

  </P></DD>
  <DT>=E2=80=98<SAMP>Recursive variable `<VAR>xxx</VAR>' references =
itself (eventually).=20
  Stop.</SAMP>=E2=80=99</DT>
  <DD>
  <P>This means you=E2=80=99ve defined a normal (recursive) =
<CODE>make</CODE> variable=20
  <VAR>xxx</VAR> that, when it=E2=80=99s expanded, will refer to itself=20
  (<VAR>xxx</VAR>). This is not allowed; either use simply-expanded =
variables=20
  (=E2=80=98<SAMP>:=3D</SAMP>=E2=80=99 or =
=E2=80=98<SAMP>::=3D</SAMP>=E2=80=99) or use the append operator=20
  (=E2=80=98<SAMP>+=3D</SAMP>=E2=80=99). See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Using-Variables=
">How=20
  to Use Variables</A>. </P></DD>
  <DT>=E2=80=98<SAMP>Unterminated variable reference. =
Stop.</SAMP>=E2=80=99</DT>
  <DD>
  <P>This means you forgot to provide the proper closing parenthesis or =
brace in=20
  your variable or function reference. </P></DD>
  <DT>=E2=80=98<SAMP>insufficient arguments to function =
`<VAR>xxx</VAR>'.=20
  Stop.</SAMP>=E2=80=99</DT>
  <DD>
  <P>This means you haven=E2=80=99t provided the requisite number of =
arguments for this=20
  function. See the documentation of the function for a description of =
its=20
  arguments. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Functions">Func=
tions=20
  for Transforming Text</A>. </P></DD>
  <DT>=E2=80=98<SAMP>missing target pattern. Stop.</SAMP>=E2=80=99</DT>
  <DT>=E2=80=98<SAMP>multiple target patterns. =
Stop.</SAMP>=E2=80=99</DT>
  <DT>=E2=80=98<SAMP>target pattern contains no `%'. =
Stop.</SAMP>=E2=80=99</DT>
  <DT>=E2=80=98<SAMP>mixed implicit and static pattern rules. =
Stop.</SAMP>=E2=80=99</DT>
  <DD>
  <P>These are generated for malformed static pattern rules. The first =
means=20
  there=E2=80=99s no pattern in the target section of the rule; the =
second means there=20
  are multiple patterns in the target section; the third means the =
target=20
  doesn=E2=80=99t contain a pattern character (<CODE>%</CODE>); and the =
fourth means=20
  that all three parts of the static pattern rule contain pattern =
characters=20
  (<CODE>%</CODE>)=E2=80=93only the first two parts should. If you see =
these errors and=20
  you aren=E2=80=99t trying to create a static pattern rule, check the =
value of any=20
  variables in your target and prerequisite lists to be sure they do not =
contain=20
  colons. See <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-Usage">S=
yntax=20
  of Static Pattern Rules</A>. </P></DD>
  <DT>=E2=80=98<SAMP>warning: -jN forced in submake: disabling jobserver =

  mode.</SAMP>=E2=80=99</DT>
  <DD>
  <P>This warning and the next are generated if <CODE>make</CODE> =
detects error=20
  conditions related to parallel processing on systems where=20
  sub-<CODE>make</CODE>s can communicate (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Communicating=20
  Options to a Sub-<CODE>make</CODE></A>). This warning is generated if =
a=20
  recursive invocation of a <CODE>make</CODE> process is forced to have=20
  =E2=80=98<SAMP>-j<VAR>N</VAR></SAMP>=E2=80=99 in its argument list =
(where <VAR>N</VAR> is=20
  greater than one). This could happen, for example, if you set the=20
  <CODE>MAKE</CODE> environment variable to =E2=80=98<SAMP>make =
-j2</SAMP>=E2=80=99. In this=20
  case, the sub-<CODE>make</CODE> doesn=E2=80=99t communicate with other =

  <CODE>make</CODE> processes and will simply pretend it has two jobs of =
its=20
  own. </P></DD>
  <DT>=E2=80=98<SAMP>warning: jobserver unavailable: using -j1. Add `+' =
to parent make=20
  rule.</SAMP>=E2=80=99</DT>
  <DD>
  <P>In order for <CODE>make</CODE> processes to communicate, the parent =
will=20
  pass information to the child. Since this could result in problems if =
the=20
  child process isn=E2=80=99t actually a <CODE>make</CODE>, the parent =
will only do this=20
  if it thinks the child is a <CODE>make</CODE>. The parent uses the =
normal=20
  algorithms to determine this (see <A=20
  =
href=3D"http://www.gnu.org/software/make/manual/make.html#MAKE-Variable">=
How the=20
  <CODE>MAKE</CODE> Variable Works</A>). If the makefile is constructed =
such=20
  that the parent doesn=E2=80=99t know the child is a <CODE>make</CODE> =
process, then=20
  the child will receive only part of the information necessary. In this =
case,=20
  the child will generate this warning message and proceed with its =
build in a=20
  sequential manner. </P></DD></DL>
<HR>
<A name=3DComplex-Makefile></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#GNU-Free-Docume=
ntation-License"=20
rel=3Dnext>GNU Free Documentation License</A>, Previous: <A =
accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Error-Messages"=
=20
rel=3Dprev>Error Messages</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Top" =
rel=3Dup>Top</A>=20
&nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DComplex-Makefile-Example></A>
<H2 class=3Dappendix>Appendix C Complex Makefile Example</H2>
<P>Here is the makefile for the GNU <CODE>tar</CODE> program. This is a=20
moderately complex makefile. The first line uses a <CODE>#!</CODE> =
setting to=20
allow the makefile to be executed directly. </P>
<P>Because it is the first target, the default goal is =
=E2=80=98<SAMP>all</SAMP>=E2=80=99. An=20
interesting feature of this makefile is that <SAMP>testpad.h</SAMP> is a =
source=20
file automatically created by the <CODE>testpad</CODE> program, itself =
compiled=20
from <SAMP>testpad.c</SAMP>. </P>
<P>If you type =E2=80=98<SAMP>make</SAMP>=E2=80=99 or =
=E2=80=98<SAMP>make all</SAMP>=E2=80=99, then=20
<CODE>make</CODE> creates the <SAMP>tar</SAMP> executable, the =
<SAMP>rmt</SAMP>=20
daemon that provides remote tape access, and the <SAMP>tar.info</SAMP> =
Info=20
file. </P>
<P>If you type =E2=80=98<SAMP>make install</SAMP>=E2=80=99, then =
<CODE>make</CODE> not only=20
creates <SAMP>tar</SAMP>, <SAMP>rmt</SAMP>, and <SAMP>tar.info</SAMP>, =
but also=20
installs them. </P>
<P>If you type =E2=80=98<SAMP>make clean</SAMP>=E2=80=99, then =
<CODE>make</CODE> removes the=20
=E2=80=98<SAMP>.o</SAMP>=E2=80=99 files, and the <SAMP>tar</SAMP>, =
<SAMP>rmt</SAMP>,=20
<SAMP>testpad</SAMP>, <SAMP>testpad.h</SAMP>, and <SAMP>core</SAMP> =
files. </P>
<P>If you type =E2=80=98<SAMP>make distclean</SAMP>=E2=80=99, then =
<CODE>make</CODE> not only=20
removes the same files as does =E2=80=98<SAMP>make clean</SAMP>=E2=80=99 =
but also the=20
<SAMP>TAGS</SAMP>, <SAMP>Makefile</SAMP>, and <SAMP>config.status</SAMP> =
files.=20
(Although it is not evident, this makefile (and =
<SAMP>config.status</SAMP>) is=20
generated by the user with the <CODE>configure</CODE> program, which is =
provided=20
in the <CODE>tar</CODE> distribution, but is not shown here.) </P>
<P>If you type =E2=80=98<SAMP>make realclean</SAMP>=E2=80=99, then =
<CODE>make</CODE> removes the=20
same files as does =E2=80=98<SAMP>make distclean</SAMP>=E2=80=99 and =
also removes the Info files=20
generated from <SAMP>tar.texinfo</SAMP>. </P>
<P>In addition, there are targets <CODE>shar</CODE> and =
<CODE>dist</CODE> that=20
create distribution kits. </P>
<DIV class=3Dexample><PRE class=3Dexample>#!/usr/bin/make -f
# Generated automatically from Makefile.in by configure.
# Un*x Makefile for GNU tar program.
# Copyright (C) 1991 Free Software Foundation, Inc.
</PRE><PRE class=3Dexample></PRE><PRE class=3Dexample># This program is =
free software; you can redistribute
# it and/or modify it under the terms of the GNU
# General Public License =E2=80=A6
=E2=80=A6
=E2=80=A6
</PRE><PRE class=3Dexample>SHELL =3D /bin/sh

#### Start of system configuration section. ####

srcdir =3D .

</PRE><PRE class=3Dexample># If you use gcc, you should either run the
# fixincludes script that comes with it or else use
# gcc with the -traditional option.  Otherwise ioctl
# calls will be compiled incorrectly on some systems.
CC =3D gcc -O
YACC =3D bison -y
INSTALL =3D /usr/local/bin/install -c
INSTALLDATA =3D /usr/local/bin/install -c -m 644
</PRE><PRE class=3Dexample># Things you might add to DEFS:
# -DSTDC_HEADERS        If you have ANSI C headers and
#                       libraries.
# -DPOSIX               If you have POSIX.1 headers and
#                       libraries.
# -DBSD42               If you have sys/dir.h (unless
#                       you use -DPOSIX), sys/file.h,
#                       and st_blocks in `struct stat'.
# -DUSG                 If you have System V/ANSI C
#                       string and memory functions
#                       and headers, sys/sysmacros.h,
#                       fcntl.h, getcwd, no valloc,
#                       and ndir.h (unless
#                       you use -DDIRENT).
# -DNO_MEMORY_H         If USG or STDC_HEADERS but do not
#                       include memory.h.
# -DDIRENT              If USG and you have dirent.h
#                       instead of ndir.h.
# -DSIGTYPE=3Dint         If your signal handlers
#                       return int, not void.
# -DNO_MTIO             If you lack sys/mtio.h
#                       (magtape ioctls).
# -DNO_REMOTE           If you do not have a remote shell
#                       or rexec.
# -DUSE_REXEC           To use rexec for remote tape
#                       operations instead of
#                       forking rsh or remsh.
# -DVPRINTF_MISSING     If you lack vprintf function
#                       (but have _doprnt).
# -DDOPRNT_MISSING      If you lack _doprnt function.
#                       Also need to define
#                       -DVPRINTF_MISSING.
# -DFTIME_MISSING       If you lack ftime system call.
# -DSTRSTR_MISSING      If you lack strstr function.
# -DVALLOC_MISSING      If you lack valloc function.
# -DMKDIR_MISSING       If you lack mkdir and
#                       rmdir system calls.
# -DRENAME_MISSING      If you lack rename system call.
# -DFTRUNCATE_MISSING   If you lack ftruncate
#                       system call.
# -DV7                  On Version 7 Unix (not
#                       tested in a long time).
# -DEMUL_OPEN3          If you lack a 3-argument version
#                       of open, and want to emulate it
#                       with system calls you do have.
# -DNO_OPEN3            If you lack the 3-argument open
#                       and want to disable the tar -k
#                       option instead of emulating open.
# -DXENIX               If you have sys/inode.h
#                       and need it 94 to be included.

DEFS =3D  -DSIGTYPE=3Dint -DDIRENT -DSTRSTR_MISSING \
        -DVPRINTF_MISSING -DBSD42
# Set this to rtapelib.o unless you defined NO_REMOTE,
# in which case make it empty.
RTAPELIB =3D rtapelib.o
LIBS =3D
DEF_AR_FILE =3D /dev/rmt8
DEFBLOCKING =3D 20

</PRE><PRE class=3Dexample>CDEBUG =3D -g
CFLAGS =3D $(CDEBUG) -I. -I$(srcdir) $(DEFS) \
        -DDEF_AR_FILE=3D\"$(DEF_AR_FILE)\" \
        -DDEFBLOCKING=3D$(DEFBLOCKING)
LDFLAGS =3D -g
</PRE><PRE class=3Dexample></PRE><PRE class=3Dexample>prefix =3D =
/usr/local
# Prefix for each installed program,
# normally empty or `g'.
binprefix =3D

# The directory to install tar in.
bindir =3D $(prefix)/bin

# The directory to install the info files in.
infodir =3D $(prefix)/info
</PRE><PRE class=3Dexample>#### End of system configuration section. =
####

</PRE><PRE class=3Dexample>SRCS_C  =3D tar.c create.c extract.c buffer.c =
  \
          getoldopt.c update.c gnu.c mangle.c \
          version.c list.c names.c diffarch.c \
          port.c wildmat.c getopt.c getopt1.c \
          regex.c
SRCS_Y  =3D getdate.y
SRCS    =3D $(SRCS_C) $(SRCS_Y)
OBJS    =3D $(SRCS_C:.c=3D.o) $(SRCS_Y:.y=3D.o) $(RTAPELIB)
</PRE><PRE class=3Dexample>AUX =3D   README COPYING ChangeLog =
Makefile.in  \
        makefile.pc configure configure.in \
        tar.texinfo tar.info* texinfo.tex \
        tar.h port.h open3.h getopt.h regex.h \
        rmt.h rmt.c rtapelib.c alloca.c \
        msd_dir.h msd_dir.c tcexparg.c \
        level-0 level-1 backup-specs testpad.c
</PRE><PRE class=3Dexample>.PHONY: all
all:    tar rmt tar.info

</PRE><PRE class=3Dexample>tar:    $(OBJS)
        $(CC) $(LDFLAGS) -o $@ $(OBJS) $(LIBS)
</PRE><PRE class=3Dexample></PRE><PRE class=3Dexample>rmt:    rmt.c
        $(CC) $(CFLAGS) $(LDFLAGS) -o $@ rmt.c
</PRE><PRE class=3Dexample></PRE><PRE class=3Dexample>tar.info: =
tar.texinfo
        makeinfo tar.texinfo
</PRE><PRE class=3Dexample></PRE><PRE class=3Dexample>.PHONY: install
install: all
        $(INSTALL) tar $(bindir)/$(binprefix)tar
        -test ! -f rmt || $(INSTALL) rmt /etc/rmt
        $(INSTALLDATA) $(srcdir)/tar.info* $(infodir)
</PRE><PRE class=3Dexample></PRE><PRE class=3Dexample>$(OBJS): tar.h =
port.h testpad.h
regex.o buffer.o tar.o: regex.h
# getdate.y has 8 shift/reduce conflicts.
</PRE><PRE class=3Dexample></PRE><PRE class=3Dexample>testpad.h: testpad
        ./testpad
</PRE><PRE class=3Dexample></PRE><PRE class=3Dexample>testpad: testpad.o
        $(CC) -o $@ testpad.o
</PRE><PRE class=3Dexample></PRE><PRE class=3Dexample>TAGS:   $(SRCS)
        etags $(SRCS)
</PRE><PRE class=3Dexample></PRE><PRE class=3Dexample>.PHONY: clean
clean:
        rm -f *.o tar rmt testpad testpad.h core
</PRE><PRE class=3Dexample></PRE><PRE class=3Dexample>.PHONY: distclean
distclean: clean
        rm -f TAGS Makefile config.status
</PRE><PRE class=3Dexample></PRE><PRE class=3Dexample>.PHONY: realclean
realclean: distclean
        rm -f tar.info*
</PRE><PRE class=3Dexample></PRE><PRE class=3Dexample>.PHONY: shar
shar: $(SRCS) $(AUX)
        shar $(SRCS) $(AUX) | compress \
          &gt; tar-`sed -e '/version_string/!d' \
                     -e 's/[^0-9.]*\([0-9.]*\).*/\1/' \
                     -e q
                     version.c`.shar.Z
</PRE><PRE class=3Dexample></PRE><PRE class=3Dexample>.PHONY: dist
dist: $(SRCS) $(AUX)
        echo tar-`sed \
             -e '/version_string/!d' \
             -e 's/[^0-9.]*\([0-9.]*\).*/\1/' \
             -e q
             version.c` &gt; .fname
        -rm -rf `cat .fname`
        mkdir `cat .fname`
        ln $(SRCS) $(AUX) `cat .fname`
        tar chZf `cat .fname`.tar.Z `cat .fname`
        -rm -rf `cat .fname` .fname
</PRE><PRE class=3Dexample></PRE><PRE class=3Dexample>tar.zoo: $(SRCS) =
$(AUX)
        -rm -rf tmp.dir
        -mkdir tmp.dir
        -rm tar.zoo
        for X in $(SRCS) $(AUX) ; do \
            echo $$X ; \
            sed 's/$$/^M/' $$X \
            &gt; tmp.dir/$$X ; done
        cd tmp.dir ; zoo aM ../tar.zoo *
        -rm -rf tmp.dir
</PRE></DIV>
<HR>
<A name=3DGNU-Free-Documentation-License></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dnext>Concept Index</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Complex-Makefil=
e"=20
rel=3Dprev>Complex Makefile</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Top" =
rel=3Dup>Top</A>=20
&nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A =
name=3DGNU-Free-Documentation-License-1></A>
<H3 class=3Dappendixsec>C.1 GNU Free Documentation License</H3><A=20
name=3Dindex-FDL_002c-GNU-Free-Documentation-License></A>
<DIV align=3Dcenter>Version 1.3, 3 November 2008 </DIV>
<DIV class=3Ddisplay><PRE class=3Ddisplay>Copyright =C2=A9 2000, 2001, =
2002, 2007, 2008 Free Software Foundation, Inc.
<A href=3D"http://fsf.org/">http://fsf.org/</A>

Everyone is permitted to copy and distribute verbatim copies
of this license document, but changing it is not allowed.
</PRE></DIV>
<OL>
  <LI>PREAMBLE=20
  <P>The purpose of this License is to make a manual, textbook, or other =

  functional and useful document <EM>free</EM> in the sense of freedom: =
to=20
  assure everyone the effective freedom to copy and redistribute it, =
with or=20
  without modifying it, either commercially or noncommercially. =
Secondarily,=20
  this License preserves for the author and publisher a way to get =
credit for=20
  their work, while not being considered responsible for modifications =
made by=20
  others. </P>
  <P>This License is a kind of =E2=80=9Ccopyleft=E2=80=9D, which means =
that derivative works of=20
  the document must themselves be free in the same sense. It complements =
the GNU=20
  General Public License, which is a copyleft license designed for free=20
  software. </P>
  <P>We have designed this License in order to use it for manuals for =
free=20
  software, because free software needs free documentation: a free =
program=20
  should come with manuals providing the same freedoms that the software =
does.=20
  But this License is not limited to software manuals; it can be used =
for any=20
  textual work, regardless of subject matter or whether it is published =
as a=20
  printed book. We recommend this License principally for works whose =
purpose is=20
  instruction or reference. </P></LI>
  <LI>APPLICABILITY AND DEFINITIONS=20
  <P>This License applies to any manual or other work, in any medium, =
that=20
  contains a notice placed by the copyright holder saying it can be =
distributed=20
  under the terms of this License. Such a notice grants a world-wide,=20
  royalty-free license, unlimited in duration, to use that work under =
the=20
  conditions stated herein. The =E2=80=9CDocument=E2=80=9D, below, =
refers to any such manual or=20
  work. Any member of the public is a licensee, and is addressed as =
=E2=80=9Cyou=E2=80=9D. You=20
  accept the license if you copy, modify or distribute the work in a way =

  requiring permission under copyright law. </P>
  <P>A =E2=80=9CModified Version=E2=80=9D of the Document means any work =
containing the Document=20
  or a portion of it, either copied verbatim, or with modifications =
and/or=20
  translated into another language. </P>
  <P>A =E2=80=9CSecondary Section=E2=80=9D is a named appendix or a =
front-matter section of the=20
  Document that deals exclusively with the relationship of the =
publishers or=20
  authors of the Document to the Document=E2=80=99s overall subject (or =
to related=20
  matters) and contains nothing that could fall directly within that =
overall=20
  subject. (Thus, if the Document is in part a textbook of mathematics, =
a=20
  Secondary Section may not explain any mathematics.) The relationship =
could be=20
  a matter of historical connection with the subject or with related =
matters, or=20
  of legal, commercial, philosophical, ethical or political position =
regarding=20
  them. </P>
  <P>The =E2=80=9CInvariant Sections=E2=80=9D are certain Secondary =
Sections whose titles are=20
  designated, as being those of Invariant Sections, in the notice that =
says that=20
  the Document is released under this License. If a section does not fit =
the=20
  above definition of Secondary then it is not allowed to be designated =
as=20
  Invariant. The Document may contain zero Invariant Sections. If the =
Document=20
  does not identify any Invariant Sections then there are none. </P>
  <P>The =E2=80=9CCover Texts=E2=80=9D are certain short passages of =
text that are listed, as=20
  Front-Cover Texts or Back-Cover Texts, in the notice that says that =
the=20
  Document is released under this License. A Front-Cover Text may be at =
most 5=20
  words, and a Back-Cover Text may be at most 25 words. </P>
  <P>A =E2=80=9CTransparent=E2=80=9D copy of the Document means a =
machine-readable copy,=20
  represented in a format whose specification is available to the =
general=20
  public, that is suitable for revising the document straightforwardly =
with=20
  generic text editors or (for images composed of pixels) generic paint =
programs=20
  or (for drawings) some widely available drawing editor, and that is =
suitable=20
  for input to text formatters or for automatic translation to a variety =
of=20
  formats suitable for input to text formatters. A copy made in an =
otherwise=20
  Transparent file format whose markup, or absence of markup, has been =
arranged=20
  to thwart or discourage subsequent modification by readers is not =
Transparent.=20
  An image format is not Transparent if used for any substantial amount =
of text.=20
  A copy that is not =E2=80=9CTransparent=E2=80=9D is called =
=E2=80=9COpaque=E2=80=9D. </P>
  <P>Examples of suitable formats for Transparent copies include plain =
ASCII=20
  without markup, Texinfo input format, LaTeX input format, SGML or XML =
using a=20
  publicly available DTD, and standard-conforming simple HTML, =
PostScript or PDF=20
  designed for human modification. Examples of transparent image formats =
include=20
  PNG, XCF and JPG. Opaque formats include proprietary formats that can =
be read=20
  and edited only by proprietary word processors, SGML or XML for which =
the DTD=20
  and/or processing tools are not generally available, and the =
machine-generated=20
  HTML, PostScript or PDF produced by some word processors for output =
purposes=20
  only. </P>
  <P>The =E2=80=9CTitle Page=E2=80=9D means, for a printed book, the =
title page itself, plus=20
  such following pages as are needed to hold, legibly, the material this =
License=20
  requires to appear in the title page. For works in formats which do =
not have=20
  any title page as such, =E2=80=9CTitle Page=E2=80=9D means the text =
near the most prominent=20
  appearance of the work=E2=80=99s title, preceding the beginning of the =
body of the=20
  text. </P>
  <P>The =E2=80=9Cpublisher=E2=80=9D means any person or entity that =
distributes copies of the=20
  Document to the public. </P>
  <P>A section =E2=80=9CEntitled XYZ=E2=80=9D means a named subunit of =
the Document whose title=20
  either is precisely XYZ or contains XYZ in parentheses following text =
that=20
  translates XYZ in another language. (Here XYZ stands for a specific =
section=20
  name mentioned below, such as =E2=80=9CAcknowledgements=E2=80=9D, =
=E2=80=9CDedications=E2=80=9D,=20
  =E2=80=9CEndorsements=E2=80=9D, or =E2=80=9CHistory=E2=80=9D.) To =
=E2=80=9CPreserve the Title=E2=80=9D of such a section when=20
  you modify the Document means that it remains a section =
=E2=80=9CEntitled XYZ=E2=80=9D=20
  according to this definition. </P>
  <P>The Document may include Warranty Disclaimers next to the notice =
which=20
  states that this License applies to the Document. These Warranty =
Disclaimers=20
  are considered to be included by reference in this License, but only =
as=20
  regards disclaiming warranties: any other implication that these =
Warranty=20
  Disclaimers may have is void and has no effect on the meaning of this =
License.=20
  </P></LI>
  <LI>VERBATIM COPYING=20
  <P>You may copy and distribute the Document in any medium, either =
commercially=20
  or noncommercially, provided that this License, the copyright notices, =
and the=20
  license notice saying this License applies to the Document are =
reproduced in=20
  all copies, and that you add no other conditions whatsoever to those =
of this=20
  License. You may not use technical measures to obstruct or control the =
reading=20
  or further copying of the copies you make or distribute. However, you =
may=20
  accept compensation in exchange for copies. If you distribute a large =
enough=20
  number of copies you must also follow the conditions in section 3. =
</P>
  <P>You may also lend copies, under the same conditions stated above, =
and you=20
  may publicly display copies. </P></LI>
  <LI>COPYING IN QUANTITY=20
  <P>If you publish printed copies (or copies in media that commonly =
have=20
  printed covers) of the Document, numbering more than 100, and the =
Document=E2=80=99s=20
  license notice requires Cover Texts, you must enclose the copies in =
covers=20
  that carry, clearly and legibly, all these Cover Texts: Front-Cover =
Texts on=20
  the front cover, and Back-Cover Texts on the back cover. Both covers =
must also=20
  clearly and legibly identify you as the publisher of these copies. The =
front=20
  cover must present the full title with all words of the title equally=20
  prominent and visible. You may add other material on the covers in =
addition.=20
  Copying with changes limited to the covers, as long as they preserve =
the title=20
  of the Document and satisfy these conditions, can be treated as =
verbatim=20
  copying in other respects. </P>
  <P>If the required texts for either cover are too voluminous to fit =
legibly,=20
  you should put the first ones listed (as many as fit reasonably) on =
the actual=20
  cover, and continue the rest onto adjacent pages. </P>
  <P>If you publish or distribute Opaque copies of the Document =
numbering more=20
  than 100, you must either include a machine-readable Transparent copy =
along=20
  with each Opaque copy, or state in or with each Opaque copy a =
computer-network=20
  location from which the general network-using public has access to =
download=20
  using public-standard network protocols a complete Transparent copy of =
the=20
  Document, free of added material. If you use the latter option, you =
must take=20
  reasonably prudent steps, when you begin distribution of Opaque copies =
in=20
  quantity, to ensure that this Transparent copy will remain thus =
accessible at=20
  the stated location until at least one year after the last time you =
distribute=20
  an Opaque copy (directly or through your agents or retailers) of that =
edition=20
  to the public. </P>
  <P>It is requested, but not required, that you contact the authors of =
the=20
  Document well before redistributing any large number of copies, to =
give them a=20
  chance to provide you with an updated version of the Document. =
</P></LI>
  <LI>MODIFICATIONS=20
  <P>You may copy and distribute a Modified Version of the Document =
under the=20
  conditions of sections 2 and 3 above, provided that you release the =
Modified=20
  Version under precisely this License, with the Modified Version =
filling the=20
  role of the Document, thus licensing distribution and modification of =
the=20
  Modified Version to whoever possesses a copy of it. In addition, you =
must do=20
  these things in the Modified Version: </P>
  <OL>
    <LI>Use in the Title Page (and on the covers, if any) a title =
distinct from=20
    that of the Document, and from those of previous versions (which =
should, if=20
    there were any, be listed in the History section of the Document). =
You may=20
    use the same title as a previous version if the original publisher =
of that=20
    version gives permission. </LI>
    <LI>List on the Title Page, as authors, one or more persons or =
entities=20
    responsible for authorship of the modifications in the Modified =
Version,=20
    together with at least five of the principal authors of the Document =
(all of=20
    its principal authors, if it has fewer than five), unless they =
release you=20
    from this requirement. </LI>
    <LI>State on the Title page the name of the publisher of the =
Modified=20
    Version, as the publisher. </LI>
    <LI>Preserve all the copyright notices of the Document. </LI>
    <LI>Add an appropriate copyright notice for your modifications =
adjacent to=20
    the other copyright notices. </LI>
    <LI>Include, immediately after the copyright notices, a license =
notice=20
    giving the public permission to use the Modified Version under the =
terms of=20
    this License, in the form shown in the Addendum below. </LI>
    <LI>Preserve in that license notice the full lists of Invariant =
Sections and=20
    required Cover Texts given in the Document=E2=80=99s license notice. =
</LI>
    <LI>Include an unaltered copy of this License. </LI>
    <LI>Preserve the section Entitled =E2=80=9CHistory=E2=80=9D, =
Preserve its Title, and add to=20
    it an item stating at least the title, year, new authors, and =
publisher of=20
    the Modified Version as given on the Title Page. If there is no =
section=20
    Entitled =E2=80=9CHistory=E2=80=9D in the Document, create one =
stating the title, year,=20
    authors, and publisher of the Document as given on its Title Page, =
then add=20
    an item describing the Modified Version as stated in the previous =
sentence.=20
    </LI>
    <LI>Preserve the network location, if any, given in the Document for =
public=20
    access to a Transparent copy of the Document, and likewise the =
network=20
    locations given in the Document for previous versions it was based =
on. These=20
    may be placed in the =E2=80=9CHistory=E2=80=9D section. You may omit =
a network location for=20
    a work that was published at least four years before the Document =
itself, or=20
    if the original publisher of the version it refers to gives =
permission.=20
</LI>
    <LI>For any section Entitled =E2=80=9CAcknowledgements=E2=80=9D or =
=E2=80=9CDedications=E2=80=9D, Preserve=20
    the Title of the section, and preserve in the section all the =
substance and=20
    tone of each of the contributor acknowledgements and/or dedications =
given=20
    therein. </LI>
    <LI>Preserve all the Invariant Sections of the Document, unaltered =
in their=20
    text and in their titles. Section numbers or the equivalent are not=20
    considered part of the section titles. </LI>
    <LI>Delete any section Entitled =E2=80=9CEndorsements=E2=80=9D. Such =
a section may not be=20
    included in the Modified Version. </LI>
    <LI>Do not retitle any existing section to be Entitled =
=E2=80=9CEndorsements=E2=80=9D or to=20
    conflict in title with any Invariant Section. </LI>
    <LI>Preserve any Warranty Disclaimers. </LI></OL>
  <P>If the Modified Version includes new front-matter sections or =
appendices=20
  that qualify as Secondary Sections and contain no material copied from =
the=20
  Document, you may at your option designate some or all of these =
sections as=20
  invariant. To do this, add their titles to the list of Invariant =
Sections in=20
  the Modified Version=E2=80=99s license notice. These titles must be =
distinct from any=20
  other section titles. </P>
  <P>You may add a section Entitled =E2=80=9CEndorsements=E2=80=9D, =
provided it contains nothing=20
  but endorsements of your Modified Version by various =
parties=E2=80=94for example,=20
  statements of peer review or that the text has been approved by an=20
  organization as the authoritative definition of a standard. </P>
  <P>You may add a passage of up to five words as a Front-Cover Text, =
and a=20
  passage of up to 25 words as a Back-Cover Text, to the end of the list =
of=20
  Cover Texts in the Modified Version. Only one passage of Front-Cover =
Text and=20
  one of Back-Cover Text may be added by (or through arrangements made =
by) any=20
  one entity. If the Document already includes a cover text for the same =
cover,=20
  previously added by you or by arrangement made by the same entity you =
are=20
  acting on behalf of, you may not add another; but you may replace the =
old one,=20
  on explicit permission from the previous publisher that added the old =
one.=20
</P>
  <P>The author(s) and publisher(s) of the Document do not by this =
License give=20
  permission to use their names for publicity for or to assert or imply=20
  endorsement of any Modified Version. </P></LI>
  <LI>COMBINING DOCUMENTS=20
  <P>You may combine the Document with other documents released under =
this=20
  License, under the terms defined in section 4 above for modified =
versions,=20
  provided that you include in the combination all of the Invariant =
Sections of=20
  all of the original documents, unmodified, and list them all as =
Invariant=20
  Sections of your combined work in its license notice, and that you =
preserve=20
  all their Warranty Disclaimers. </P>
  <P>The combined work need only contain one copy of this License, and =
multiple=20
  identical Invariant Sections may be replaced with a single copy. If =
there are=20
  multiple Invariant Sections with the same name but different contents, =
make=20
  the title of each such section unique by adding at the end of it, in=20
  parentheses, the name of the original author or publisher of that =
section if=20
  known, or else a unique number. Make the same adjustment to the =
section titles=20
  in the list of Invariant Sections in the license notice of the =
combined work.=20
  </P>
  <P>In the combination, you must combine any sections Entitled =
=E2=80=9CHistory=E2=80=9D in the=20
  various original documents, forming one section Entitled =
=E2=80=9CHistory=E2=80=9D; likewise=20
  combine any sections Entitled =E2=80=9CAcknowledgements=E2=80=9D, and =
any sections Entitled=20
  =E2=80=9CDedications=E2=80=9D. You must delete all sections Entitled =
=E2=80=9CEndorsements.=E2=80=9D </P></LI>
  <LI>COLLECTIONS OF DOCUMENTS=20
  <P>You may make a collection consisting of the Document and other =
documents=20
  released under this License, and replace the individual copies of this =
License=20
  in the various documents with a single copy that is included in the=20
  collection, provided that you follow the rules of this License for =
verbatim=20
  copying of each of the documents in all other respects. </P>
  <P>You may extract a single document from such a collection, and =
distribute it=20
  individually under this License, provided you insert a copy of this =
License=20
  into the extracted document, and follow this License in all other =
respects=20
  regarding verbatim copying of that document. </P></LI>
  <LI>AGGREGATION WITH INDEPENDENT WORKS=20
  <P>A compilation of the Document or its derivatives with other =
separate and=20
  independent documents or works, in or on a volume of a storage or =
distribution=20
  medium, is called an =E2=80=9Caggregate=E2=80=9D if the copyright =
resulting from the=20
  compilation is not used to limit the legal rights of the =
compilation=E2=80=99s users=20
  beyond what the individual works permit. When the Document is included =
in an=20
  aggregate, this License does not apply to the other works in the =
aggregate=20
  which are not themselves derivative works of the Document. </P>
  <P>If the Cover Text requirement of section 3 is applicable to these =
copies of=20
  the Document, then if the Document is less than one half of the entire =

  aggregate, the Document=E2=80=99s Cover Texts may be placed on covers =
that bracket the=20
  Document within the aggregate, or the electronic equivalent of covers =
if the=20
  Document is in electronic form. Otherwise they must appear on printed =
covers=20
  that bracket the whole aggregate. </P></LI>
  <LI>TRANSLATION=20
  <P>Translation is considered a kind of modification, so you may =
distribute=20
  translations of the Document under the terms of section 4. Replacing =
Invariant=20
  Sections with translations requires special permission from their =
copyright=20
  holders, but you may include translations of some or all Invariant =
Sections in=20
  addition to the original versions of these Invariant Sections. You may =
include=20
  a translation of this License, and all the license notices in the =
Document,=20
  and any Warranty Disclaimers, provided that you also include the =
original=20
  English version of this License and the original versions of those =
notices and=20
  disclaimers. In case of a disagreement between the translation and the =

  original version of this License or a notice or disclaimer, the =
original=20
  version will prevail. </P>
  <P>If a section in the Document is Entitled =
=E2=80=9CAcknowledgements=E2=80=9D, =E2=80=9CDedications=E2=80=9D,=20
  or =E2=80=9CHistory=E2=80=9D, the requirement (section 4) to Preserve =
its Title (section 1)=20
  will typically require changing the actual title. </P></LI>
  <LI>TERMINATION=20
  <P>You may not copy, modify, sublicense, or distribute the Document =
except as=20
  expressly provided under this License. Any attempt otherwise to copy, =
modify,=20
  sublicense, or distribute it is void, and will automatically terminate =
your=20
  rights under this License. </P>
  <P>However, if you cease all violation of this License, then your =
license from=20
  a particular copyright holder is reinstated (a) provisionally, unless =
and=20
  until the copyright holder explicitly and finally terminates your =
license, and=20
  (b) permanently, if the copyright holder fails to notify you of the =
violation=20
  by some reasonable means prior to 60 days after the cessation. </P>
  <P>Moreover, your license from a particular copyright holder is =
reinstated=20
  permanently if the copyright holder notifies you of the violation by =
some=20
  reasonable means, this is the first time you have received notice of =
violation=20
  of this License (for any work) from that copyright holder, and you =
cure the=20
  violation prior to 30 days after your receipt of the notice. </P>
  <P>Termination of your rights under this section does not terminate =
the=20
  licenses of parties who have received copies or rights from you under =
this=20
  License. If your rights have been terminated and not permanently =
reinstated,=20
  receipt of a copy of some or all of the same material does not give =
you any=20
  rights to use it. </P></LI>
  <LI>FUTURE REVISIONS OF THIS LICENSE=20
  <P>The Free Software Foundation may publish new, revised versions of =
the GNU=20
  Free Documentation License from time to time. Such new versions will =
be=20
  similar in spirit to the present version, but may differ in detail to =
address=20
  new problems or concerns. See <A=20
  =
href=3D"http://www.gnu.org/copyleft/">http://www.gnu.org/copyleft/</A>. =
</P>
  <P>Each version of the License is given a distinguishing version =
number. If=20
  the Document specifies that a particular numbered version of this =
License =E2=80=9Cor=20
  any later version=E2=80=9D applies to it, you have the option of =
following the terms=20
  and conditions either of that specified version or of any later =
version that=20
  has been published (not as a draft) by the Free Software Foundation. =
If the=20
  Document does not specify a version number of this License, you may =
choose any=20
  version ever published (not as a draft) by the Free Software =
Foundation. If=20
  the Document specifies that a proxy can decide which future versions =
of this=20
  License can be used, that proxy=E2=80=99s public statement of =
acceptance of a version=20
  permanently authorizes you to choose that version for the Document. =
</P></LI>
  <LI>RELICENSING=20
  <P>=E2=80=9CMassive Multiauthor Collaboration Site=E2=80=9D (or =
=E2=80=9CMMC Site=E2=80=9D) means any World=20
  Wide Web server that publishes copyrightable works and also provides =
prominent=20
  facilities for anybody to edit those works. A public wiki that anybody =
can=20
  edit is an example of such a server. A =E2=80=9CMassive Multiauthor =
Collaboration=E2=80=9D (or=20
  =E2=80=9CMMC=E2=80=9D) contained in the site means any set of =
copyrightable works thus=20
  published on the MMC site. </P>
  <P>=E2=80=9CCC-BY-SA=E2=80=9D means the Creative Commons =
Attribution-Share Alike 3.0 license=20
  published by Creative Commons Corporation, a not-for-profit =
corporation with a=20
  principal place of business in San Francisco, California, as well as =
future=20
  copyleft versions of that license published by that same organization. =
</P>
  <P>=E2=80=9CIncorporate=E2=80=9D means to publish or republish a =
Document, in whole or in=20
  part, as part of another Document. </P>
  <P>An MMC is =E2=80=9Celigible for relicensing=E2=80=9D if it is =
licensed under this License,=20
  and if all works that were first published under this License =
somewhere other=20
  than this MMC, and subsequently incorporated in whole or in part into =
the MMC,=20
  (1) had no cover texts or invariant sections, and (2) were thus =
incorporated=20
  prior to November 1, 2008. </P>
  <P>The operator of an MMC Site may republish an MMC contained in the =
site=20
  under CC-BY-SA on the same site at any time before August 1, 2009, =
provided=20
  the MMC is eligible for relicensing. </P></LI></OL><A=20
name=3DADDENDUM_003a-How-to-use-this-License-for-your-documents></A>
<H3 class=3Dheading>ADDENDUM: How to use this License for your =
documents</H3>
<P>To use this License in a document you have written, include a copy of =
the=20
License in the document and put the following copyright and license =
notices just=20
after the title page: </P>
<DIV class=3Dsmallexample><PRE class=3Dsmallexample>  Copyright (C)  =
<VAR>year</VAR>  <VAR>your name</VAR>.
  Permission is granted to copy, distribute and/or modify this document
  under the terms of the GNU Free Documentation License, Version 1.3
  or any later version published by the Free Software Foundation;
  with no Invariant Sections, no Front-Cover Texts, and no Back-Cover
  Texts.  A copy of the license is included in the section entitled =
``GNU
  Free Documentation License''.
</PRE></DIV>
<P>If you have Invariant Sections, Front-Cover Texts and Back-Cover =
Texts,=20
replace the =E2=80=9Cwith=E2=80=A6Texts.=E2=80=9D line with this: </P>
<DIV class=3Dsmallexample><PRE class=3Dsmallexample>    with the =
Invariant Sections being <VAR>list their titles</VAR>, with
    the Front-Cover Texts being <VAR>list</VAR>, and with the Back-Cover =
Texts
    being <VAR>list</VAR>.
</PRE></DIV>
<P>If you have Invariant Sections without Cover Texts, or some other =
combination=20
of the three, merge those two alternatives to suit the situation. </P>
<P>If your document contains nontrivial examples of program code, we =
recommend=20
releasing these examples in parallel under your choice of free software =
license,=20
such as the GNU General Public License, to permit their use in free =
software.=20
</P>
<HR>
<A name=3DConcept-Index></A>
<DIV class=3Dheader>
<P>Next: <A accessKey=3Dn=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index"=20
rel=3Dnext>Name Index</A>, Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#GNU-Free-Docume=
ntation-License"=20
rel=3Dprev>GNU Free Documentation License</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Top" =
rel=3Dup>Top</A>=20
&nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A name=3DIndex-of-Concepts></A>
<H2 class=3Dunnumbered>Index of Concepts</H2>
<TABLE>
  <TBODY>
  <TR>
    <TH vAlign=3Dtop>Jump to: &nbsp; </TH>
    <TD><A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_symbol-1"><B>!</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_symbol-2"><B>#</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_symbol-3"><B>$</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_symbol-4"><B>%</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_symbol-5"><B>*</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_symbol-6"><B>+</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_symbol-7"><B>,</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_symbol-8"><B>-</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_symbol-9"><B>.</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_symbol-10"><B>:</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_symbol-11"><B>=3D</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_symbol-12"><B>?</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_symbol-13"><B>@</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_symbol-14"><B>[</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_symbol-15"><B>\</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_symbol-16"><B>_</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_symbol-17"><B>~</B></A>=20
      &nbsp; <BR><A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-A"><B>A</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-B"><B>B</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-C"><B>C</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-D"><B>D</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-E"><B>E</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-F"><B>F</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-G"><B>G</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-H"><B>H</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-I"><B>I</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-J"><B>J</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-K"><B>K</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-L"><B>L</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-M"><B>M</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-N"><B>N</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-O"><B>O</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-P"><B>P</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-Q"><B>Q</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-R"><B>R</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-S"><B>S</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-T"><B>T</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-U"><B>U</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-V"><B>V</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-W"><B>W</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-Y"><B>Y</B></A>=20
      &nbsp; </TD></TR></TBODY></TABLE>
<TABLE class=3Dindex-cp border=3D0>
  <TBODY>
  <TR>
    <TD></TD>
    <TH align=3Dleft>Index Entry</TH>
    <TD>&nbsp;</TD>
    <TH align=3Dleft>Section</TH></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_symbol-1>!</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0021_003=
d">!=3D</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Setting">Settin=
g</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0021_003=
d_002c-expansion">!=3D,=20
      expansion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Reading-Makefil=
es">Reading=20
      Makefiles</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_symbol-2>#</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0023-_00=
28comments_0029_002c-in-makefile"><CODE>#</CODE>=20
      (comments), in makefile</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Conten=
ts">Makefile=20
      Contents</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0023-_00=
28comments_0029_002c-in-recipes"><CODE>#</CODE>=20
      (comments), in recipes</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipe-Syntax">=
Recipe=20
      Syntax</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0023incl=
ude"><CODE>#include</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Prere=
quisites">Automatic=20
      Prerequisites</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_symbol-3>$</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0024_002=
c-in-function-call"><CODE>$</CODE>,=20
      in function call</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Syntax-of-Funct=
ions">Syntax=20
      of Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0024_002=
c-in-rules"><CODE>$</CODE>,=20
      in rules</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rule-Syntax">Ru=
le=20
      Syntax</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0024_002=
c-in-variable-name"><CODE>$</CODE>,=20
      in variable name</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Computed-Names"=
>Computed=20
      Names</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0024_002=
c-in-variable-reference"><CODE>$</CODE>,=20
      in variable reference</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Reference">Refe=
rence</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_symbol-4>%</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0025_002=
c-in-pattern-rules"><CODE>%</CODE>,=20
      in pattern rules</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Intro">=
Pattern=20
      Intro</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0025_002=
c-quoting-in-patsubst"><CODE>%</CODE>,=20
      quoting in <CODE>patsubst</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0025_002=
c-quoting-in-static-pattern"><CODE>%</CODE>,=20
      quoting in static pattern</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-Usage">S=
tatic=20
      Usage</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0025_002=
c-quoting-in-vpath"><CODE>%</CODE>,=20
      quoting in <CODE>vpath</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Selective-Searc=
h">Selective=20
      Search</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0025_002=
c-quoting-with-_005c-_0028backslash_0029"><CODE>%</CODE>,=20
      quoting with <CODE>\</CODE> (backslash)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Selective-Searc=
h">Selective=20
      Search</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0025_002=
c-quoting-with-_005c-_0028backslash_0029-1"><CODE>%</CODE>,=20
      quoting with <CODE>\</CODE> (backslash)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-Usage">S=
tatic=20
      Usage</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0025_002=
c-quoting-with-_005c-_0028backslash_0029-2"><CODE>%</CODE>,=20
      quoting with <CODE>\</CODE> (backslash)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_symbol-5>*</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002a-_00=
28wildcard-character_0029"><CODE>*</CODE>=20
      (wildcard character)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcards">Wild=
cards</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_symbol-6>+</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002b_002=
c-and-define">+,=20
      and <CODE>define</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Canned-Recipes"=
>Canned=20
      Recipes</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002b_002=
c-and-recipe-execution">+,=20
      and recipe execution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution">Instead=20
      of Execution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002b_002=
c-and-recipes">+,=20
      and recipes</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#MAKE-Variable">=
MAKE=20
      Variable</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002b_003=
d">+=3D</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Appending">Appe=
nding</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002b_003=
d_002c-expansion">+=3D,=20
      expansion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Reading-Makefil=
es">Reading=20
      Makefiles</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002b_003=
d_002c-expansion-1">+=3D,=20
      expansion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Reading-Makefil=
es">Reading=20
      Makefiles</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_symbol-7>,</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002cv-_0=
028RCS-file-extension_0029"><CODE>,v=20
      <SPAN class=3Droman>(RCS file extension)</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_symbol-8>-</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d-_00=
28in-recipes_0029"><CODE>-</CODE>=20
      (in recipes)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Errors">Errors<=
/A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
c-and-define">-,=20
      and <CODE>define</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Canned-Recipes"=
>Canned=20
      Recipes</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dalways_002dmake"><CODE>--always-make</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dassume_002dnew"><CODE>--assume-new</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution">Instead=20
      of Execution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dassume_002dnew-1"><CODE>--assume-new</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dassume_002dnew_002c-and-recursion"><CODE>--assume-new</CODE>,=20
      and recursion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dassume_002dold"><CODE>--assume-old</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Avoiding-Compil=
ation">Avoiding=20
      Compilation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dassume_002dold-1"><CODE>--assume-old</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dassume_002dold_002c-and-recursion"><CODE>--assume-old</CODE>,=20
      and recursion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dcheck_002dsymlink_002dtimes"><CODE>--check-symlink-times</CODE></A>:</TD=
>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
ddebug"><CODE>--debug</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
ddirectory"><CODE>--directory</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Recursion">Recu=
rsion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
ddirectory-1"><CODE>--directory</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
ddirectory_002c-and-_002d_002dprint_002ddirectory"><CODE>--directory</COD=
E>,=20
      and <CODE>--print-directory</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#g_t_002dw-Optio=
n">-w=20
      Option</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
ddirectory_002c-and-recursion"><CODE>--directory</CODE>,=20
      and recursion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
ddry_002drun"><CODE>--dry-run</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Echoing">Echoin=
g</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
ddry_002drun-1"><CODE>--dry-run</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution">Instead=20
      of Execution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
ddry_002drun-2"><CODE>--dry-run</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
denvironment_002doverrides"><CODE>--environment-overrides</CODE></A>:</TD=
>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
deval"><CODE>--eval</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dfile"><CODE>--file</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Names"=
>Makefile=20
      Names</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dfile-1"><CODE>--file</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Argume=
nts">Makefile=20
      Arguments</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dfile-2"><CODE>--file</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dfile_002c-and-recursion"><CODE>--file</CODE>,=20
      and recursion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dhelp"><CODE>--help</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dignore_002derrors"><CODE>--ignore-errors</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Errors">Errors<=
/A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dignore_002derrors-1"><CODE>--ignore-errors</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dinclude_002ddir"><CODE>--include-dir</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Include">Includ=
e</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dinclude_002ddir-1"><CODE>--include-dir</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
djobs"><CODE>--jobs</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel">Paral=
lel</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
djobs-1"><CODE>--jobs</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
djobs_002c-and-recursion"><CODE>--jobs</CODE>,=20
      and recursion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
djust_002dprint"><CODE>--just-print</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Echoing">Echoin=
g</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
djust_002dprint-1"><CODE>--just-print</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution">Instead=20
      of Execution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
djust_002dprint-2"><CODE>--just-print</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dkeep_002dgoing"><CODE>--keep-going</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Errors">Errors<=
/A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dkeep_002dgoing-1"><CODE>--keep-going</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Testing">Testin=
g</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dkeep_002dgoing-2"><CODE>--keep-going</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dload_002daverage"><CODE>--load-average</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel">Paral=
lel</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dload_002daverage-1"><CODE>--load-average</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dmakefile"><CODE>--makefile</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Names"=
>Makefile=20
      Names</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dmakefile-1"><CODE>--makefile</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Argume=
nts">Makefile=20
      Arguments</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dmakefile-2"><CODE>--makefile</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dmax_002dload"><CODE>--max-load</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel">Paral=
lel</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dmax_002dload-1"><CODE>--max-load</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dnew_002dfile"><CODE>--new-file</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution">Instead=20
      of Execution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dnew_002dfile-1"><CODE>--new-file</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dnew_002dfile_002c-and-recursion"><CODE>--new-file</CODE>,=20
      and recursion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dno_002dbuiltin_002drules"><CODE>--no-builtin-rules</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dno_002dbuiltin_002dvariables"><CODE>--no-builtin-variables</CODE></A>:</=
TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dno_002dkeep_002dgoing"><CODE>--no-keep-going</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dno_002dprint_002ddirectory"><CODE>--no-print-directory</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#g_t_002dw-Optio=
n">-w=20
      Option</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dno_002dprint_002ddirectory-1"><CODE>--no-print-directory</CODE></A>:</TD=
>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dold_002dfile"><CODE>--old-file</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Avoiding-Compil=
ation">Avoiding=20
      Compilation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dold_002dfile-1"><CODE>--old-file</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dold_002dfile_002c-and-recursion"><CODE>--old-file</CODE>,=20
      and recursion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
doutput_002dsync"><CODE>--output-sync</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel-Output=
">Parallel=20
      Output</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
doutput_002dsync-1"><CODE>--output-sync</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dprint_002ddata_002dbase"><CODE>--print-data-base</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dprint_002ddirectory"><CODE>--print-directory</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dprint_002ddirectory_002c-and-_002d_002ddirectory"><CODE>--print-director=
y</CODE>,=20
      and <CODE>--directory</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#g_t_002dw-Optio=
n">-w=20
      Option</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dprint_002ddirectory_002c-and-recursion"><CODE>--print-directory</CODE>, =

      and recursion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#g_t_002dw-Optio=
n">-w=20
      Option</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dprint_002ddirectory_002c-disabling"><CODE>--print-directory</CODE>,=20
      disabling</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#g_t_002dw-Optio=
n">-w=20
      Option</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dquestion"><CODE>--question</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution">Instead=20
      of Execution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dquestion-1"><CODE>--question</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dquiet"><CODE>--quiet</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Echoing">Echoin=
g</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dquiet-1"><CODE>--quiet</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
drecon"><CODE>--recon</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Echoing">Echoin=
g</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
drecon-1"><CODE>--recon</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution">Instead=20
      of Execution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
drecon-2"><CODE>--recon</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dsilent"><CODE>--silent</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Echoing">Echoin=
g</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dsilent-1"><CODE>--silent</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dstop"><CODE>--stop</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dtouch"><CODE>--touch</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution">Instead=20
      of Execution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dtouch-1"><CODE>--touch</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dtouch_002c-and-recursion"><CODE>--touch</CODE>,=20
      and recursion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#MAKE-Variable">=
MAKE=20
      Variable</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dtrace"><CODE>--trace</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dversion"><CODE>--version</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dwarn_002dundefined_002dvariables"><CODE>--warn-undefined-variables</CODE=
></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dwhat_002dif"><CODE>--what-if</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution">Instead=20
      of Execution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002d_002=
dwhat_002dif-1"><CODE>--what-if</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002db"><=
CODE>-b</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dB"><=
CODE>-B</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dC"><=
CODE>-C</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Recursion">Recu=
rsion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dC-1"=
><CODE>-C</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dC_00=
2c-and-_002dw"><CODE>-C</CODE>,=20
      and <CODE>-w</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#g_t_002dw-Optio=
n">-w=20
      Option</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dC_00=
2c-and-recursion"><CODE>-C</CODE>,=20
      and recursion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dd"><=
CODE>-d</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002de"><=
CODE>-e</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002de-_0=
028shell-flag_0029"><CODE>-e</CODE>=20
      (shell flag)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Prere=
quisites">Automatic=20
      Prerequisites</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002df"><=
CODE>-f</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Names"=
>Makefile=20
      Names</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002df-1"=
><CODE>-f</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Argume=
nts">Makefile=20
      Arguments</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002df-2"=
><CODE>-f</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002df_00=
2c-and-recursion"><CODE>-f</CODE>,=20
      and recursion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dh"><=
CODE>-h</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dI"><=
CODE>-I</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Include">Includ=
e</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002di"><=
CODE>-i</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Errors">Errors<=
/A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002di-1"=
><CODE>-i</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dI-1"=
><CODE>-I</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dj"><=
CODE>-j</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel">Paral=
lel</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dj-1"=
><CODE>-j</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dj_00=
2c-and-archive-update"><CODE>-j</CODE>,=20
      and archive update</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Pitfall=
s">Archive=20
      Pitfalls</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dj_00=
2c-and-recursion"><CODE>-j</CODE>,=20
      and recursion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dk"><=
CODE>-k</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Errors">Errors<=
/A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dk-1"=
><CODE>-k</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Testing">Testin=
g</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dk-2"=
><CODE>-k</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dl"><=
CODE>-l</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dL"><=
CODE>-L</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dl-_0=
028library-search_0029"><CODE>-l</CODE>=20
      (library search)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Libraries_002fS=
earch">Libraries/Search</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dl-_0=
028load-average_0029"><CODE>-l</CODE>=20
      (load average)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel">Paral=
lel</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dm"><=
CODE>-m</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dM-_0=
028to-compiler_0029"><CODE>-M</CODE>=20
      (to compiler)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Prere=
quisites">Automatic=20
      Prerequisites</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dMM-_=
0028to-GNU-compiler_0029"><CODE>-MM</CODE>=20
      (to GNU compiler)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Prere=
quisites">Automatic=20
      Prerequisites</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dn"><=
CODE>-n</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Echoing">Echoin=
g</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dn-1"=
><CODE>-n</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution">Instead=20
      of Execution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dn-2"=
><CODE>-n</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dO"><=
CODE>-O</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel-Output=
">Parallel=20
      Output</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002do"><=
CODE>-o</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Avoiding-Compil=
ation">Avoiding=20
      Compilation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002do-1"=
><CODE>-o</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dO-1"=
><CODE>-O</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002do_00=
2c-and-recursion"><CODE>-o</CODE>,=20
      and recursion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dp"><=
CODE>-p</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dq"><=
CODE>-q</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution">Instead=20
      of Execution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dq-1"=
><CODE>-q</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dr"><=
CODE>-r</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dR"><=
CODE>-R</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002ds"><=
CODE>-s</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Echoing">Echoin=
g</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002ds-1"=
><CODE>-s</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dS"><=
CODE>-S</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dt"><=
CODE>-t</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution">Instead=20
      of Execution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dt-1"=
><CODE>-t</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dt_00=
2c-and-recursion"><CODE>-t</CODE>,=20
      and recursion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#MAKE-Variable">=
MAKE=20
      Variable</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dv"><=
CODE>-v</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dW"><=
CODE>-W</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution">Instead=20
      of Execution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dw"><=
CODE>-w</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dW-1"=
><CODE>-W</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dw_00=
2c-and-_002dC"><CODE>-w</CODE>,=20
      and <CODE>-C</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#g_t_002dw-Optio=
n">-w=20
      Option</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dW_00=
2c-and-recursion"><CODE>-W</CODE>,=20
      and recursion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dw_00=
2c-and-recursion"><CODE>-w</CODE>,=20
      and recursion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#g_t_002dw-Optio=
n">-w=20
      Option</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dw_00=
2c-disabling"><CODE>-w</CODE>,=20
      disabling</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#g_t_002dw-Optio=
n">-w=20
      Option</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_symbol-9>.</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002ea-_0=
028archives_0029"><CODE>.a</CODE>=20
      (archives)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Suffix-=
Rules">Archive=20
      Suffix Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002ec"><=
CODE>.c</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eC"><=
CODE>.C</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002ecc">=
<CODE>.cc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002ech">=
<CODE>.ch</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002ecpp"=
><CODE>.cpp</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002ed"><=
CODE>.d</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Prere=
quisites">Automatic=20
      Prerequisites</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002edef"=
><CODE>.def</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002edvi"=
><CODE>.dvi</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002ef"><=
CODE>.f</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eF"><=
CODE>.F</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002einfo=
"><CODE>.info</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002el"><=
CODE>.l</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eLIBP=
ATTERNS_002c-and-link-libraries"><CODE>.LIBPATTERNS</CODE>,=20
      and link libraries</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Libraries_002fS=
earch">Libraries/Search</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eln">=
<CODE>.ln</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002emod"=
><CODE>.mod</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eo"><=
CODE>.o</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eo-1"=
><CODE>.o</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eONES=
HELL_002c-use-of"><CODE>.ONESHELL</CODE>,=20
      use of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#One-Shell">One =

      Shell</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002ep"><=
CODE>.p</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002ePREC=
IOUS-intermediate-files"><CODE>.PRECIOUS</CODE>=20
      intermediate files</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Chained-Rules">=
Chained=20
      Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002er"><=
CODE>.r</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002es"><=
CODE>.s</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eS"><=
CODE>.S</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002esh">=
<CODE>.sh</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eSHEL=
LFLAGS_002c-value-of"><CODE>.SHELLFLAGS</CODE>,=20
      value of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Choosing-the-Sh=
ell">Choosing=20
      the Shell</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002esym"=
><CODE>.sym</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002etex"=
><CODE>.tex</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002etexi=
"><CODE>.texi</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002etexi=
nfo"><CODE>.texinfo</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002etxin=
fo"><CODE>.txinfo</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002ew"><=
CODE>.w</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eweb"=
><CODE>.web</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002ey"><=
CODE>.y</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_symbol-10>:</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_003a_003=
a-rules-_0028double_002dcolon_0029"><CODE>::</CODE>=20
      rules (double-colon)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Double_002dColo=
n">Double-Colon</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_003a_003=
a_003d">::=3D</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavors">Flavor=
s</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_003a_003=
a_003d-1">::=3D</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Setting">Settin=
g</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_003a_003=
d">:=3D</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavors">Flavor=
s</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_003a_003=
d-1">:=3D</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Setting">Settin=
g</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_symbol-11>=3D</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_003d">=3D=
</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavors">Flavor=
s</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_003d-1">=
=3D</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Setting">Settin=
g</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_003d_002=
c-expansion">=3D,=20
      expansion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Reading-Makefil=
es">Reading=20
      Makefiles</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_symbol-12>?</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_003f-_00=
28wildcard-character_0029"><CODE>?</CODE>=20
      (wildcard character)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcards">Wild=
cards</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_003f_003=
d">?=3D</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavors">Flavor=
s</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_003f_003=
d-1">?=3D</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Setting">Settin=
g</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_003f_003=
d_002c-expansion">?=3D,=20
      expansion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Reading-Makefil=
es">Reading=20
      Makefiles</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_symbol-13>@</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0040-_00=
28in-recipes_0029"><CODE>@</CODE>=20
      (in recipes)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Echoing">Echoin=
g</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0040_002=
c-and-define">@,=20
      and <CODE>define</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Canned-Recipes"=
>Canned=20
      Recipes</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_symbol-14>[</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_005b_202=
6_005d-_0028wildcard-characters_0029"><CODE>[=E2=80=A6]</CODE>=20
      (wildcard characters)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcards">Wild=
cards</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_symbol-15>\</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_005c-_00=
28backslash_0029_002c-for-continuation-lines"><CODE>\</CODE>=20
      (backslash), for continuation lines</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Simple-Makefile=
">Simple=20
      Makefile</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_005c-_00=
28backslash_0029_002c-in-recipes"><CODE>\</CODE>=20
      (backslash), in recipes</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Splitting-Recip=
e-Lines">Splitting=20
      Recipe Lines</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_005c-_00=
28backslash_0029_002c-to-quote-_0025"><CODE>\</CODE>=20
      (backslash), to quote <CODE>%</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Selective-Searc=
h">Selective=20
      Search</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_005c-_00=
28backslash_0029_002c-to-quote-_0025-1"><CODE>\</CODE>=20
      (backslash), to quote <CODE>%</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-Usage">S=
tatic=20
      Usage</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_005c-_00=
28backslash_0029_002c-to-quote-_0025-2"><CODE>\</CODE>=20
      (backslash), to quote <CODE>%</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_symbol-16>_</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_005f_005=
f_002eSYMDEF"><CODE>__.SYMDEF</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Symbols=
">Archive=20
      Symbols</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_symbol-17>~</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_007e-_00=
28tilde_0029"><CODE>~</CODE>=20
      (tilde)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcards">Wild=
cards</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_letter-A>A</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-abspath">=
abspath</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">File=20
      Name Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-algorithm=
-for-directory-search">algorithm=20
      for directory search</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Search-Algorith=
m">Search=20
      Algorithm</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-all-_0028=
standard-target_0029"><CODE>all</CODE>=20
      <SPAN class=3Droman>(standard target)</SPAN></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Goals">Goals</A=
></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-appending=
-to-variables">appending=20
      to variables</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Appending">Appe=
nding</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-ar"><CODE=
>ar</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-archive">=
archive</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archives">Archi=
ves</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-archive-m=
ember-targets">archive=20
      member targets</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Members=
">Archive=20
      Members</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-archive-s=
ymbol-directory-updating">archive=20
      symbol directory updating</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Symbols=
">Archive=20
      Symbols</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-archive_0=
02c-and-_002dj">archive,=20
      and <CODE>-j</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Pitfall=
s">Archive=20
      Pitfalls</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-archive_0=
02c-and-parallel-execution">archive,=20
      and parallel execution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Pitfall=
s">Archive=20
      Pitfalls</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-archive_0=
02c-suffix-rule-for">archive,=20
      suffix rule for</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Suffix-=
Rules">Archive=20
      Suffix Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-Arg-list-=
too-long">Arg=20
      list too long</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-arguments=
-of-functions">arguments=20
      of functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Syntax-of-Funct=
ions">Syntax=20
      of Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-as"><CODE=
>as</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-as-1"><CO=
DE>as</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-assembly_=
002c-rule-to-compile">assembly,=20
      rule to compile</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-automatic=
-generation-of-prerequisites">automatic=20
      generation of prerequisites</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Include">Includ=
e</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-automatic=
-generation-of-prerequisites-1">automatic=20
      generation of prerequisites</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Prere=
quisites">Automatic=20
      Prerequisites</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-automatic=
-variables">automatic=20
      variables</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-automatic=
-variables-in-prerequisites">automatic=20
      variables in prerequisites</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_letter-B>B</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-backquote=
s">backquotes</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Shell-Function"=
>Shell=20
      Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-backslash=
-_0028_005c_0029_002c-for-continuation-lines">backslash=20
      (<CODE>\</CODE>), for continuation lines</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Simple-Makefile=
">Simple=20
      Makefile</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-backslash=
-_0028_005c_0029_002c-in-recipes">backslash=20
      (<CODE>\</CODE>), in recipes</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Splitting-Recip=
e-Lines">Splitting=20
      Recipe Lines</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-backslash=
-_0028_005c_0029_002c-to-quote-_0025">backslash=20
      (<CODE>\</CODE>), to quote <CODE>%</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Selective-Searc=
h">Selective=20
      Search</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-backslash=
-_0028_005c_0029_002c-to-quote-_0025-1">backslash=20
      (<CODE>\</CODE>), to quote <CODE>%</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-Usage">S=
tatic=20
      Usage</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-backslash=
-_0028_005c_0029_002c-to-quote-_0025-2">backslash=20
      (<CODE>\</CODE>), to quote <CODE>%</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-backslash=
-_0028_005c_0029_002c-to-quote-newlines">backslash=20
      (<CODE>\</CODE>), to quote newlines</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Splitting-Lines=
">Splitting=20
      Lines</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-backslash=
es-in-pathnames-and-wildcard-expansion">backslashes=20
      in pathnames and wildcard expansion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcard-Pitfal=
l">Wildcard=20
      Pitfall</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-basename"=
>basename</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">File=20
      Name Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-binary-pa=
ckages">binary=20
      packages</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Install-Command=
-Categories">Install=20
      Command Categories</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-broken-pi=
pe">broken=20
      pipe</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel-Input"=
>Parallel=20
      Input</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-bugs_002c=
-reporting">bugs,=20
      reporting</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Bugs">Bugs</A><=
/TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-built_002=
din-special-targets">built-in=20
      special targets</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
">Special=20
      Targets</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_letter-C>C</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-C_002b_00=
2b_002c-rule-to-compile">C++,=20
      rule to compile</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-C_002c-ru=
le-to-compile">C,=20
      rule to compile</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-canned-re=
cipes">canned=20
      recipes</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Canned-Recipes"=
>Canned=20
      Recipes</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-cc"><CODE=
>cc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-cc-1"><CO=
DE>cc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-cd-_0028s=
hell-command_0029"><CODE>cd</CODE>=20
      (shell command)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Execution">Exec=
ution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-cd-_0028s=
hell-command_0029-1"><CODE>cd</CODE>=20
      (shell command)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#MAKE-Variable">=
MAKE=20
      Variable</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-chains-of=
-rules">chains=20
      of rules</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Chained-Rules">=
Chained=20
      Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-check-_00=
28standard-target_0029"><CODE>check</CODE>=20
      <SPAN class=3Droman>(standard target)</SPAN></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Goals">Goals</A=
></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-clean-_00=
28standard-target_0029"><CODE>clean</CODE>=20
      <SPAN class=3Droman>(standard target)</SPAN></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Goals">Goals</A=
></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-clean-tar=
get"><CODE>clean</CODE>=20
      target</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Simple-Makefile=
">Simple=20
      Makefile</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-clean-tar=
get-1"><CODE>clean</CODE>=20
      target</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Cleanup">Cleanu=
p</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-cleaning-=
up">cleaning=20
      up</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Cleanup">Cleanu=
p</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-clobber-_=
0028standard-target_0029"><CODE>clobber</CODE>=20
      <SPAN class=3Droman>(standard target)</SPAN></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Goals">Goals</A=
></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-co"><CODE=
>co</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-co-1"><CO=
DE>co</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-combining=
-rules-by-prerequisite">combining=20
      rules by prerequisite</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Combine-By-Prer=
equisite">Combine=20
      By Prerequisite</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-command-e=
xpansion">command=20
      expansion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Shell-Function"=
>Shell=20
      Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-command-l=
ine-variable-definitions_002c-and-recursion">command=20
      line variable definitions, and recursion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-command-l=
ine-variables">command=20
      line variables</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Overriding">Ove=
rriding</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-commands_=
002c-sequences-of">commands,=20
      sequences of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Canned-Recipes"=
>Canned=20
      Recipes</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-comments_=
002c-in-makefile">comments,=20
      in makefile</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Conten=
ts">Makefile=20
      Contents</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-comments_=
002c-in-recipes">comments,=20
      in recipes</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipe-Syntax">=
Recipe=20
      Syntax</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-compatibi=
lity">compatibility</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Features">Featu=
res</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-compatibi=
lity-in-exporting">compatibility=20
      in exporting</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables_002fR=
ecursion">Variables/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-compilati=
on_002c-testing">compilation,=20
      testing</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Testing">Testin=
g</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-computed-=
variable-name">computed=20
      variable name</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Computed-Names"=
>Computed=20
      Names</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-condition=
al-expansion">conditional=20
      expansion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditional-Fun=
ctions">Conditional=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-condition=
al-variable-assignment">conditional=20
      variable assignment</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavors">Flavor=
s</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-condition=
als">conditionals</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditionals">C=
onditionals</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-continuat=
ion-lines">continuation=20
      lines</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Simple-Makefile=
">Simple=20
      Makefile</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-controlli=
ng-make">controlling=20
      make</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Make-Control-Fu=
nctions">Make=20
      Control Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-conventio=
ns-for-makefiles">conventions=20
      for makefiles</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Conven=
tions">Makefile=20
      Conventions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-convert-g=
uile-types">convert=20
      guile types</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Types">Gu=
ile=20
      Types</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-ctangle">=
<CODE>ctangle</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-ctangle-1=
"><CODE>ctangle</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-cweave"><=
CODE>cweave</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-cweave-1"=
><CODE>cweave</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_letter-D>D</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-data-base=
-of-make-rules">data=20
      base of <CODE>make</CODE> rules</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-deducing-=
recipes-_0028implicit-rules_0029">deducing=20
      recipes (implicit rules)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#make-Deduces">m=
ake=20
      Deduces</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-default-d=
irectories-for-included-makefiles">default=20
      directories for included makefiles</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Include">Includ=
e</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-default-g=
oal">default=20
      goal</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#How-Make-Works"=
>How=20
      Make Works</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-default-g=
oal-1">default=20
      goal</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rules">Rules</A=
></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-default-m=
akefile-name">default=20
      makefile name</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Names"=
>Makefile=20
      Names</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-default-r=
ules_002c-last_002dresort">default=20
      rules, last-resort</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Last-Resort">La=
st=20
      Resort</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-define_00=
2c-expansion">define,=20
      expansion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Reading-Makefil=
es">Reading=20
      Makefiles</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-defining-=
variables-verbatim">defining=20
      variables verbatim</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Multi_002dLine"=
>Multi-Line</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-deletion-=
of-target-files">deletion=20
      of target files</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Errors">Errors<=
/A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-deletion-=
of-target-files-1">deletion=20
      of target files</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Interrupts">Int=
errupts</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-directive=
">directive</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Conten=
ts">Makefile=20
      Contents</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-directori=
es_002c-creating-installation">directories,=20
      creating installation</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Directory-Varia=
bles">Directory=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-directori=
es_002c-printing-them">directories,=20
      printing them</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#g_t_002dw-Optio=
n">-w=20
      Option</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-directori=
es_002c-updating-archive-symbol">directories,=20
      updating archive symbol</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Symbols=
">Archive=20
      Symbols</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-directory=
-part">directory=20
      part</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">File=20
      Name Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-directory=
-search-_0028VPATH_0029">directory=20
      search (<CODE>VPATH</CODE>)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Directory-Searc=
h">Directory=20
      Search</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-directory=
-search-_0028VPATH_0029_002c-and-implicit-rules">directory=20
      search (<CODE>VPATH</CODE>), and implicit rules</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit_002fSe=
arch">Implicit/Search</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-directory=
-search-_0028VPATH_0029_002c-and-link-libraries">directory=20
      search (<CODE>VPATH</CODE>), and link libraries</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Libraries_002fS=
earch">Libraries/Search</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-directory=
-search-_0028VPATH_0029_002c-and-recipes">directory=20
      search (<CODE>VPATH</CODE>), and recipes</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipes_002fSea=
rch">Recipes/Search</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-directory=
-search-algorithm">directory=20
      search algorithm</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Search-Algorith=
m">Search=20
      Algorithm</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-directory=
-search_002c-traditional-_0028GPATH_0029">directory=20
      search, traditional (GPATH)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Search-Algorith=
m">Search=20
      Algorithm</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-dist-_002=
8standard-target_0029"><CODE>dist</CODE>=20
      <SPAN class=3Droman>(standard target)</SPAN></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Goals">Goals</A=
></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-distclean=
-_0028standard-target_0029"><CODE>distclean</CODE>=20
      <SPAN class=3Droman>(standard target)</SPAN></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Goals">Goals</A=
></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-dollar-si=
gn-_0028_0024_0029_002c-in-function-call">dollar=20
      sign (<CODE>$</CODE>), in function call</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Syntax-of-Funct=
ions">Syntax=20
      of Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-dollar-si=
gn-_0028_0024_0029_002c-in-rules">dollar=20
      sign (<CODE>$</CODE>), in rules</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rule-Syntax">Ru=
le=20
      Syntax</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-dollar-si=
gn-_0028_0024_0029_002c-in-variable-name">dollar=20
      sign (<CODE>$</CODE>), in variable name</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Computed-Names"=
>Computed=20
      Names</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-dollar-si=
gn-_0028_0024_0029_002c-in-variable-reference">dollar=20
      sign (<CODE>$</CODE>), in variable reference</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Reference">Refe=
rence</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-DOS_002c-=
choosing-a-shell-in">DOS,=20
      choosing a shell in</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Choosing-the-Sh=
ell">Choosing=20
      the Shell</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-double_00=
2dcolon-rules">double-colon=20
      rules</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Double_002dColo=
n">Double-Colon</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-duplicate=
-words_002c-removing">duplicate=20
      words, removing</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_letter-E>E</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-E2BIG">E2=
BIG</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-echoing-o=
f-recipes">echoing=20
      of recipes</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Echoing">Echoin=
g</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-editor">e=
ditor</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Introduction">I=
ntroduction</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-Emacs-_00=
28M_002dx-compile_0029">Emacs=20
      (<CODE>M-x compile</CODE>)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Errors">Errors<=
/A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-empty-rec=
ipes">empty=20
      recipes</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Empty-Recipes">=
Empty=20
      Recipes</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-empty-tar=
gets">empty=20
      targets</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Empty-Targets">=
Empty=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-environme=
nt">environment</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Environment">En=
vironment</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-environme=
nt_002c-and-recursion">environment,=20
      and recursion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables_002fR=
ecursion">Variables/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-environme=
nt_002c-SHELL-in">environment,=20
      <CODE>SHELL</CODE> in</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Choosing-the-Sh=
ell">Choosing=20
      the Shell</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-error_002=
c-stopping-on">error,=20
      stopping on</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Make-Control-Fu=
nctions">Make=20
      Control Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-errors-_0=
028in-recipes_0029">errors=20
      (in recipes)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Errors">Errors<=
/A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-errors-wi=
th-wildcards">errors=20
      with wildcards</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcard-Pitfal=
l">Wildcard=20
      Pitfall</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-evaluatin=
g-makefile-syntax">evaluating=20
      makefile syntax</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Eval-Function">=
Eval=20
      Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-example-o=
f-loaded-objects">example=20
      of loaded objects</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Loaded-Object-E=
xample">Loaded=20
      Object Example</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-example-u=
sing-Guile">example=20
      using Guile</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Example">=
Guile=20
      Example</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-execution=
_002c-in-parallel">execution,=20
      in parallel</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel">Paral=
lel</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-execution=
_002c-instead-of">execution,=20
      instead of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution">Instead=20
      of Execution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-execution=
_002c-of-recipes">execution,=20
      of recipes</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Execution">Exec=
ution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-exit-stat=
us-_0028errors_0029">exit=20
      status (errors)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Errors">Errors<=
/A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-exit-stat=
us-of-make">exit=20
      status of make</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Running">Runnin=
g</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-expansion=
_002c-secondary">expansion,=20
      secondary</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Secondary-Expan=
sion">Secondary=20
      Expansion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-explicit-=
rule_002c-definition-of">explicit=20
      rule, definition of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Conten=
ts">Makefile=20
      Contents</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-explicit-=
rule_002c-expansion">explicit=20
      rule, expansion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Reading-Makefil=
es">Reading=20
      Makefiles</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-explicit-=
rules_002c-secondary-expansion-of">explicit=20
      rules, secondary expansion of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Secondary-Expan=
sion">Secondary=20
      Expansion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-exporting=
-variables">exporting=20
      variables</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables_002fR=
ecursion">Variables/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-extension=
s_002c-Guile">extensions,=20
      Guile</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Integrati=
on">Guile=20
      Integration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-extension=
s_002c-load-directive">extensions,=20
      load directive</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#load-Directive"=
>load=20
      Directive</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-extension=
s_002c-loading">extensions,=20
      loading</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Loading-Objects=
">Loading=20
      Objects</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_letter-F>F</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-f77"><COD=
E>f77</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-f77-1"><C=
ODE>f77</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-FDL_002c-=
GNU-Free-Documentation-License">FDL,=20
      GNU Free Documentation License</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#GNU-Free-Docume=
ntation-License">GNU=20
      Free Documentation License</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-features-=
of-GNU-make">features=20
      of GNU <CODE>make</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Features">Featu=
res</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-features_=
002c-missing">features,=20
      missing</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Missing">Missin=
g</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-file-name=
-functions">file=20
      name functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">File=20
      Name Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-file-name=
-of-makefile">file=20
      name of makefile</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Names"=
>Makefile=20
      Names</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-file-name=
-of-makefile_002c-how-to-specify">file=20
      name of makefile, how to specify</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Names"=
>Makefile=20
      Names</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-file-name=
-prefix_002c-adding">file=20
      name prefix, adding</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">File=20
      Name Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-file-name=
-suffix">file=20
      name suffix</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">File=20
      Name Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-file-name=
-suffix_002c-adding">file=20
      name suffix, adding</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">File=20
      Name Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-file-name=
-with-wildcards">file=20
      name with wildcards</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcards">Wild=
cards</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-file-name=
_002c-abspath-of">file=20
      name, abspath of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">File=20
      Name Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-file-name=
_002c-basename-of">file=20
      name, basename of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">File=20
      Name Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-file-name=
_002c-directory-part">file=20
      name, directory part</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">File=20
      Name Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-file-name=
_002c-nondirectory-part">file=20
      name, nondirectory part</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">File=20
      Name Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-file-name=
_002c-realpath-of">file=20
      name, realpath of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">File=20
      Name Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-file_002c=
-writing-to">file,=20
      writing to</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Function">=
File=20
      Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-files_002=
c-assuming-new">files,=20
      assuming new</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution">Instead=20
      of Execution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-files_002=
c-assuming-old">files,=20
      assuming old</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Avoiding-Compil=
ation">Avoiding=20
      Compilation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-files_002=
c-avoiding-recompilation-of">files,=20
      avoiding recompilation of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Avoiding-Compil=
ation">Avoiding=20
      Compilation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-files_002=
c-intermediate">files,=20
      intermediate</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Chained-Rules">=
Chained=20
      Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-filtering=
-out-words">filtering=20
      out words</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-filtering=
-words">filtering=20
      words</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-finding-s=
trings">finding=20
      strings</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-flags">fl=
ags</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-flags-for=
-compilers">flags=20
      for compilers</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-flavor-of=
-variable">flavor=20
      of variable</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavor-Function=
">Flavor=20
      Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-flavors-o=
f-variables">flavors=20
      of variables</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavors">Flavor=
s</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-FORCE"><C=
ODE>FORCE</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Force-Targets">=
Force=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-force-tar=
gets">force=20
      targets</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Force-Targets">=
Force=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-Fortran_0=
02c-rule-to-compile">Fortran,=20
      rule to compile</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-functions=
">functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Functions">Func=
tions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-functions=
_002c-for-controlling-make">functions,=20
      for controlling make</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Make-Control-Fu=
nctions">Make=20
      Control Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-functions=
_002c-for-file-names">functions,=20
      for file names</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">File=20
      Name Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-functions=
_002c-for-text">functions,=20
      for text</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-functions=
_002c-syntax-of">functions,=20
      syntax of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Syntax-of-Funct=
ions">Syntax=20
      of Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-functions=
_002c-user-defined">functions,=20
      user defined</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Call-Function">=
Call=20
      Function</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_letter-G>G</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-g_002b_00=
2b"><CODE>g++</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-g_002b_00=
2b-1"><CODE>g++</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-gcc"><COD=
E>gcc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-generatin=
g-prerequisites-automatically">generating=20
      prerequisites automatically</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Include">Includ=
e</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-generatin=
g-prerequisites-automatically-1">generating=20
      prerequisites automatically</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Prere=
quisites">Automatic=20
      Prerequisites</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-get"><COD=
E>get</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-get-1"><C=
ODE>get</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-globbing-=
_0028wildcards_0029">globbing=20
      (wildcards)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcards">Wild=
cards</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-goal">goa=
l</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#How-Make-Works"=
>How=20
      Make Works</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-goal_002c=
-default">goal,=20
      default</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#How-Make-Works"=
>How=20
      Make Works</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-goal_002c=
-default-1">goal,=20
      default</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rules">Rules</A=
></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-goal_002c=
-how-to-specify">goal,=20
      how to specify</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Goals">Goals</A=
></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-Guile">Gu=
ile</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Function"=
>Guile=20
      Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-Guile-1">=
Guile</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Integrati=
on">Guile=20
      Integration</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-Guile-exa=
mple">Guile=20
      example</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Example">=
Guile=20
      Example</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-guile_002=
c-conversion-of-types">guile,=20
      conversion of types</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Types">Gu=
ile=20
      Types</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_letter-H>H</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-home-dire=
ctory">home=20
      directory</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcards">Wild=
cards</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_letter-I>I</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-IEEE-Stan=
dard-1003_002e2">IEEE=20
      Standard 1003.2</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Overview">Overv=
iew</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-ifdef_002=
c-expansion">ifdef,=20
      expansion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Reading-Makefil=
es">Reading=20
      Makefiles</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-ifeq_002c=
-expansion">ifeq,=20
      expansion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Reading-Makefil=
es">Reading=20
      Makefiles</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-ifndef_00=
2c-expansion">ifndef,=20
      expansion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Reading-Makefil=
es">Reading=20
      Makefiles</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-ifneq_002=
c-expansion">ifneq,=20
      expansion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Reading-Makefil=
es">Reading=20
      Makefiles</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-implicit-=
rule">implicit=20
      rule</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rules"=
>Implicit=20
      Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-implicit-=
rule_002c-and-directory-search">implicit=20
      rule, and directory search</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit_002fSe=
arch">Implicit/Search</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-implicit-=
rule_002c-and-VPATH">implicit=20
      rule, and <CODE>VPATH</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit_002fSe=
arch">Implicit/Search</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-implicit-=
rule_002c-definition-of">implicit=20
      rule, definition of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Conten=
ts">Makefile=20
      Contents</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-implicit-=
rule_002c-expansion">implicit=20
      rule, expansion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Reading-Makefil=
es">Reading=20
      Makefiles</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-implicit-=
rule_002c-how-to-use">implicit=20
      rule, how to use</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Using-Implicit"=
>Using=20
      Implicit</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-implicit-=
rule_002c-introduction-to">implicit=20
      rule, introduction to</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#make-Deduces">m=
ake=20
      Deduces</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-implicit-=
rule_002c-predefined">implicit=20
      rule, predefined</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-implicit-=
rule_002c-search-algorithm">implicit=20
      rule, search algorithm</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rule-S=
earch">Implicit=20
      Rule Search</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-implicit-=
rules_002c-secondary-expansion-of">implicit=20
      rules, secondary expansion of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Secondary-Expan=
sion">Secondary=20
      Expansion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-included-=
makefiles_002c-default-directories">included=20
      makefiles, default directories</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Include">Includ=
e</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-including=
-_0028MAKEFILES-variable_0029">including=20
      (<CODE>MAKEFILES</CODE> variable)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#MAKEFILES-Varia=
ble">MAKEFILES=20
      Variable</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-including=
-_0028MAKEFILE_005fLIST-variable_0029">including=20
      (<CODE>MAKEFILE_LIST</CODE> variable)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Variabl=
es">Special=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-including=
-other-makefiles">including=20
      other makefiles</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Include">Includ=
e</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-incompati=
bilities">incompatibilities</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Missing">Missin=
g</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-Info_002c=
-rule-to-format">Info,=20
      rule to format</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-inheritan=
ce_002c-suppressing">inheritance,=20
      suppressing</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Suppressing-Inh=
eritance">Suppressing=20
      Inheritance</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-input-dur=
ing-parallel-execution">input=20
      during parallel execution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel-Input"=
>Parallel=20
      Input</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-install-_=
0028standard-target_0029"><CODE>install</CODE>=20
      <SPAN class=3Droman>(standard target)</SPAN></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Goals">Goals</A=
></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-installat=
ion-directories_002c-creating">installation=20
      directories, creating</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Directory-Varia=
bles">Directory=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-installat=
ions_002c-staged">installations,=20
      staged</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#DESTDIR">DESTDI=
R</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-interface=
-for-loaded-objects">interface=20
      for loaded objects</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Loaded-Object-A=
PI">Loaded=20
      Object API</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-intermedi=
ate-files">intermediate=20
      files</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Chained-Rules">=
Chained=20
      Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-intermedi=
ate-files_002c-preserving">intermediate=20
      files, preserving</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Chained-Rules">=
Chained=20
      Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-intermedi=
ate-targets_002c-explicit">intermediate=20
      targets, explicit</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
">Special=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-interrupt=
">interrupt</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Interrupts">Int=
errupts</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_letter-J>J</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-job-slots=
">job=20
      slots</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel">Paral=
lel</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-job-slots=
_002c-and-recursion">job=20
      slots, and recursion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-jobs_002c=
-limiting-based-on-load">jobs,=20
      limiting based on load</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel">Paral=
lel</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-joining-l=
ists-of-words">joining=20
      lists of words</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">File=20
      Name Functions</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_letter-K>K</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-killing-_=
0028interruption_0029">killing=20
      (interruption)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Interrupts">Int=
errupts</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_letter-L>L</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-last_002d=
resort-default-rules">last-resort=20
      default rules</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Last-Resort">La=
st=20
      Resort</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-ld"><CODE=
>ld</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-lex"><COD=
E>lex</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-lex-1"><C=
ODE>lex</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-Lex_002c-=
rule-to-run">Lex,=20
      rule to run</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-libraries=
-for-linking_002c-directory-search">libraries=20
      for linking, directory search</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Libraries_002fS=
earch">Libraries/Search</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-library-a=
rchive_002c-suffix-rule-for">library=20
      archive, suffix rule for</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Suffix-=
Rules">Archive=20
      Suffix Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-limiting-=
jobs-based-on-load">limiting=20
      jobs based on load</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel">Paral=
lel</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-link-libr=
aries_002c-and-directory-search">link=20
      libraries, and directory search</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Libraries_002fS=
earch">Libraries/Search</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-link-libr=
aries_002c-patterns-matching">link=20
      libraries, patterns matching</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Libraries_002fS=
earch">Libraries/Search</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-linking_0=
02c-predefined-rule-for">linking,=20
      predefined rule for</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-lint"><CO=
DE>lint</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-lint-1"><=
CODE>lint</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-lint_002c=
-rule-to-run"><CODE>lint</CODE>,=20
      rule to run</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-list-of-a=
ll-prerequisites">list=20
      of all prerequisites</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-list-of-c=
hanged-prerequisites">list=20
      of changed prerequisites</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-load-aver=
age">load=20
      average</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel">Paral=
lel</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-load-dire=
ctive">load=20
      directive</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#load-Directive"=
>load=20
      Directive</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-loaded-ob=
ject-API">loaded=20
      object API</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Loaded-Object-A=
PI">Loaded=20
      Object API</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-loaded-ob=
ject-example">loaded=20
      object example</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Loaded-Object-E=
xample">Loaded=20
      Object Example</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-loaded-ob=
ject-licensing">loaded=20
      object licensing</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Loaded-Object-A=
PI">Loaded=20
      Object API</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-loaded-ob=
jects">loaded=20
      objects</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Loading-Objects=
">Loading=20
      Objects</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-loaded-ob=
jects_002c-remaking-of">loaded=20
      objects, remaking of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Remaking-Loaded=
-Objects">Remaking=20
      Loaded Objects</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-long-line=
s_002c-splitting">long=20
      lines, splitting</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Splitting-Lines=
">Splitting=20
      Lines</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-loops-in-=
variable-expansion">loops=20
      in variable expansion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavors">Flavor=
s</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-lpr-_0028=
shell-command_0029"><CODE>lpr</CODE>=20
      (shell command)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcard-Exampl=
es">Wildcard=20
      Examples</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-lpr-_0028=
shell-command_0029-1"><CODE>lpr</CODE>=20
      (shell command)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Empty-Targets">=
Empty=20
      Targets</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_letter-M>M</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-m2c"><COD=
E>m2c</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-m2c-1"><C=
ODE>m2c</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-macro">ma=
cro</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Using-Variables=
">Using=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-make-depe=
nd"><CODE>make=20
      depend</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Prere=
quisites">Automatic=20
      Prerequisites</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-make-exte=
nsions">make=20
      extensions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Extending-make"=
>Extending=20
      make</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-make-inte=
rface-to-guile">make=20
      interface to guile</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Interface=
">Guile=20
      Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-make-proc=
edures-in-guile">make=20
      procedures in guile</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Interface=
">Guile=20
      Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-makefile"=
>makefile</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Introduction">I=
ntroduction</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-makefile-=
name">makefile=20
      name</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Names"=
>Makefile=20
      Names</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-makefile-=
name_002c-how-to-specify">makefile=20
      name, how to specify</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Names"=
>Makefile=20
      Names</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-makefile-=
rule-parts">makefile=20
      rule parts</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rule-Introducti=
on">Rule=20
      Introduction</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-makefile-=
syntax_002c-evaluating">makefile=20
      syntax, evaluating</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Eval-Function">=
Eval=20
      Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-makefile_=
002c-and-MAKEFILES-variable">makefile,=20
      and <CODE>MAKEFILES</CODE> variable</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#MAKEFILES-Varia=
ble">MAKEFILES=20
      Variable</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-makefile_=
002c-conventions-for">makefile,=20
      conventions for</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Conven=
tions">Makefile=20
      Conventions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-makefile_=
002c-how-make-processes">makefile,=20
      how <CODE>make</CODE> processes</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#How-Make-Works"=
>How=20
      Make Works</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-makefile_=
002c-how-to-write">makefile,=20
      how to write</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefiles">Make=
files</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-makefile_=
002c-including">makefile,=20
      including</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Include">Includ=
e</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-makefile_=
002c-overriding">makefile,=20
      overriding</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Overriding-Make=
files">Overriding=20
      Makefiles</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-makefile_=
002c-parsing">makefile,=20
      parsing</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Reading-Makefil=
es">Reading=20
      Makefiles</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-makefile_=
002c-remaking-of">makefile,=20
      remaking of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Remaking-Makefi=
les">Remaking=20
      Makefiles</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-makefile_=
002c-simple">makefile,=20
      simple</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Simple-Makefile=
">Simple=20
      Makefile</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-makefiles=
_002c-and-MAKEFILE_005fLIST-variable">makefiles,=20
      and <CODE>MAKEFILE_LIST</CODE> variable</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Variabl=
es">Special=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-makefiles=
_002c-and-special-variables">makefiles,=20
      and special variables</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Variabl=
es">Special=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-makeinfo"=
><CODE>makeinfo</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-makeinfo-=
1"><CODE>makeinfo</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-match_002=
danything-rule">match-anything=20
      rule</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Match_002dAnyth=
ing-Rules">Match-Anything=20
      Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-match_002=
danything-rule_002c-used-to-override">match-anything=20
      rule, used to override</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Overriding-Make=
files">Overriding=20
      Makefiles</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-missing-f=
eatures">missing=20
      features</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Missing">Missin=
g</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-mistakes-=
with-wildcards">mistakes=20
      with wildcards</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcard-Pitfal=
l">Wildcard=20
      Pitfall</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-modified-=
variable-reference">modified=20
      variable reference</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Substitution-Re=
fs">Substitution=20
      Refs</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-Modula_00=
2d2_002c-rule-to-compile">Modula-2,=20
      rule to compile</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-mostlycle=
an-_0028standard-target_0029"><CODE>mostlyclean</CODE>=20
      <SPAN class=3Droman>(standard target)</SPAN></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Goals">Goals</A=
></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-multi_002=
dline-variable-definition">multi-line=20
      variable definition</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Multi_002dLine"=
>Multi-Line</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-multiple-=
rules-for-one-target">multiple=20
      rules for one target</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Multiple-Rules"=
>Multiple=20
      Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-multiple-=
rules-for-one-target-_0028_003a_003a_0029">multiple=20
      rules for one target (<CODE>::</CODE>)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Double_002dColo=
n">Double-Colon</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-multiple-=
targets">multiple=20
      targets</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Multiple-Target=
s">Multiple=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-multiple-=
targets_002c-in-pattern-rule">multiple=20
      targets, in pattern rule</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Intro">=
Pattern=20
      Intro</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_letter-N>N</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-name-of-m=
akefile">name=20
      of makefile</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Names"=
>Makefile=20
      Names</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-name-of-m=
akefile_002c-how-to-specify">name=20
      of makefile, how to specify</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Names"=
>Makefile=20
      Names</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-nested-va=
riable-reference">nested=20
      variable reference</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Computed-Names"=
>Computed=20
      Names</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-newline_0=
02c-quoting_002c-in-makefile">newline,=20
      quoting, in makefile</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Simple-Makefile=
">Simple=20
      Makefile</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-newline_0=
02c-quoting_002c-in-recipes">newline,=20
      quoting, in recipes</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Splitting-Recip=
e-Lines">Splitting=20
      Recipe Lines</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-nondirect=
ory-part">nondirectory=20
      part</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">File=20
      Name Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-normal-pr=
erequisites">normal=20
      prerequisites</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Prerequisite-Ty=
pes">Prerequisite=20
      Types</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_letter-O>O</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-obj"><COD=
E>obj</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables-Simpl=
ify">Variables=20
      Simplify</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-OBJ"><COD=
E>OBJ</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables-Simpl=
ify">Variables=20
      Simplify</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-objects">=
<CODE>objects</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables-Simpl=
ify">Variables=20
      Simplify</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-OBJECTS">=
<CODE>OBJECTS</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables-Simpl=
ify">Variables=20
      Simplify</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-objects_0=
02c-loaded">objects,=20
      loaded</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Loading-Objects=
">Loading=20
      Objects</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-objs"><CO=
DE>objs</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables-Simpl=
ify">Variables=20
      Simplify</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-OBJS"><CO=
DE>OBJS</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables-Simpl=
ify">Variables=20
      Simplify</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-old_002df=
ashioned-suffix-rules">old-fashioned=20
      suffix rules</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Suffix-Rules">S=
uffix=20
      Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-options">=
options</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-options_0=
02c-and-recursion">options,=20
      and recursion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-options_0=
02c-setting-from-environment">options,=20
      setting from environment</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-options_0=
02c-setting-in-makefiles">options,=20
      setting in makefiles</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-order-of-=
pattern-rules">order=20
      of pattern rules</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Match">=
Pattern=20
      Match</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-order_002=
donly-prerequisites">order-only=20
      prerequisites</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Prerequisite-Ty=
pes">Prerequisite=20
      Types</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-origin-of=
-variable">origin=20
      of variable</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Origin-Function=
">Origin=20
      Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-output-du=
ring-parallel-execution">output=20
      during parallel execution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel-Output=
">Parallel=20
      Output</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-output-du=
ring-parallel-execution-1">output=20
      during parallel execution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-overridin=
g-makefiles">overriding=20
      makefiles</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Overriding-Make=
files">Overriding=20
      Makefiles</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-overridin=
g-variables-with-arguments">overriding=20
      variables with arguments</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Overriding">Ove=
rriding</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-overridin=
g-with-override">overriding=20
      with <CODE>override</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Override-Direct=
ive">Override=20
      Directive</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_letter-P>P</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-parallel-=
execution">parallel=20
      execution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel">Paral=
lel</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-parallel-=
execution_002c-and-archive-update">parallel=20
      execution, and archive update</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Pitfall=
s">Archive=20
      Pitfalls</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-parallel-=
execution_002c-input-during">parallel=20
      execution, input during</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel-Input"=
>Parallel=20
      Input</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-parallel-=
execution_002c-output-during">parallel=20
      execution, output during</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel-Output=
">Parallel=20
      Output</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-parallel-=
execution_002c-output-during-1">parallel=20
      execution, output during</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-parallel-=
execution_002c-overriding">parallel=20
      execution, overriding</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
">Special=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-parts-of-=
makefile-rule">parts=20
      of makefile rule</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rule-Introducti=
on">Rule=20
      Introduction</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-Pascal_00=
2c-rule-to-compile">Pascal,=20
      rule to compile</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-pattern-r=
ule">pattern=20
      rule</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Intro">=
Pattern=20
      Intro</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-pattern-r=
ule_002c-expansion">pattern=20
      rule, expansion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Reading-Makefil=
es">Reading=20
      Makefiles</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-pattern-r=
ules_002c-order-of">pattern=20
      rules, order of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Match">=
Pattern=20
      Match</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-pattern-r=
ules_002c-static-_0028not-implicit_0029">pattern=20
      rules, static (not implicit)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-Pattern"=
>Static=20
      Pattern</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-pattern-r=
ules_002c-static_002c-syntax-of">pattern=20
      rules, static, syntax of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-Usage">S=
tatic=20
      Usage</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-pattern_0=
02dspecific-variables">pattern-specific=20
      variables</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern_002dspe=
cific">Pattern-specific</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-pc"><CODE=
>pc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-pc-1"><CO=
DE>pc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-phony-tar=
gets">phony=20
      targets</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Phony-Targets">=
Phony=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-phony-tar=
gets-and-recipe-execution">phony=20
      targets and recipe execution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution">Instead=20
      of Execution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-pitfalls-=
of-wildcards">pitfalls=20
      of wildcards</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcard-Pitfal=
l">Wildcard=20
      Pitfall</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-plugin_00=
5fis_005fGPL_005fcompatible">plugin_is_GPL_compatible</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Loaded-Object-A=
PI">Loaded=20
      Object API</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-portabili=
ty">portability</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Features">Featu=
res</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-POSIX">PO=
SIX</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Overview">Overv=
iew</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-POSIX-1">=
POSIX</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-POSIX_002=
dconforming-mode_002c-setting">POSIX-conforming=20
      mode, setting</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
">Special=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-post_002d=
installation-commands">post-installation=20
      commands</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Install-Command=
-Categories">Install=20
      Command Categories</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-pre_002di=
nstallation-commands">pre-installation=20
      commands</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Install-Command=
-Categories">Install=20
      Command Categories</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-precious-=
targets">precious=20
      targets</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
">Special=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-predefine=
d-rules-and-variables_002c-printing">predefined=20
      rules and variables, printing</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-prefix_00=
2c-adding">prefix,=20
      adding</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">File=20
      Name Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-prerequis=
ite">prerequisite</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rules">Rules</A=
></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-prerequis=
ite-pattern_002c-implicit">prerequisite=20
      pattern, implicit</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Intro">=
Pattern=20
      Intro</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-prerequis=
ite-pattern_002c-static-_0028not-implicit_0029">prerequisite=20
      pattern, static (not implicit)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-Usage">S=
tatic=20
      Usage</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-prerequis=
ite-types">prerequisite=20
      types</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Prerequisite-Ty=
pes">Prerequisite=20
      Types</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-prerequis=
ite_002c-expansion">prerequisite,=20
      expansion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Reading-Makefil=
es">Reading=20
      Makefiles</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-prerequis=
ites">prerequisites</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rule-Syntax">Ru=
le=20
      Syntax</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-prerequis=
ites_002c-and-automatic-variables">prerequisites,=20
      and automatic variables</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-prerequis=
ites_002c-automatic-generation">prerequisites,=20
      automatic generation</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Include">Includ=
e</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-prerequis=
ites_002c-automatic-generation-1">prerequisites,=20
      automatic generation</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Prere=
quisites">Automatic=20
      Prerequisites</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-prerequis=
ites_002c-introduction-to">prerequisites,=20
      introduction to</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rule-Introducti=
on">Rule=20
      Introduction</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-prerequis=
ites_002c-list-of-all">prerequisites,=20
      list of all</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-prerequis=
ites_002c-list-of-changed">prerequisites,=20
      list of changed</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-prerequis=
ites_002c-normal">prerequisites,=20
      normal</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Prerequisite-Ty=
pes">Prerequisite=20
      Types</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-prerequis=
ites_002c-order_002donly">prerequisites,=20
      order-only</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Prerequisite-Ty=
pes">Prerequisite=20
      Types</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-prerequis=
ites_002c-varying-_0028static-pattern_0029">prerequisites,=20
      varying (static pattern)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-Pattern"=
>Static=20
      Pattern</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-preservin=
g-intermediate-files">preserving=20
      intermediate files</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Chained-Rules">=
Chained=20
      Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-preservin=
g-with-_002ePRECIOUS">preserving=20
      with <CODE>.PRECIOUS</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
">Special=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-preservin=
g-with-_002ePRECIOUS-1">preserving=20
      with <CODE>.PRECIOUS</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Chained-Rules">=
Chained=20
      Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-preservin=
g-with-_002eSECONDARY">preserving=20
      with <CODE>.SECONDARY</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
">Special=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-print-_00=
28standard-target_0029"><CODE>print</CODE>=20
      <SPAN class=3Droman>(standard target)</SPAN></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Goals">Goals</A=
></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-print-tar=
get"><CODE>print</CODE>=20
      target</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcard-Exampl=
es">Wildcard=20
      Examples</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-print-tar=
get-1"><CODE>print</CODE>=20
      target</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Empty-Targets">=
Empty=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-printing-=
directories">printing=20
      directories</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#g_t_002dw-Optio=
n">-w=20
      Option</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-printing-=
messages">printing=20
      messages</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Make-Control-Fu=
nctions">Make=20
      Control Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-printing-=
of-recipes">printing=20
      of recipes</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Echoing">Echoin=
g</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-printing-=
user-warnings">printing=20
      user warnings</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Make-Control-Fu=
nctions">Make=20
      Control Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-problems-=
and-bugs_002c-reporting">problems=20
      and bugs, reporting</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Bugs">Bugs</A><=
/TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-problems-=
with-wildcards">problems=20
      with wildcards</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcard-Pitfal=
l">Wildcard=20
      Pitfall</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-processin=
g-a-makefile">processing=20
      a makefile</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#How-Make-Works"=
>How=20
      Make Works</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_letter-Q>Q</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-question-=
mode">question=20
      mode</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution">Instead=20
      of Execution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-quoting-_=
0025_002c-in-patsubst">quoting=20
      <CODE>%</CODE>, in <CODE>patsubst</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-quoting-_=
0025_002c-in-static-pattern">quoting=20
      <CODE>%</CODE>, in static pattern</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-Usage">S=
tatic=20
      Usage</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-quoting-_=
0025_002c-in-vpath">quoting=20
      <CODE>%</CODE>, in <CODE>vpath</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Selective-Searc=
h">Selective=20
      Search</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-quoting-n=
ewline_002c-in-makefile">quoting=20
      newline, in makefile</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Simple-Makefile=
">Simple=20
      Makefile</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-quoting-n=
ewline_002c-in-recipes">quoting=20
      newline, in recipes</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Splitting-Recip=
e-Lines">Splitting=20
      Recipe Lines</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_letter-R>R</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-Ratfor_00=
2c-rule-to-compile">Ratfor,=20
      rule to compile</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-RCS_002c-=
rule-to-extract-from">RCS,=20
      rule to extract from</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-reading-m=
akefiles">reading=20
      makefiles</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Reading-Makefil=
es">Reading=20
      Makefiles</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-README"><=
CODE>README</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Names"=
>Makefile=20
      Names</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-realclean=
-_0028standard-target_0029"><CODE>realclean</CODE>=20
      <SPAN class=3Droman>(standard target)</SPAN></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Goals">Goals</A=
></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-realpath"=
>realpath</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">File=20
      Name Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recipe">r=
ecipe</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Simple-Makefile=
">Simple=20
      Makefile</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recipe-ex=
ecution_002c-single-invocation">recipe=20
      execution, single invocation</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
">Special=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recipe-li=
nes_002c-single-shell">recipe=20
      lines, single shell</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#One-Shell">One =

      Shell</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recipe-sy=
ntax">recipe=20
      syntax</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipe-Syntax">=
Recipe=20
      Syntax</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recipe_00=
2c-execution">recipe,=20
      execution</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Execution">Exec=
ution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recipes">=
recipes</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rule-Syntax">Ru=
le=20
      Syntax</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recipes-1=
">recipes</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipes">Recipe=
s</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recipes-s=
etting-shell-variables">recipes=20
      setting shell variables</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Execution">Exec=
ution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recipes_0=
02c-and-directory-search">recipes,=20
      and directory search</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipes_002fSea=
rch">Recipes/Search</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recipes_0=
02c-backslash-_0028_005c_0029-in">recipes,=20
      backslash (<CODE>\</CODE>) in</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Splitting-Recip=
e-Lines">Splitting=20
      Recipe Lines</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recipes_0=
02c-canned">recipes,=20
      canned</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Canned-Recipes"=
>Canned=20
      Recipes</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recipes_0=
02c-comments-in">recipes,=20
      comments in</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipe-Syntax">=
Recipe=20
      Syntax</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recipes_0=
02c-echoing">recipes,=20
      echoing</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Echoing">Echoin=
g</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recipes_0=
02c-empty">recipes,=20
      empty</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Empty-Recipes">=
Empty=20
      Recipes</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recipes_0=
02c-errors-in">recipes,=20
      errors in</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Errors">Errors<=
/A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recipes_0=
02c-execution-in-parallel">recipes,=20
      execution in parallel</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel">Paral=
lel</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recipes_0=
02c-how-to-write">recipes,=20
      how to write</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipes">Recipe=
s</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recipes_0=
02c-instead-of-executing">recipes,=20
      instead of executing</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution">Instead=20
      of Execution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recipes_0=
02c-introduction-to">recipes,=20
      introduction to</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rule-Introducti=
on">Rule=20
      Introduction</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recipes_0=
02c-quoting-newlines-in">recipes,=20
      quoting newlines in</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Splitting-Recip=
e-Lines">Splitting=20
      Recipe Lines</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recipes_0=
02c-splitting">recipes,=20
      splitting</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Splitting-Recip=
e-Lines">Splitting=20
      Recipe Lines</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recipes_0=
02c-using-variables-in">recipes,=20
      using variables in</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables-in-Re=
cipes">Variables=20
      in Recipes</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recompila=
tion">recompilation</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Introduction">I=
ntroduction</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recompila=
tion_002c-avoiding">recompilation,=20
      avoiding</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Avoiding-Compil=
ation">Avoiding=20
      Compilation</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recording=
-events-with-empty-targets">recording=20
      events with empty targets</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Empty-Targets">=
Empty=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recursion=
">recursion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Recursion">Recu=
rsion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recursion=
_002c-and-_002dC">recursion,=20
      and <CODE>-C</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recursion=
_002c-and-_002df">recursion,=20
      and <CODE>-f</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recursion=
_002c-and-_002dj">recursion,=20
      and <CODE>-j</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recursion=
_002c-and-_002do">recursion,=20
      and <CODE>-o</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recursion=
_002c-and-_002dt">recursion,=20
      and <CODE>-t</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#MAKE-Variable">=
MAKE=20
      Variable</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recursion=
_002c-and-_002dW">recursion,=20
      and <CODE>-W</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recursion=
_002c-and-_002dw">recursion,=20
      and <CODE>-w</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#g_t_002dw-Optio=
n">-w=20
      Option</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recursion=
_002c-and-command-line-variable-definitions">recursion,=20
      and command line variable definitions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recursion=
_002c-and-environment">recursion,=20
      and environment</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables_002fR=
ecursion">Variables/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recursion=
_002c-and-MAKE-variable">recursion,=20
      and <CODE>MAKE</CODE> variable</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#MAKE-Variable">=
MAKE=20
      Variable</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recursion=
_002c-and-MAKEFILES-variable">recursion,=20
      and <CODE>MAKEFILES</CODE> variable</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#MAKEFILES-Varia=
ble">MAKEFILES=20
      Variable</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recursion=
_002c-and-options">recursion,=20
      and options</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recursion=
_002c-and-printing-directories">recursion,=20
      and printing directories</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#g_t_002dw-Optio=
n">-w=20
      Option</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recursion=
_002c-and-variables">recursion,=20
      and variables</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables_002fR=
ecursion">Variables/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recursion=
_002c-level-of">recursion,=20
      level of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables_002fR=
ecursion">Variables/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recursive=
-variable-expansion">recursive=20
      variable expansion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Using-Variables=
">Using=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recursive=
-variable-expansion-1">recursive=20
      variable expansion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavors">Flavor=
s</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-recursive=
ly-expanded-variables">recursively=20
      expanded variables</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavors">Flavor=
s</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-reference=
-to-variables">reference=20
      to variables</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Reference">Refe=
rence</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-reference=
-to-variables-1">reference=20
      to variables</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Advanced">Advan=
ced</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-relinking=
">relinking</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#How-Make-Works"=
>How=20
      Make Works</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-remaking-=
loaded-objects">remaking=20
      loaded objects</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Remaking-Loaded=
-Objects">Remaking=20
      Loaded Objects</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-remaking-=
makefiles">remaking=20
      makefiles</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Remaking-Makefi=
les">Remaking=20
      Makefiles</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-removal-o=
f-target-files">removal=20
      of target files</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Errors">Errors<=
/A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-removal-o=
f-target-files-1">removal=20
      of target files</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Interrupts">Int=
errupts</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-removing-=
duplicate-words">removing=20
      duplicate words</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-removing-=
targets-on-failure">removing=20
      targets on failure</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
">Special=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-removing_=
002c-to-clean-up">removing,=20
      to clean up</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Cleanup">Cleanu=
p</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-reporting=
-bugs">reporting=20
      bugs</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Bugs">Bugs</A><=
/TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-rm"><CODE=
>rm</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-rm-_0028s=
hell-command_0029"><CODE>rm</CODE>=20
      (shell command)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Simple-Makefile=
">Simple=20
      Makefile</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-rm-_0028s=
hell-command_0029-1"><CODE>rm</CODE>=20
      (shell command)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcard-Exampl=
es">Wildcard=20
      Examples</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-rm-_0028s=
hell-command_0029-2"><CODE>rm</CODE>=20
      (shell command)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Phony-Targets">=
Phony=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-rm-_0028s=
hell-command_0029-3"><CODE>rm</CODE>=20
      (shell command)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Errors">Errors<=
/A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-rule-prer=
equisites">rule=20
      prerequisites</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rule-Syntax">Ru=
le=20
      Syntax</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-rule-synt=
ax">rule=20
      syntax</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rule-Syntax">Ru=
le=20
      Syntax</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-rule-targ=
ets">rule=20
      targets</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rule-Syntax">Ru=
le=20
      Syntax</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-rule_002c=
-double_002dcolon-_0028_003a_003a_0029">rule,=20
      double-colon (<CODE>::</CODE>)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Double_002dColo=
n">Double-Colon</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-rule_002c=
-explicit_002c-definition-of">rule,=20
      explicit, definition of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Conten=
ts">Makefile=20
      Contents</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-rule_002c=
-how-to-write">rule,=20
      how to write</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rules">Rules</A=
></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-rule_002c=
-implicit">rule,=20
      implicit</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rules"=
>Implicit=20
      Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-rule_002c=
-implicit_002c-and-directory-search">rule,=20
      implicit, and directory search</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit_002fSe=
arch">Implicit/Search</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-rule_002c=
-implicit_002c-and-VPATH">rule,=20
      implicit, and <CODE>VPATH</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit_002fSe=
arch">Implicit/Search</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-rule_002c=
-implicit_002c-chains-of">rule,=20
      implicit, chains of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Chained-Rules">=
Chained=20
      Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-rule_002c=
-implicit_002c-definition-of">rule,=20
      implicit, definition of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Conten=
ts">Makefile=20
      Contents</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-rule_002c=
-implicit_002c-how-to-use">rule,=20
      implicit, how to use</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Using-Implicit"=
>Using=20
      Implicit</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-rule_002c=
-implicit_002c-introduction-to">rule,=20
      implicit, introduction to</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#make-Deduces">m=
ake=20
      Deduces</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-rule_002c=
-implicit_002c-predefined">rule,=20
      implicit, predefined</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-rule_002c=
-introduction-to">rule,=20
      introduction to</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rule-Introducti=
on">Rule=20
      Introduction</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-rule_002c=
-multiple-for-one-target">rule,=20
      multiple for one target</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Multiple-Rules"=
>Multiple=20
      Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-rule_002c=
-no-recipe-or-prerequisites">rule,=20
      no recipe or prerequisites</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Force-Targets">=
Force=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-rule_002c=
-pattern">rule,=20
      pattern</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Intro">=
Pattern=20
      Intro</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-rule_002c=
-static-pattern">rule,=20
      static pattern</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-Pattern"=
>Static=20
      Pattern</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-rule_002c=
-static-pattern-versus-implicit">rule,=20
      static pattern versus implicit</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-versus-I=
mplicit">Static=20
      versus Implicit</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-rule_002c=
-with-multiple-targets">rule,=20
      with multiple targets</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Multiple-Target=
s">Multiple=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-rules_002=
c-and-_0024">rules,=20
      and <CODE>$</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rule-Syntax">Ru=
le=20
      Syntax</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_letter-S>S</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-s_002e-_0=
028SCCS-file-prefix_0029"><CODE>s.=20
      <SPAN class=3Droman>(SCCS file prefix)</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-SCCS_002c=
-rule-to-extract-from">SCCS,=20
      rule to extract from</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-search-al=
gorithm_002c-implicit-rule">search=20
      algorithm, implicit rule</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Rule-S=
earch">Implicit=20
      Rule Search</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-search-pa=
th-for-prerequisites-_0028VPATH_0029">search=20
      path for prerequisites (<CODE>VPATH</CODE>)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Directory-Searc=
h">Directory=20
      Search</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-search-pa=
th-for-prerequisites-_0028VPATH_0029_002c-and-implicit-rules">search=20
      path for prerequisites (<CODE>VPATH</CODE>), and implicit =
rules</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit_002fSe=
arch">Implicit/Search</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-search-pa=
th-for-prerequisites-_0028VPATH_0029_002c-and-link-libraries">search=20
      path for prerequisites (<CODE>VPATH</CODE>), and link =
libraries</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Libraries_002fS=
earch">Libraries/Search</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-searching=
-for-strings">searching=20
      for strings</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-secondary=
-expansion">secondary=20
      expansion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Secondary-Expan=
sion">Secondary=20
      Expansion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-secondary=
-expansion-and-explicit-rules">secondary=20
      expansion and explicit rules</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Secondary-Expan=
sion">Secondary=20
      Expansion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-secondary=
-expansion-and-implicit-rules">secondary=20
      expansion and implicit rules</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Secondary-Expan=
sion">Secondary=20
      Expansion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-secondary=
-expansion-and-static-pattern-rules">secondary=20
      expansion and static pattern rules</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Secondary-Expan=
sion">Secondary=20
      Expansion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-secondary=
-files">secondary=20
      files</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Chained-Rules">=
Chained=20
      Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-secondary=
-targets">secondary=20
      targets</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
">Special=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-sed-_0028=
shell-command_0029"><CODE>sed</CODE>=20
      (shell command)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Prere=
quisites">Automatic=20
      Prerequisites</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-selecting=
-a-word">selecting=20
      a word</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-selecting=
-word-lists">selecting=20
      word lists</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-sequences=
-of-commands">sequences=20
      of commands</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Canned-Recipes"=
>Canned=20
      Recipes</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-setting-o=
ptions-from-environment">setting=20
      options from environment</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-setting-o=
ptions-in-makefiles">setting=20
      options in makefiles</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-setting-v=
ariables">setting=20
      variables</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Setting">Settin=
g</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-several-r=
ules-for-one-target">several=20
      rules for one target</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Multiple-Rules"=
>Multiple=20
      Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-several-t=
argets-in-a-rule">several=20
      targets in a rule</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Multiple-Target=
s">Multiple=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-shar-_002=
8standard-target_0029"><CODE>shar</CODE>=20
      <SPAN class=3Droman>(standard target)</SPAN></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Goals">Goals</A=
></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-shell-com=
mand_002c-function-for">shell=20
      command, function for</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Shell-Function"=
>Shell=20
      Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-shell-fil=
e-name-pattern-_0028in-include_0029">shell=20
      file name pattern (in <CODE>include</CODE>)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Include">Includ=
e</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-shell-var=
iables_002c-setting-in-recipes">shell=20
      variables, setting in recipes</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Execution">Exec=
ution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-shell-wil=
dcards-_0028in-include_0029">shell=20
      wildcards (in <CODE>include</CODE>)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Include">Includ=
e</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-shell_002=
c-choosing-the">shell,=20
      choosing the</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Choosing-the-Sh=
ell">Choosing=20
      the Shell</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-SHELL_002=
c-exported-value">SHELL,=20
      exported value</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables_002fR=
ecursion">Variables/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-SHELL_002=
c-import-from-environment">SHELL,=20
      import from environment</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Environment">En=
vironment</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-shell_002=
c-in-DOS-and-Windows">shell,=20
      in DOS and Windows</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Choosing-the-Sh=
ell">Choosing=20
      the Shell</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-SHELL_002=
c-MS_002dDOS-specifics"><CODE>SHELL</CODE>,=20
      MS-DOS specifics</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Choosing-the-Sh=
ell">Choosing=20
      the Shell</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-SHELL_002=
c-value-of"><CODE>SHELL</CODE>,=20
      value of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Choosing-the-Sh=
ell">Choosing=20
      the Shell</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-signal">s=
ignal</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Interrupts">Int=
errupts</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-silent-op=
eration">silent=20
      operation</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Echoing">Echoin=
g</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-simple-ma=
kefile">simple=20
      makefile</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Simple-Makefile=
">Simple=20
      Makefile</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-simple-va=
riable-expansion">simple=20
      variable expansion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Using-Variables=
">Using=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-simplifyi=
ng-with-variables">simplifying=20
      with variables</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables-Simpl=
ify">Variables=20
      Simplify</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-simply-ex=
panded-variables">simply=20
      expanded variables</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavors">Flavor=
s</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-sorting-w=
ords">sorting=20
      words</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-spaces_00=
2c-in-variable-values">spaces,=20
      in variable values</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavors">Flavor=
s</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-spaces_00=
2c-stripping">spaces,=20
      stripping</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-special-t=
argets">special=20
      targets</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
">Special=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-special-v=
ariables">special=20
      variables</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Variabl=
es">Special=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-specifyin=
g-makefile-name">specifying=20
      makefile name</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Names"=
>Makefile=20
      Names</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-splitting=
-long-lines">splitting=20
      long lines</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Splitting-Lines=
">Splitting=20
      Lines</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-splitting=
-recipes">splitting=20
      recipes</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Splitting-Recip=
e-Lines">Splitting=20
      Recipe Lines</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-staged-in=
stalls">staged=20
      installs</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#DESTDIR">DESTDI=
R</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-standard-=
input">standard=20
      input</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Parallel-Input"=
>Parallel=20
      Input</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-standards=
-conformance">standards=20
      conformance</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Overview">Overv=
iew</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-standards=
-for-makefiles">standards=20
      for makefiles</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Conven=
tions">Makefile=20
      Conventions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-static-pa=
ttern-rule">static=20
      pattern rule</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-Pattern"=
>Static=20
      Pattern</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-static-pa=
ttern-rule_002c-syntax-of">static=20
      pattern rule, syntax of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-Usage">S=
tatic=20
      Usage</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-static-pa=
ttern-rule_002c-versus-implicit">static=20
      pattern rule, versus implicit</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-versus-I=
mplicit">Static=20
      versus Implicit</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-static-pa=
ttern-rules_002c-secondary-expansion-of">static=20
      pattern rules, secondary expansion of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Secondary-Expan=
sion">Secondary=20
      Expansion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-stem">ste=
m</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-Usage">S=
tatic=20
      Usage</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-stem-1">s=
tem</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Match">=
Pattern=20
      Match</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-stem_002c=
-shortest">stem,=20
      shortest</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Match">=
Pattern=20
      Match</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-stem_002c=
-variable-for">stem,=20
      variable for</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-stopping-=
make">stopping=20
      make</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Make-Control-Fu=
nctions">Make=20
      Control Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-strings_0=
02c-searching-for">strings,=20
      searching for</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-stripping=
-whitespace">stripping=20
      whitespace</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-sub_002dm=
ake">sub-<CODE>make</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables_002fR=
ecursion">Variables/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-subdirect=
ories_002c-recursion-for">subdirectories,=20
      recursion for</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Recursion">Recu=
rsion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-substitut=
ion-variable-reference">substitution=20
      variable reference</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Substitution-Re=
fs">Substitution=20
      Refs</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-suffix-ru=
le">suffix=20
      rule</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Suffix-Rules">S=
uffix=20
      Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-suffix-ru=
le_002c-for-archive">suffix=20
      rule, for archive</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Suffix-=
Rules">Archive=20
      Suffix Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-suffix_00=
2c-adding">suffix,=20
      adding</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">File=20
      Name Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-suffix_00=
2c-function-to-find">suffix,=20
      function to find</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">File=20
      Name Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-suffix_00=
2c-substituting-in-variables">suffix,=20
      substituting in variables</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Substitution-Re=
fs">Substitution=20
      Refs</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-suppressi=
ng-inheritance">suppressing=20
      inheritance</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Suppressing-Inh=
eritance">Suppressing=20
      Inheritance</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-switches"=
>switches</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-symbol-di=
rectories_002c-updating-archive">symbol=20
      directories, updating archive</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Symbols=
">Archive=20
      Symbols</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-syntax-of=
-recipe">syntax=20
      of recipe</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipe-Syntax">=
Recipe=20
      Syntax</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-syntax-of=
-rules">syntax=20
      of rules</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rule-Syntax">Ru=
le=20
      Syntax</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_letter-T>T</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-tab-chara=
cter-_0028in-commands_0029">tab=20
      character (in commands)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rule-Syntax">Ru=
le=20
      Syntax</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-tabs-in-r=
ules">tabs=20
      in rules</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rule-Introducti=
on">Rule=20
      Introduction</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-TAGS-_002=
8standard-target_0029"><CODE>TAGS</CODE>=20
      <SPAN class=3Droman>(standard target)</SPAN></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Goals">Goals</A=
></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-tangle"><=
CODE>tangle</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-tangle-1"=
><CODE>tangle</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-tar-_0028=
standard-target_0029"><CODE>tar</CODE>=20
      <SPAN class=3Droman>(standard target)</SPAN></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Goals">Goals</A=
></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-target">t=
arget</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rules">Rules</A=
></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-target-pa=
ttern_002c-implicit">target=20
      pattern, implicit</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Intro">=
Pattern=20
      Intro</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-target-pa=
ttern_002c-static-_0028not-implicit_0029">target=20
      pattern, static (not implicit)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-Usage">S=
tatic=20
      Usage</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-target_00=
2c-deleting-on-error">target,=20
      deleting on error</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Errors">Errors<=
/A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-target_00=
2c-deleting-on-interrupt">target,=20
      deleting on interrupt</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Interrupts">Int=
errupts</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-target_00=
2c-expansion">target,=20
      expansion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Reading-Makefil=
es">Reading=20
      Makefiles</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-target_00=
2c-multiple-in-pattern-rule">target,=20
      multiple in pattern rule</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern-Intro">=
Pattern=20
      Intro</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-target_00=
2c-multiple-rules-for-one">target,=20
      multiple rules for one</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Multiple-Rules"=
>Multiple=20
      Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-target_00=
2c-touching">target,=20
      touching</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution">Instead=20
      of Execution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-target_00=
2dspecific-variables">target-specific=20
      variables</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Target_002dspec=
ific">Target-specific</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-targets">=
targets</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rule-Syntax">Ru=
le=20
      Syntax</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-targets-w=
ithout-a-file">targets=20
      without a file</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Phony-Targets">=
Phony=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-targets_0=
02c-built_002din-special">targets,=20
      built-in special</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
">Special=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-targets_0=
02c-empty">targets,=20
      empty</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Empty-Targets">=
Empty=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-targets_0=
02c-force">targets,=20
      force</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Force-Targets">=
Force=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-targets_0=
02c-introduction-to">targets,=20
      introduction to</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rule-Introducti=
on">Rule=20
      Introduction</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-targets_0=
02c-multiple">targets,=20
      multiple</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Multiple-Target=
s">Multiple=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-targets_0=
02c-phony">targets,=20
      phony</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Phony-Targets">=
Phony=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-terminal-=
rule">terminal=20
      rule</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Match_002dAnyth=
ing-Rules">Match-Anything=20
      Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-test-_002=
8standard-target_0029"><CODE>test</CODE>=20
      <SPAN class=3Droman>(standard target)</SPAN></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Goals">Goals</A=
></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-testing-c=
ompilation">testing=20
      compilation</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Testing">Testin=
g</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-tex"><COD=
E>tex</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-tex-1"><C=
ODE>tex</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-TeX_002c-=
rule-to-run">TeX,=20
      rule to run</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-texi2dvi"=
><CODE>texi2dvi</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-texi2dvi-=
1"><CODE>texi2dvi</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-Texinfo_0=
02c-rule-to-format">Texinfo,=20
      rule to format</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-tilde-_00=
28_007e_0029">tilde=20
      (<CODE>~</CODE>)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcards">Wild=
cards</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-touch-_00=
28shell-command_0029"><CODE>touch</CODE>=20
      (shell command)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcard-Exampl=
es">Wildcard=20
      Examples</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-touch-_00=
28shell-command_0029-1"><CODE>touch</CODE>=20
      (shell command)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Empty-Targets">=
Empty=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-touching-=
files">touching=20
      files</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution">Instead=20
      of Execution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-tradition=
al-directory-search-_0028GPATH_0029">traditional=20
      directory search (GPATH)</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Search-Algorith=
m">Search=20
      Algorithm</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-types-of-=
prerequisites">types=20
      of prerequisites</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Prerequisite-Ty=
pes">Prerequisite=20
      Types</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-types_002=
c-conversion-of">types,=20
      conversion of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Types">Gu=
ile=20
      Types</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_letter-U>U</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-undefined=
-variables_002c-warning-message">undefined=20
      variables, warning message</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-undefinin=
g-variable">undefining=20
      variable</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Undefine-Direct=
ive">Undefine=20
      Directive</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-updating-=
archive-symbol-directories">updating=20
      archive symbol directories</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Symbols=
">Archive=20
      Symbols</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-updating-=
loaded-objects">updating=20
      loaded objects</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Remaking-Loaded=
-Objects">Remaking=20
      Loaded Objects</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-updating-=
makefiles">updating=20
      makefiles</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Remaking-Makefi=
les">Remaking=20
      Makefiles</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-user-defi=
ned-functions">user=20
      defined functions</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Call-Function">=
Call=20
      Function</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_letter-V>V</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-value">va=
lue</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Using-Variables=
">Using=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-value_002=
c-how-a-variable-gets-it">value,=20
      how a variable gets it</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Values">Values<=
/A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variable"=
>variable</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Using-Variables=
">Using=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variable-=
definition">variable=20
      definition</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Conten=
ts">Makefile=20
      Contents</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variable-=
references-in-recipes">variable=20
      references in recipes</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables-in-Re=
cipes">Variables=20
      in Recipes</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variables=
">variables</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables-Simpl=
ify">Variables=20
      Simplify</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variables=
_002c-_0024-in-name">variables,=20
      =E2=80=98<SAMP>$</SAMP>=E2=80=99 in name</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Computed-Names"=
>Computed=20
      Names</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variables=
_002c-and-implicit-rule">variables,=20
      and implicit rule</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variables=
_002c-appending-to">variables,=20
      appending to</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Appending">Appe=
nding</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variables=
_002c-automatic">variables,=20
      automatic</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variables=
_002c-command-line">variables,=20
      command line</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Overriding">Ove=
rriding</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variables=
_002c-command-line_002c-and-recursion">variables,=20
      command line, and recursion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variables=
_002c-computed-names">variables,=20
      computed names</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Computed-Names"=
>Computed=20
      Names</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variables=
_002c-conditional-assignment">variables,=20
      conditional assignment</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavors">Flavor=
s</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variables=
_002c-defining-verbatim">variables,=20
      defining verbatim</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Multi_002dLine"=
>Multi-Line</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variables=
_002c-environment">variables,=20
      environment</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables_002fR=
ecursion">Variables/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variables=
_002c-environment-1">variables,=20
      environment</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Environment">En=
vironment</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variables=
_002c-exporting">variables,=20
      exporting</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables_002fR=
ecursion">Variables/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variables=
_002c-flavor-of">variables,=20
      flavor of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavor-Function=
">Flavor=20
      Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variables=
_002c-flavors">variables,=20
      flavors</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavors">Flavor=
s</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variables=
_002c-how-they-get-their-values">variables,=20
      how they get their values</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Values">Values<=
/A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variables=
_002c-how-to-reference">variables,=20
      how to reference</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Reference">Refe=
rence</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variables=
_002c-loops-in-expansion">variables,=20
      loops in expansion</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavors">Flavor=
s</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variables=
_002c-modified-reference">variables,=20
      modified reference</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Substitution-Re=
fs">Substitution=20
      Refs</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variables=
_002c-multi_002dline">variables,=20
      multi-line</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Multi_002dLine"=
>Multi-Line</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variables=
_002c-nested-references">variables,=20
      nested references</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Computed-Names"=
>Computed=20
      Names</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variables=
_002c-origin-of">variables,=20
      origin of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Origin-Function=
">Origin=20
      Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variables=
_002c-overriding">variables,=20
      overriding</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Override-Direct=
ive">Override=20
      Directive</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variables=
_002c-overriding-with-arguments">variables,=20
      overriding with arguments</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Overriding">Ove=
rriding</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variables=
_002c-pattern_002dspecific">variables,=20
      pattern-specific</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Pattern_002dspe=
cific">Pattern-specific</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variables=
_002c-recursively-expanded">variables,=20
      recursively expanded</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavors">Flavor=
s</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variables=
_002c-setting">variables,=20
      setting</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Setting">Settin=
g</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variables=
_002c-simply-expanded">variables,=20
      simply expanded</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavors">Flavor=
s</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variables=
_002c-spaces-in-values">variables,=20
      spaces in values</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavors">Flavor=
s</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variables=
_002c-substituting-suffix-in">variables,=20
      substituting suffix in</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Substitution-Re=
fs">Substitution=20
      Refs</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variables=
_002c-substitution-reference">variables,=20
      substitution reference</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Substitution-Re=
fs">Substitution=20
      Refs</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variables=
_002c-target_002dspecific">variables,=20
      target-specific</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Target_002dspec=
ific">Target-specific</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variables=
_002c-unexpanded-value">variables,=20
      unexpanded value</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Value-Function"=
>Value=20
      Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-variables=
_002c-warning-for-undefined">variables,=20
      warning for undefined</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options-Summary=
">Options=20
      Summary</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-varying-p=
rerequisites">varying=20
      prerequisites</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-Pattern"=
>Static=20
      Pattern</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-verbatim-=
variable-definition">verbatim=20
      variable definition</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Multi_002dLine"=
>Multi-Line</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-vpath">vp=
ath</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Directory-Searc=
h">Directory=20
      Search</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-VPATH_002=
c-and-implicit-rules"><CODE>VPATH</CODE>,=20
      and implicit rules</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit_002fSe=
arch">Implicit/Search</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-VPATH_002=
c-and-link-libraries"><CODE>VPATH</CODE>,=20
      and link libraries</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Libraries_002fS=
earch">Libraries/Search</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_letter-W>W</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-warnings_=
002c-printing">warnings,=20
      printing</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Make-Control-Fu=
nctions">Make=20
      Control Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-weave"><C=
ODE>weave</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-weave-1">=
<CODE>weave</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-Web_002c-=
rule-to-run">Web,=20
      rule to run</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-what-if">=
what=20
      if</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Instead-of-Exec=
ution">Instead=20
      of Execution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-whitespac=
e_002c-in-variable-values">whitespace,=20
      in variable values</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavors">Flavor=
s</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-whitespac=
e_002c-stripping">whitespace,=20
      stripping</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-wildcard"=
>wildcard</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcards">Wild=
cards</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-wildcard-=
pitfalls">wildcard=20
      pitfalls</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcard-Pitfal=
l">Wildcard=20
      Pitfall</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-wildcard_=
002c-function">wildcard,=20
      function</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">File=20
      Name Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-wildcard_=
002c-in-archive-member">wildcard,=20
      in archive member</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Archive-Members=
">Archive=20
      Members</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-wildcard_=
002c-in-include">wildcard,=20
      in <CODE>include</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Include">Includ=
e</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-wildcards=
-and-MS_002dDOS_002fMS_002dWindows-backslashes">wildcards=20
      and MS-DOS/MS-Windows backslashes</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcard-Pitfal=
l">Wildcard=20
      Pitfall</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-Windows_0=
02c-choosing-a-shell-in">Windows,=20
      choosing a shell in</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Choosing-the-Sh=
ell">Choosing=20
      the Shell</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-word_002c=
-selecting-a">word,=20
      selecting a</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-words_002=
c-extracting-first">words,=20
      extracting first</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-words_002=
c-extracting-last">words,=20
      extracting last</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-words_002=
c-filtering">words,=20
      filtering</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-words_002=
c-filtering-out">words,=20
      filtering out</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-words_002=
c-finding-number">words,=20
      finding number</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-words_002=
c-iterating-over">words,=20
      iterating over</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Foreach-Functio=
n">Foreach=20
      Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-words_002=
c-joining-lists">words,=20
      joining lists</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">File=20
      Name Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-words_002=
c-removing-duplicates">words,=20
      removing duplicates</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-words_002=
c-selecting-lists-of">words,=20
      selecting lists of</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-writing-r=
ecipes">writing=20
      recipes</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Recipes">Recipe=
s</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-writing-r=
ules">writing=20
      rules</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Rules">Rules</A=
></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-writing-t=
o-a-file">writing=20
      to a file</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Function">=
File=20
      Function</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DConcept-Index_cp_letter-Y>Y</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-yacc-1"><=
CODE>yacc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-yacc-2"><=
CODE>yacc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-yacc"><CO=
DE>yacc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Canned-Recipes"=
>Canned=20
      Recipes</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-Yacc_002c=
-rule-to-run">Yacc,=20
      rule to run</A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR></TBODY></TABLE>
<TABLE>
  <TBODY>
  <TR>
    <TH vAlign=3Dtop>Jump to: &nbsp; </TH>
    <TD><A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_symbol-1"><B>!</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_symbol-2"><B>#</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_symbol-3"><B>$</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_symbol-4"><B>%</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_symbol-5"><B>*</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_symbol-6"><B>+</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_symbol-7"><B>,</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_symbol-8"><B>-</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_symbol-9"><B>.</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_symbol-10"><B>:</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_symbol-11"><B>=3D</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_symbol-12"><B>?</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_symbol-13"><B>@</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_symbol-14"><B>[</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_symbol-15"><B>\</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_symbol-16"><B>_</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_symbol-17"><B>~</B></A>=20
      &nbsp; <BR><A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-A"><B>A</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-B"><B>B</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-C"><B>C</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-D"><B>D</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-E"><B>E</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-F"><B>F</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-G"><B>G</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-H"><B>H</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-I"><B>I</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-J"><B>J</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-K"><B>K</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-L"><B>L</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-M"><B>M</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-N"><B>N</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-O"><B>O</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-P"><B>P</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-Q"><B>Q</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-R"><B>R</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-S"><B>S</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-T"><B>T</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-U"><B>U</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-V"><B>V</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-W"><B>W</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index_c=
p_letter-Y"><B>Y</B></A>=20
      &nbsp; </TD></TR></TBODY></TABLE>
<HR>
<A name=3DName-Index></A>
<DIV class=3Dheader>
<P>Previous: <A accessKey=3Dp=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dprev>Concept Index</A>, Up: <A accessKey=3Du=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Top" =
rel=3Dup>Top</A>=20
&nbsp; [<A title=3D"Table of contents"=20
href=3D"http://www.gnu.org/software/make/manual/make.html#SEC_Contents"=20
rel=3Dcontents>Contents</A>][<A title=3DIndex=20
href=3D"http://www.gnu.org/software/make/manual/make.html#Concept-Index" =

rel=3Dindex>Index</A>]</P></DIV><A=20
name=3DIndex-of-Functions_002c-Variables_002c-_0026-Directives></A>
<H2 class=3Dunnumbered>Index of Functions, Variables, &amp; =
Directives</H2>
<TABLE>
  <TBODY>
  <TR>
    <TH vAlign=3Dtop>Jump to: &nbsp; </TH>
    <TD><A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_s=
ymbol-1"><B>$</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_s=
ymbol-2"><B>%</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_s=
ymbol-3"><B>*</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_s=
ymbol-4"><B>+</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_s=
ymbol-5"><B>-</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_s=
ymbol-6"><B>.</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_s=
ymbol-7"><B>/</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_s=
ymbol-8"><B>&lt;</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_s=
ymbol-9"><B>?</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_s=
ymbol-10"><B>@</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_s=
ymbol-11"><B>^</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_s=
ymbol-12"><B>|</B></A>=20
      &nbsp; <BR><A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-A"><B>A</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-B"><B>B</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-C"><B>C</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-D"><B>D</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-E"><B>E</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-F"><B>F</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-G"><B>G</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-I"><B>I</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-J"><B>J</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-L"><B>L</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-M"><B>M</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-N"><B>N</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-O"><B>O</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-P"><B>P</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-R"><B>R</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-S"><B>S</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-T"><B>T</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-U"><B>U</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-V"><B>V</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-W"><B>W</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-Y"><B>Y</B></A>=20
      &nbsp; </TD></TR></TBODY></TABLE>
<TABLE class=3Dindex-fn border=3D0>
  <TBODY>
  <TR>
    <TD></TD>
    <TH align=3Dleft>Index Entry</TH>
    <TD>&nbsp;</TD>
    <TH align=3Dleft>Section</TH></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DName-Index_fn_symbol-1>$</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0024_002=
5"><CODE>$%</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0024_002=
8_0025D_0029"><CODE>$(%D)</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0024_002=
8_0025F_0029"><CODE>$(%F)</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0024_002=
8_002aD_0029"><CODE>$(*D)</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0024_002=
8_002aF_0029"><CODE>$(*F)</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0024_002=
8_002bD_0029"><CODE>$(+D)</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0024_002=
8_002bF_0029"><CODE>$(+F)</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0024_002=
8_003cD_0029"><CODE>$(&lt;D)</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0024_002=
8_003cF_0029"><CODE>$(&lt;F)</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0024_002=
8_003fD_0029"><CODE>$(?D)</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0024_002=
8_003fF_0029"><CODE>$(?F)</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0024_002=
8_0040D_0029"><CODE>$(@D)</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0024_002=
8_0040F_0029"><CODE>$(@F)</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0024_002=
8_005eD_0029"><CODE>$(^D)</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0024_002=
8_005eF_0029"><CODE>$(^F)</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0024_002=
a"><CODE>$*</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0024_002=
a_002c-and-static-pattern"><CODE>$*<SPAN=20
      class=3Droman>, and static pattern</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Static-Usage">S=
tatic=20
      Usage</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0024_002=
b"><CODE>$+</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0024_003=
c"><CODE>$&lt;</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0024_003=
f"><CODE>$?</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0024_004=
0"><CODE>$@</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0024_005=
e"><CODE>$^</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0024_007=
c"><CODE>$|</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DName-Index_fn_symbol-2>%</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0025-_00=
28automatic-variable_0029"><CODE>%=20
      <SPAN class=3Droman>(automatic variable)</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0025D-_0=
028automatic-variable_0029"><CODE>%D=20
      <SPAN class=3Droman>(automatic variable)</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0025F-_0=
028automatic-variable_0029"><CODE>%F=20
      <SPAN class=3Droman>(automatic variable)</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DName-Index_fn_symbol-3>*</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002a-_00=
28automatic-variable_0029"><CODE>*=20
      <SPAN class=3Droman>(automatic variable)</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002a-_00=
28automatic-variable_0029_002c-unsupported-bizarre-usage"><CODE>*=20
      <SPAN class=3Droman>(automatic variable), unsupported bizarre=20
      usage</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Missing">Missin=
g</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002aD-_0=
028automatic-variable_0029"><CODE>*D=20
      <SPAN class=3Droman>(automatic variable)</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002aF-_0=
028automatic-variable_0029"><CODE>*F=20
      <SPAN class=3Droman>(automatic variable)</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DName-Index_fn_symbol-4>+</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002b-_00=
28automatic-variable_0029"><CODE>+=20
      <SPAN class=3Droman>(automatic variable)</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002bD-_0=
028automatic-variable_0029"><CODE>+D=20
      <SPAN class=3Droman>(automatic variable)</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002bF-_0=
028automatic-variable_0029"><CODE>+F=20
      <SPAN class=3Droman>(automatic variable)</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DName-Index_fn_symbol-5>-</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002dload=
"><CODE>-load</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#load-Directive"=
>load=20
      Directive</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DName-Index_fn_symbol-6>.</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eDEFA=
ULT"><CODE>.DEFAULT</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
">Special=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eDEFA=
ULT-1"><CODE>.DEFAULT</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Last-Resort">La=
st=20
      Resort</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eDEFA=
ULT_002c-and-empty-recipes"><CODE>.DEFAULT<SPAN=20
      class=3Droman>, and empty recipes</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Empty-Recipes">=
Empty=20
      Recipes</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eDEFA=
ULT_005fGOAL-_0028define-default-goal_0029"><CODE>.DEFAULT_GOAL=20
      <SPAN class=3Droman>(define default goal)</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Variabl=
es">Special=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eDELE=
TE_005fON_005fERROR"><CODE>.DELETE_ON_ERROR</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
">Special=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eDELE=
TE_005fON_005fERROR-1"><CODE>.DELETE_ON_ERROR</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Errors">Errors<=
/A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eEXPO=
RT_005fALL_005fVARIABLES"><CODE>.EXPORT_ALL_VARIABLES</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
">Special=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eEXPO=
RT_005fALL_005fVARIABLES-1"><CODE>.EXPORT_ALL_VARIABLES</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables_002fR=
ecursion">Variables/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eFEAT=
URES-_0028list-of-supported-features_0029"><CODE>.FEATURES=20
      <SPAN class=3Droman>(list of supported =
features)</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Variabl=
es">Special=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eIGNO=
RE"><CODE>.IGNORE</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
">Special=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eIGNO=
RE-1"><CODE>.IGNORE</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Errors">Errors<=
/A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eINCL=
UDE_005fDIRS-_0028list-of-include-directories_0029"><CODE>.INCLUDE_DIRS=20
      <SPAN class=3Droman>(list of include =
directories)</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Variabl=
es">Special=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eINTE=
RMEDIATE"><CODE>.INTERMEDIATE</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
">Special=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eLIBP=
ATTERNS"><CODE>.LIBPATTERNS</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Libraries_002fS=
earch">Libraries/Search</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eLOAD=
ED"><CODE>.LOADED</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#load-Directive"=
>load=20
      Directive</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eLOW_=
005fRESOLUTION_005fTIME"><CODE>.LOW_RESOLUTION_TIME</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
">Special=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eNOTP=
ARALLEL"><CODE>.NOTPARALLEL</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
">Special=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eONES=
HELL"><CODE>.ONESHELL</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
">Special=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eONES=
HELL-1"><CODE>.ONESHELL</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#One-Shell">One =

      Shell</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002ePHON=
Y"><CODE>.PHONY</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Phony-Targets">=
Phony=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002ePHON=
Y-1"><CODE>.PHONY</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
">Special=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002ePOSI=
X"><CODE>.POSIX</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
">Special=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002ePOSI=
X-1"><CODE>.POSIX</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002ePREC=
IOUS"><CODE>.PRECIOUS</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
">Special=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002ePREC=
IOUS-1"><CODE>.PRECIOUS</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Interrupts">Int=
errupts</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eRECI=
PEPREFIX-_0028change-the-recipe-prefix-character_0029"><CODE>.RECIPEPREFI=
X=20
      <SPAN class=3Droman>(change the recipe prefix=20
    character)</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Variabl=
es">Special=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eSECO=
NDARY"><CODE>.SECONDARY</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
">Special=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eSECO=
NDEXPANSION"><CODE>.SECONDEXPANSION</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Secondary-Expan=
sion">Secondary=20
      Expansion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eSECO=
NDEXPANSION-1"><CODE>.SECONDEXPANSION</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
">Special=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eSHEL=
LFLAGS"><CODE>.SHELLFLAGS</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Choosing-the-Sh=
ell">Choosing=20
      the Shell</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eSHEL=
LFLAGS-1"><CODE>.SHELLFLAGS</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Choosing-the-Sh=
ell">Choosing=20
      the Shell</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eSILE=
NT"><CODE>.SILENT</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
">Special=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eSILE=
NT-1"><CODE>.SILENT</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Echoing">Echoin=
g</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eSUFF=
IXES"><CODE>.SUFFIXES</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Targets=
">Special=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eSUFF=
IXES-1"><CODE>.SUFFIXES</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Suffix-Rules">S=
uffix=20
      Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002eVARI=
ABLES-_0028list-of-variables_0029"><CODE>.VARIABLES=20
      <SPAN class=3Droman>(list of variables)</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Variabl=
es">Special=20
      Variables</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DName-Index_fn_symbol-7>/</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002fusr_=
002fgnu_002finclude"><CODE>/usr/gnu/include</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Include">Includ=
e</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002fusr_=
002finclude"><CODE>/usr/include</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Include">Includ=
e</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_002fusr_=
002flocal_002finclude"><CODE>/usr/local/include</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Include">Includ=
e</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DName-Index_fn_symbol-8>&lt;</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_003c-_00=
28automatic-variable_0029"><CODE>&lt;=20
      <SPAN class=3Droman>(automatic variable)</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_003cD-_0=
028automatic-variable_0029"><CODE>&lt;D=20
      <SPAN class=3Droman>(automatic variable)</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_003cF-_0=
028automatic-variable_0029"><CODE>&lt;F=20
      <SPAN class=3Droman>(automatic variable)</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DName-Index_fn_symbol-9>?</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_003f-_00=
28automatic-variable_0029"><CODE>?=20
      <SPAN class=3Droman>(automatic variable)</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_003fD-_0=
028automatic-variable_0029"><CODE>?D=20
      <SPAN class=3Droman>(automatic variable)</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_003fF-_0=
028automatic-variable_0029"><CODE>?F=20
      <SPAN class=3Droman>(automatic variable)</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DName-Index_fn_symbol-10>@</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0040-_00=
28automatic-variable_0029"><CODE>@=20
      <SPAN class=3Droman>(automatic variable)</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0040D-_0=
028automatic-variable_0029"><CODE>@D=20
      <SPAN class=3Droman>(automatic variable)</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_0040F-_0=
028automatic-variable_0029"><CODE>@F=20
      <SPAN class=3Droman>(automatic variable)</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DName-Index_fn_symbol-11>^</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_005e-_00=
28automatic-variable_0029"><CODE>^=20
      <SPAN class=3Droman>(automatic variable)</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_005eD-_0=
028automatic-variable_0029"><CODE>^D=20
      <SPAN class=3Droman>(automatic variable)</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_005eF-_0=
028automatic-variable_0029"><CODE>^F=20
      <SPAN class=3Droman>(automatic variable)</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DName-Index_fn_symbol-12>|</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-_007c-_00=
28automatic-variable_0029"><CODE>|=20
      <SPAN class=3Droman>(automatic variable)</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Automatic-Varia=
bles">Automatic=20
      Variables</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DName-Index_fn_letter-A>A</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-abspath-1=
"><CODE>abspath</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">File=20
      Name Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-addprefix=
"><CODE>addprefix</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">File=20
      Name Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-addsuffix=
"><CODE>addsuffix</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">File=20
      Name Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-and"><COD=
E>and</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditional-Fun=
ctions">Conditional=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-AR"><CODE=
>AR</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-ARFLAGS">=
<CODE>ARFLAGS</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-AS"><CODE=
>AS</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-ASFLAGS">=
<CODE>ASFLAGS</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DName-Index_fn_letter-B>B</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-basename-=
1"><CODE>basename</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">File=20
      Name Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-bindir"><=
CODE>bindir</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Directory-Varia=
bles">Directory=20
      Variables</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DName-Index_fn_letter-C>C</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-call"><CO=
DE>call</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Call-Function">=
Call=20
      Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-CC"><CODE=
>CC</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-CFLAGS"><=
CODE>CFLAGS</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-CO"><CODE=
>CO</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-COFLAGS">=
<CODE>COFLAGS</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-COMSPEC">=
<CODE>COMSPEC</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Choosing-the-Sh=
ell">Choosing=20
      the Shell</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-CPP"><COD=
E>CPP</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-CPPFLAGS"=
><CODE>CPPFLAGS</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-CTANGLE">=
<CODE>CTANGLE</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-CURDIR"><=
CODE><CODE>CURDIR</CODE></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Recursion">Recu=
rsion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-CWEAVE"><=
CODE>CWEAVE</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-CXX"><COD=
E>CXX</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-CXXFLAGS"=
><CODE>CXXFLAGS</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DName-Index_fn_letter-D>D</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-define"><=
CODE>define</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Multi_002dLine"=
>Multi-Line</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-DESTDIR">=
<CODE>DESTDIR</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#DESTDIR">DESTDI=
R</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-dir"><COD=
E>dir</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">File=20
      Name Functions</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DName-Index_fn_letter-E>E</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-else"><CO=
DE>else</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditional-Syn=
tax">Conditional=20
      Syntax</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-endef"><C=
ODE>endef</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Multi_002dLine"=
>Multi-Line</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-endif"><C=
ODE>endif</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditional-Syn=
tax">Conditional=20
      Syntax</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-error"><C=
ODE>error</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Make-Control-Fu=
nctions">Make=20
      Control Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-eval"><CO=
DE>eval</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Eval-Function">=
Eval=20
      Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-exec_005f=
prefix"><CODE>exec_prefix</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Directory-Varia=
bles">Directory=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-export"><=
CODE>export</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables_002fR=
ecursion">Variables/Recursion</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DName-Index_fn_letter-F>F</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-FC"><CODE=
>FC</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-FFLAGS"><=
CODE>FFLAGS</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-file"><CO=
DE>file</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Function">=
File=20
      Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-filter"><=
CODE>filter</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-filter_00=
2dout"><CODE>filter-out</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-findstrin=
g"><CODE>findstring</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-firstword=
"><CODE>firstword</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-flavor"><=
CODE>flavor</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavor-Function=
">Flavor=20
      Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-foreach">=
<CODE>foreach</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Foreach-Functio=
n">Foreach=20
      Function</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DName-Index_fn_letter-G>G</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-GET"><COD=
E>GET</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-GFLAGS"><=
CODE>GFLAGS</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-gmk_002de=
val"><CODE>gmk-eval</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Interface=
">Guile=20
      Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-gmk_002de=
xpand"><CODE>gmk-expand</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Interface=
">Guile=20
      Interface</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-gmk_005fa=
dd_005ffunction"><CODE>gmk_add_function</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Loaded-Object-A=
PI">Loaded=20
      Object API</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-gmk_005fa=
lloc"><CODE>gmk_alloc</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Loaded-Object-A=
PI">Loaded=20
      Object API</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-gmk_005fe=
val"><CODE>gmk_eval</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Loaded-Object-A=
PI">Loaded=20
      Object API</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-gmk_005fe=
xpand"><CODE>gmk_expand</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Loaded-Object-A=
PI">Loaded=20
      Object API</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-gmk_005ff=
ree"><CODE>gmk_free</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Loaded-Object-A=
PI">Loaded=20
      Object API</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-gmk_005ff=
unc_005fptr"><CODE>gmk_func_ptr</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Loaded-Object-A=
PI">Loaded=20
      Object API</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-GNUmakefi=
le"><CODE>GNUmakefile</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Names"=
>Makefile=20
      Names</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-GPATH"><C=
ODE>GPATH</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Search-Algorith=
m">Search=20
      Algorithm</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-guile"><C=
ODE>guile</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Guile-Function"=
>Guile=20
      Function</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DName-Index_fn_letter-I>I</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-if"><CODE=
>if</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditional-Fun=
ctions">Conditional=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-if-1"><CO=
DE>if</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditional-Fun=
ctions">Conditional=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-ifdef"><C=
ODE>ifdef</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditional-Syn=
tax">Conditional=20
      Syntax</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-ifeq"><CO=
DE>ifeq</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditional-Syn=
tax">Conditional=20
      Syntax</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-ifndef"><=
CODE>ifndef</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditional-Syn=
tax">Conditional=20
      Syntax</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-ifneq"><C=
ODE>ifneq</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditional-Syn=
tax">Conditional=20
      Syntax</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-include">=
<CODE>include</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Include">Includ=
e</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-info"><CO=
DE>info</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Make-Control-Fu=
nctions">Make=20
      Control Functions</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DName-Index_fn_letter-J>J</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-join"><CO=
DE>join</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">File=20
      Name Functions</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DName-Index_fn_letter-L>L</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-lastword"=
><CODE>lastword</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-LDFLAGS">=
<CODE>LDFLAGS</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-LDLIBS"><=
CODE>LDLIBS</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-LEX"><COD=
E>LEX</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-LFLAGS"><=
CODE>LFLAGS</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-libexecdi=
r"><CODE>libexecdir</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Directory-Varia=
bles">Directory=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-LINT"><CO=
DE>LINT</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-LINTFLAGS=
"><CODE>LINTFLAGS</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-load"><CO=
DE>load</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#load-Directive"=
>load=20
      Directive</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-LOADLIBES=
"><CODE>LOADLIBES</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DName-Index_fn_letter-M>M</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-M2C"><COD=
E>M2C</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-MAKE"><CO=
DE>MAKE</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#MAKE-Variable">=
MAKE=20
      Variable</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-MAKE-1"><=
CODE>MAKE</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavors">Flavor=
s</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-MAKECMDGO=
ALS"><CODE>MAKECMDGOALS</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Goals">Goals</A=
></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-Makefile"=
><CODE>Makefile</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Names"=
>Makefile=20
      Names</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-makefile-=
1"><CODE>makefile</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Makefile-Names"=
>Makefile=20
      Names</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-MAKEFILES=
"><CODE>MAKEFILES</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#MAKEFILES-Varia=
ble">MAKEFILES=20
      Variable</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-MAKEFILES=
-1"><CODE>MAKEFILES</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables_002fR=
ecursion">Variables/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-MAKEFILE_=
005fLIST-_0028list-of-parsed-makefiles_0029"><CODE>MAKEFILE_LIST=20
      <SPAN class=3Droman>(list of parsed =
makefiles)</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Variabl=
es">Special=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-MAKEFLAGS=
"><CODE>MAKEFLAGS</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-MAKEINFO"=
><CODE>MAKEINFO</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-MAKELEVEL=
"><CODE>MAKELEVEL</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables_002fR=
ecursion">Variables/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-MAKELEVEL=
-1"><CODE>MAKELEVEL</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Flavors">Flavor=
s</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-MAKEOVERR=
IDES"><CODE>MAKEOVERRIDES</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-MAKESHELL=
-_0028MS_002dDOS-alternative-to-SHELL_0029"><CODE><CODE>MAKESHELL</CODE> =

      <SPAN class=3Droman>(MS-DOS alternative to=20
      <CODE>SHELL</CODE>)</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Choosing-the-Sh=
ell">Choosing=20
      the Shell</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-MAKE_005f=
HOST"><CODE>MAKE_HOST</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Quick-Reference=
">Quick=20
      Reference</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-MAKE_005f=
RESTARTS-_0028number-of-times-make-has-restarted_0029"><CODE>MAKE_RESTART=
S=20
      <SPAN class=3Droman>(number of times <CODE>make</CODE> has=20
      restarted)</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Variabl=
es">Special=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-MAKE_005f=
TERMERR-_0028whether-stderr-is-a-terminal_0029"><CODE>MAKE_TERMERR=20
      <SPAN class=3Droman>(whether stderr is a =
terminal)</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Variabl=
es">Special=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-MAKE_005f=
TERMOUT-_0028whether-stdout-is-a-terminal_0029"><CODE>MAKE_TERMOUT=20
      <SPAN class=3Droman>(whether stdout is a =
terminal)</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Special-Variabl=
es">Special=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-MAKE_005f=
VERSION"><CODE>MAKE_VERSION</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Quick-Reference=
">Quick=20
      Reference</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-MFLAGS"><=
CODE>MFLAGS</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Options_002fRec=
ursion">Options/Recursion</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DName-Index_fn_letter-N>N</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-notdir"><=
CODE>notdir</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">File=20
      Name Functions</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DName-Index_fn_letter-O>O</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-or"><CODE=
>or</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Conditional-Fun=
ctions">Conditional=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-origin"><=
CODE>origin</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Origin-Function=
">Origin=20
      Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-OUTPUT_00=
5fOPTION"><CODE>OUTPUT_OPTION</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Catalogue-of-Ru=
les">Catalogue=20
      of Rules</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-override"=
><CODE>override</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Override-Direct=
ive">Override=20
      Directive</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DName-Index_fn_letter-P>P</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-patsubst"=
><CODE>patsubst</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Substitution-Re=
fs">Substitution=20
      Refs</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-patsubst-=
1"><CODE>patsubst</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-PC"><CODE=
>PC</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-PFLAGS"><=
CODE>PFLAGS</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-prefix"><=
CODE>prefix</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Directory-Varia=
bles">Directory=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-private">=
<CODE>private</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Suppressing-Inh=
eritance">Suppressing=20
      Inheritance</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DName-Index_fn_letter-R>R</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-realpath-=
1"><CODE>realpath</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">File=20
      Name Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-RFLAGS"><=
CODE>RFLAGS</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-RM"><CODE=
>RM</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DName-Index_fn_letter-S>S</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-sbindir">=
<CODE>sbindir</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Directory-Varia=
bles">Directory=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-SHELL"><C=
ODE>SHELL</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Choosing-the-Sh=
ell">Choosing=20
      the Shell</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-SHELL-1">=
<CODE>SHELL</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Choosing-the-Sh=
ell">Choosing=20
      the Shell</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-shell"><C=
ODE>shell</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Shell-Function"=
>Shell=20
      Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-SHELL-_00=
28recipe-execution_0029"><CODE><CODE>SHELL</CODE>=20
      <SPAN class=3Droman>(recipe execution)</SPAN></CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Execution">Exec=
ution</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-sort"><CO=
DE>sort</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-strip"><C=
ODE>strip</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-subst"><C=
ODE>subst</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Multiple-Target=
s">Multiple=20
      Targets</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-subst-1">=
<CODE>subst</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-suffix"><=
CODE>suffix</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">File=20
      Name Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-SUFFIXES"=
><CODE>SUFFIXES</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Suffix-Rules">S=
uffix=20
      Rules</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DName-Index_fn_letter-T>T</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-TANGLE"><=
CODE>TANGLE</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-TEX"><COD=
E>TEX</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-TEXI2DVI"=
><CODE>TEXI2DVI</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DName-Index_fn_letter-U>U</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-undefine"=
><CODE>undefine</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Undefine-Direct=
ive">Undefine=20
      Directive</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-unexport"=
><CODE>unexport</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Variables_002fR=
ecursion">Variables/Recursion</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DName-Index_fn_letter-V>V</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-value-1">=
<CODE>value</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Value-Function"=
>Value=20
      Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-VPATH"><C=
ODE>VPATH</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Directory-Searc=
h">Directory=20
      Search</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-VPATH-1">=
<CODE>VPATH</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#General-Search"=
>General=20
      Search</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-vpath-1">=
<CODE>vpath</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Directory-Searc=
h">Directory=20
      Search</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-vpath-2">=
<CODE>vpath</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Selective-Searc=
h">Selective=20
      Search</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DName-Index_fn_letter-W>W</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-warning">=
<CODE>warning</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Make-Control-Fu=
nctions">Make=20
      Control Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-WEAVE"><C=
ODE>WEAVE</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-wildcard-=
1"><CODE>wildcard</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Wildcard-Functi=
on">Wildcard=20
      Function</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-wildcard-=
2"><CODE>wildcard</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#File-Name-Funct=
ions">File=20
      Name Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-word"><CO=
DE>word</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-wordlist"=
><CODE>wordlist</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-words"><C=
ODE>words</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Text-Functions"=
>Text=20
      Functions</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR>
  <TR>
    <TH><A name=3DName-Index_fn_letter-Y>Y</A></TH>
    <TD></TD>
    <TD></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-YACC"><CO=
DE>YACC</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD></TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#index-YFLAGS"><=
CODE>YFLAGS</CODE></A>:</TD>
    <TD>&nbsp;</TD>
    <TD vAlign=3Dtop><A=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Implicit-Variab=
les">Implicit=20
      Variables</A></TD></TR>
  <TR>
    <TD colSpan=3D4>
      <HR>
    </TD></TR></TBODY></TABLE>
<TABLE>
  <TBODY>
  <TR>
    <TH vAlign=3Dtop>Jump to: &nbsp; </TH>
    <TD><A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_s=
ymbol-1"><B>$</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_s=
ymbol-2"><B>%</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_s=
ymbol-3"><B>*</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_s=
ymbol-4"><B>+</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_s=
ymbol-5"><B>-</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_s=
ymbol-6"><B>.</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_s=
ymbol-7"><B>/</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_s=
ymbol-8"><B>&lt;</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_s=
ymbol-9"><B>?</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_s=
ymbol-10"><B>@</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_s=
ymbol-11"><B>^</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_s=
ymbol-12"><B>|</B></A>=20
      &nbsp; <BR><A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-A"><B>A</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-B"><B>B</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-C"><B>C</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-D"><B>D</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-E"><B>E</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-F"><B>F</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-G"><B>G</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-I"><B>I</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-J"><B>J</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-L"><B>L</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-M"><B>M</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-N"><B>N</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-O"><B>O</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-P"><B>P</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-R"><B>R</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-S"><B>S</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-T"><B>T</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-U"><B>U</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-V"><B>V</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-W"><B>W</B></A>=20
      &nbsp; <A class=3Dsummary-letter=20
      =
href=3D"http://www.gnu.org/software/make/manual/make.html#Name-Index_fn_l=
etter-Y"><B>Y</B></A>=20
      &nbsp; </TD></TR></TBODY></TABLE>
<DIV class=3Dfootnote>
<HR>

<H4 class=3Dfootnotes-heading>Footnotes</H4>
<H3><A href=3D"http://www.gnu.org/software/make/manual/make.html#DOCF1"=20
name=3DFOOT1>(1)</A></H3>
<P>GNU Make compiled for MS-DOS and MS-Windows behaves as if =
<VAR>prefix</VAR>=20
has been defined to be the root of the DJGPP tree hierarchy.</P>
<H3><A href=3D"http://www.gnu.org/software/make/manual/make.html#DOCF2"=20
name=3DFOOT2>(2)</A></H3>
<P>On MS-DOS, the value of current working directory is =
<STRONG>global</STRONG>,=20
so changing it <EM>will</EM> affect the following recipe lines on those=20
systems.</P></DIV>
<HR>
</BODY></HTML>
