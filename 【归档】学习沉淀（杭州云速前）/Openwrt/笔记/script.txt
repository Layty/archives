scp arch/i386/boot/bzImage root@10.0.3.30:/boot
scp linktrust/*.ko root@10.0.3.30:/boot

mv bzImage bz.std

vi /usr/local/bin/start.sh
#modprobe e1000e
#modprobe e1000
#modprobe ipg
#modprobe igb
#modprobe ixgb
#modprobe ixgbe
#modprobe nf_conntrack_ftp
#modprobe lt_dos
#modprobe lt_acl
#modprobe lt_flood
#modprobe lt_logs
insmod /boot/lt_logs.ko
insmod /boot/lt_conntracks.ko
insmod /boot/lt_policy.ko
insmod /boot/lt_acl.ko
insmod /boot/lt_dos.ko 

openwrt启动顺序
加载
cd /lib/modules/2.6.39.4

insmod compat.ko
insmod cfg80211.ko
insmod mac80211.ko
insmod ath.ko
insmod ath9k_hw.ko
insmod ath9k_common.ko
insmod ath5k.ko
insmod ath9k.ko

insmod e100.ko
insmod e1000.ko
insmod e1000e.ko

卸载
rmmod ath9k
rmmod ath5k
rmmod ath9k_common
rmmod ath9k_hw
rmmod ath
rmmod mac80211
rmmod cfg80211
rmmod compat

rmmod e1000
rmmod e100
rmmod e1000e

抓包
tcpdump -s 0 -i wlan1 -y IEEE802_11_RADIO -w - > /tmp/wifi.pcap

命令行配置openwrt
iw phy0 interface add wlan0 type managed
iw wlan0 set channel 1 ht40+

基本配置
interface=wlan0
driver=nl80211
ssid=prf-test
channel=1
hw_mode=g
ieee80211n=1
wmm_enabled=1
ht_capab=[HT40+][SHORT-GI-40]
noscan=1

interface=wlan0
bss=wlan0_0
bssid=00:24:D2:26:88:EA
ssid=prfeng

#bss=wlan0_1
#ssid=pengrf

运行脚本
phynum=`iw phy | awk -F' ' '{print $2}' | cut -b 4 | head -n 1`
iw phy$phynum interface add wlan0 type managed
hostapd ./hostapd-mini.conf


openwrt 24
make KLIB=/home/zhangchao/kernel/linux-2.6.24 KLIB_BUILD=/home/zhangchao/kernel/linux-2.6.24
cp `find ./ -name *.ko` ko/
tar zcf ko.tgz ko/
sz ko.tgz 

/LTKernel/bzImage.LinkTrust
/running/LTKernel/drivers/


/hawk-av/command/svc -d /hawk-av/service/smc/
/hawk-av/command/svc -d /hawk-av/service/monitor/
/hawk-av/command/svc -d /hawk-av/service/hostapd/




-bash-3.2# mount /dev/sda1 /tmp

-bash-3.2# cat /tmp/  
-bash-3.2# cat /tmp/boot/grub/menu.lst 
# grub.conf generated by anaconda
#
# Note that you do not have to rerun grub after making changes to this file
# NOTICE:  You do not have a /boot partition.  This means that
#          all kernel and initrd paths are relative to /, eg.
#          root (hd0,0)
#          kernel /boot/vmlinuz-version ro root=/dev/hda1
#          initrd /boot/initrd-version.img
#boot=/dev/hda
trademark=LinkTrust
product=Security Gateway
manufacture=Copyright(c) 2006-2010 by LinkTrust Technologies Development Co., Ltd.         All rights reserved.
manufactureurl=http://www.linktrust.com.cn
default=0
timeout=5
# Setup serial (COM1) here with baudrate 9600
serial --unit=0 --speed=9600
title LinkTrust Security Gateway
	root (hd0,1)
	kernel /LTKernel/bzImage.LinkTrust rw root=/dev/ram0 console=ttyS0,9600n8 ramdisk_size=65536
	initrd /initrd.gz
title LinkTrust Rescue Mode
	root (hd0,0)
	kernel /boot/bzImage.LinkTrust rw root=/dev/ram0 console=ttyS0,9600n8 ramdisk_size=65536
	initrd /initrd.gz
-bash-3.2# cat /etc/rc.d/utmrc | grep insmod
	/bin/insmod /running/LTKernel/drivers/cavium/$caviumtype/pkp_drv.o >/dev/null 2>&1
############# insmod NIC dirver order  #################### 
insmod_nic_driver()
	insmod /running/LTKernel/drivers/e1000.ko > /dev/null 2>&1
	insmod /running/LTKernel/drivers/e1000e.ko > /dev/null 2>&1
	insmod /running/LTKernel/drivers/igb.ko > /dev/null 2>&1
	insmod /running/LTKernel/drivers/e100.ko > /dev/null 2>&1
	insmod /running/LTKernel/drivers/8139too.ko > /dev/null 2>&1
	insmod /running/LTKernel/drivers/r8168.ko > /dev/null 2>&1
insmod_nic_driver
insmod_ath_driver()
#	insmod /running/LTKernel/drivers/wlan.ko 
#	insmod /running/LTKernel/drivers/wlan_wep.ko 
#	insmod /running/LTKernel/drivers/wlan_ccmp.ko 
#	insmod /running/LTKernel/drivers/wlan_tkip.ko 
#	insmod /running/LTKernel/drivers/wlan_xauth.ko 
#	insmod /running/LTKernel/drivers/wlan_acl.ko 
#	insmod /running/LTKernel/drivers/wlan_scan_ap.ko 
#	insmod /running/LTKernel/drivers/wlan_scan_sta.ko 
#	insmod /running/LTKernel/drivers/ath_hal.ko 
#	insmod /running/LTKernel/drivers/ath_rate_minstrel.ko 
#	insmod /running/LTKernel/drivers/ath_rate_amrr.ko 
#	insmod /running/LTKernel/drivers/ath_rate_sample.ko 
#	insmod /running/LTKernel/drivers/ath_rate_onoe.ko 
#	insmod /running/LTKernel/drivers/ath_pci.ko 
	insmod /running/LTKernel/drivers/compat.ko 
	insmod /running/LTKernel/drivers/rfkill_backport.ko 
	insmod /running/LTKernel/drivers/cfg80211.ko 
	insmod /running/LTKernel/drivers/mac80211.ko 
	insmod /running/LTKernel/drivers/compat_firmware_class.ko 
	insmod /running/LTKernel/drivers/ath.ko 
	insmod /running/LTKernel/drivers/ath5k.ko 
	insmod /running/LTKernel/drivers/ath9k_hw.ko 
	insmod /running/LTKernel/drivers/ath9k_common.ko 
	insmod /running/LTKernel/drivers/ath9k_htc.ko 
	insmod /running/LTKernel/drivers/ath9k.ko 
insmod_ath_driver
insmod_falcon_driver()
	insmod /running/LTKernel/drivers/asic_base.ko > /dev/null 2>&1
	insmod /running/LTKernel/drivers/asic_debug.ko > /dev/null 2>&1
	insmod /running/LTKernel/drivers/asic_nic.ko > /dev/null 2>&1
	insmod /running/LTKernel/drivers/asic_tables.ko > /dev/null 2>&1
	insmod /running/LTKernel/drivers/asic_api_register.ko > /dev/null 2>&1
#modify by guoxd for insmod xt_CONTINUE
#insmod_urlq_engine()
#	insmod /running/LTKernel/modules/url_list.ko
#	insmod /running/LTKernel/modules/iptable_urlq.ko
#	insmod /running/LTKernel/modules/xt_urlq.ko
#	insmod /running/LTKernel/modules/xt_CONTINUE.ko
#insmod_urlq_engine



enum ATH_DEBUG {
	ATH_DBG_RESET		= 0x00000001,
	ATH_DBG_QUEUE		= 0x00000002,
	ATH_DBG_EEPROM		= 0x00000004,
	ATH_DBG_CALIBRATE	= 0x00000008,
	ATH_DBG_INTERRUPT	= 0x00000010,
	ATH_DBG_REGULATORY	= 0x00000020,
	ATH_DBG_ANI		= 0x00000040,
	ATH_DBG_XMIT		= 0x00000080,
	ATH_DBG_BEACON		= 0x00000100,
	ATH_DBG_CONFIG		= 0x00000200,
	ATH_DBG_FATAL		= 0x00000400,
	ATH_DBG_PS		= 0x00000800,
	ATH_DBG_HWTIMER		= 0x00001000,
	ATH_DBG_BTCOEX		= 0x00002000,
	ATH_DBG_WMI		= 0x00004000,
	ATH_DBG_BSTUCK		= 0x00008000,
	ATH_DBG_MCI		= 0x00010000,
	ATH_DBG_DFS		= 0x00020000,
	ATH_DBG_ANY		= 0xffffffff
};
