int
ath_regd_init(struct ath_regulatory *reg,
	      struct wiphy *wiphy,
	      int (*reg_notifier)(struct wiphy *wiphy,
				  struct regulatory_request *request))
{
	struct ath_common *common = container_of(reg, struct ath_common,
						 regulatory);
	int r;

	r = __ath_regd_init(reg);
	/*[ath_regd_init利用reg->current_rd初始化stuct ath_regulatory reg相关信息]*/
	if (r)
		return r;

	if (ath_is_world_regd(reg))
		memcpy(&common->reg_world_copy, reg,
		       sizeof(struct ath_regulatory));

	ath_regd_init_wiphy(reg, wiphy, reg_notifier);
	/*[ath_regd_init_wiphy利用刚得到的struct ath_regulatory reg初始化ath上层的regd相关信息]*/

	return 0;
}/*[在ath9k_init_device中被调用，此时已经从eeprom中将国家码或reg domain信息读出，存储于reg->current_rd。接着有明显的结构上初始化顺序：
	reg->current_rd ----- struct ath_regulatory reg（__ath_regd_init函数） ----- struct ieee80211_regdomain regd（ath_regd_init_wiphy函数）----- wiphy]*/

static int __ath_regd_init(struct ath_regulatory *reg)
{
	struct country_code_to_enum_rd *country = NULL;
	u16 regdmn;

	if (!reg)
		return -EINVAL;
		
	/*pengruofeng add:fix regd*/
	reg->current_rd = 0x809c;
	/*[reg->current_rd从eeprom中读出，之后所有的流程均针对其展开,所以这个值十分的关键。我写的值代表的意思是，这是个国家码（0x8000），国家码为0x9c（156-中国）
	这个值是个组合值，常用搭配：COUNTRY_ERD_FLAG 0x0800 - 后两位存储的是国家码信息 WORLDWIDE_ROAMING_FLAG  0x4000 - 网卡是否是全球漫游系列
	WORLD_SKU_PREFIX 0x0060 --国际码的前缀，国际码均为0x006x，后两面同时也代表的国家码或是regd domain吗]*/
	
	printk(KERN_DEBUG "ath: EEPROM regdomain: 0x%0x country_code 0x%0x alpha %c-%c\n"
		, reg->current_rd,reg->country_code,reg->alpha2[0],reg->alpha2[1]);

	ath_regd_sanitize(reg);

	printk(KERN_DEBUG "ath: EEPROM regdomain: 0x%0x\n", reg->current_rd);

	if (!ath_regd_is_eeprom_valid(reg)) {
	/*[查看是否具有有效的国家码或是regd domain，会利用COUNTRY_ERD_FLAG是否是国家码或是regd domain，国家码查找全局变量allCountries，regd domain查找regDomainPairs]*/
		pr_err("Invalid EEPROM contents\n");
		return -EINVAL;
	}

	regdmn = ath_regd_get_eepromRD(reg);
	reg->country_code = ath_regd_get_default_country(regdmn);
	/*为reg->country_code赋值，reg->current_rd存有国家码就直接赋值过去，是regd domain就赋值成默认值00*/

	printk(KERN_DEBUG "ath: EEPROM regdmn: 0x%0x country_code 0x%0x\n", regdmn,reg->country_code);
	if (reg->country_code == CTRY_DEFAULT &&
	    regdmn == CTRY_DEFAULT) {
		printk(KERN_DEBUG "ath: EEPROM indicates default "
		       "country code should be used\n");
		reg->country_code = CTRY_UNITED_STATES;
	}

	if (reg->country_code == CTRY_DEFAULT) {
		country = NULL;
	} else {
		printk(KERN_DEBUG "ath: doing EEPROM country->regdmn "
		       "map search\n");
		country = ath_regd_find_country(reg->country_code);
		if (country == NULL) {
			printk(KERN_DEBUG
				"ath: no valid country maps found for "
				"country code: 0x%0x\n",
				reg->country_code);
			return -EINVAL;
		} else {
			regdmn = country->regDmnEnum;
			/*[如果reg->current_rd存在的是国家码，要也要通过查找allCountries转化成regd domain才行]*/
			printk(KERN_DEBUG "ath: country maps to "
			       "regdmn code: 0x%0x\n",
			       regdmn);
		}
	}

	reg->regpair = ath_get_regpair(regdmn);
	/*[通过regd domain码，找到其在2.4Ghz与5Ghz上更多的参数，赋值到reg->regpair上]*/
	
	if (!reg->regpair) {
		printk(KERN_DEBUG "ath: "
			"No regulatory domain pair found, cannot continue\n");
		return -EINVAL;
	}

	if (!country)
		country = ath_regd_find_country_by_rd(regdmn);

	if (country) {
			printk(KERN_DEBUG "ath: EEPROM  country isn't null\n");
		reg->alpha2[0] = country->isoName[0];
		reg->alpha2[1] = country->isoName[1];
	} else {
			printk(KERN_DEBUG "ath: EEPROM  country is null\n");
		reg->alpha2[0] = '0';
		reg->alpha2[1] = '0';
	}

	printk(KERN_DEBUG "ath: Country alpha2 being used: %c%c\n",
		reg->alpha2[0], reg->alpha2[1]);
	printk(KERN_DEBUG "ath: Regpair used: 0x%0x\n",
		reg->regpair->regDmnEnum);

	return 0;
}
/*[本函数最为关键的是将reg->current_rd值转化成ath层需要的管理信息。通过reg->current_rd中组合值判断，不管是国家码还是regd domain，都要变成regd domain上的值]*/

bool ath_is_world_regd(struct ath_regulatory *reg)
{
	return is_wwr_sku(ath_regd_get_eepromRD(reg));
}

static inline bool is_wwr_sku(u16 regd)
{
	return ((regd & COUNTRY_ERD_FLAG) != COUNTRY_ERD_FLAG) &&
		(((regd & WORLD_SKU_MASK) == WORLD_SKU_PREFIX) ||
		(regd == WORLD));
}
/*[判断reg->current_rd存的是否是regd domain的国际通行码]*/

static int
ath_regd_init_wiphy(struct ath_regulatory *reg,
		    struct wiphy *wiphy,
		    int (*reg_notifier)(struct wiphy *wiphy,
					struct regulatory_request *request))
{
	const struct ieee80211_regdomain *regd;

#ifdef ATH_USER_REGD
	return 0;
#endif
/*[内核打开了ATH_USER_REGD，代表制接受用户的regd控制，因此这里直接返回]*/

	wiphy->reg_notifier = reg_notifier;
	wiphy->flags |= WIPHY_FLAG_STRICT_REGULATORY;

	if (ath_is_world_regd(reg)) {
		printk(KERN_DEBUG "ath[ath_regd_init_wiphy]:ath_is_world_regd\n");
		/*
		 * Anything applied here (prior to wiphy registration) gets
		 * saved on the wiphy orig_* parameters
		 */
		regd = ath_world_regdomain(reg);
		/*[通过regd domain码，得到ieee80211层上的regd相关信息结构-ieee80211_regdomain]*/
		wiphy->flags |= WIPHY_FLAG_CUSTOM_REGULATORY;
	} else {
		/*
		 * This gets applied in the case of the absence of CRDA,
		 * it's our own custom world regulatory domain, similar to
		 * cfg80211's but we enable passive scanning.
		 */
		regd = ath_default_world_regdomain();
	}
	wiphy_apply_custom_regulatory(wiphy, regd);
	ath_reg_apply_radar_flags(wiphy);
	ath_reg_apply_world_flags(wiphy, NL80211_REGDOM_SET_BY_DRIVER, reg);	/*[通过上面得到的struct ieee80211_regdomain regd信息来设置wiphy上的一些关于regd的信息]*/
	return 0;
}

static void ath_reg_apply_world_flags(struct wiphy *wiphy,
				      enum nl80211_reg_initiator initiator,
				      struct ath_regulatory *reg)
{
	switch (reg->regpair->regDmnEnum) {
	case 0x60:
	case 0x63:
	case 0x66:
	case 0x67:
	case 0x6C:
		ath_reg_apply_beaconing_flags(wiphy, initiator);
		break;
	case 0x68:
		ath_reg_apply_beaconing_flags(wiphy, initiator);
		ath_reg_apply_active_scan_flags(wiphy, initiator);
		break;
	}
}