/**
 * @txq_map:  Index is mac80211 queue number.  This is
 *  not necessarily the same as the hardware queue number
 *  (axq_qnum).
 */
struct ath_tx {
	u32 qlen_single;
	u32 qlen_aggr;

	u16 seq_no;
	u32 txqsetup;
	/*[硬件队列位图，0~9bit位代表10队列，被使用的队列为1，未被使用的队列为0]*/
	spinlock_t txbuflock;
	struct list_head txbuf;
	struct ath_txq txq/*[ATH9K_NUM_TX_QUEUES]*/;
	/*[ath层wmm，ath上由10个队列，ATH9K_NUM_TX_QUEUES分别数字为0~9，txq代表其中一个队列]*/
	struct ath_descdma txdma;
	struct ath_txq *txq_map/*[WME_NUM_AC]*/;
	/*[mac80211队列所对应硬件队列]*/
};


struct ath_txq {
	int mac80211_qnum; /* mac80211 queue number, -1 means not mac80211 Q */
	/*[mac80211层wmm，分成4个队列，vo、vi、be、bk，这里是axq_qnum对应的mac80211队列]*/
	u32 axq_qnum; /* ath9k hardware queue number */
	/*[其中一个队列的数字，包含data队列，beacon队列，pspoll队列，uapsd队列，cab队列；数字越大优先级别应该越高，beacon队列数字为9]*/
	void *axq_link;
	/*[非edma使用-此硬件队列的结束发包描述符]*/
	struct list_head axq_q;
	/*[非edma使用-在非edma情况下，挂载着bf_head，bf_head挂着将要被发送bf，如果又来了一个bf_head，那么将存储到axq_q链表的末尾]*/
	spinlock_t axq_lock;
	u32 axq_depth;
	u32 axq_ampdu_depth;
	bool stopped;
	bool axq_tx_inprogress;
	struct list_head axq_acq;
	/*[挂着ac[ath_atx_ac]链表，ac中有又将挂着tid[ath_atx_tid]，我想代表意思是，ac是有由硬件来协调调度，使用的是802.1q那一套法则；而ac下的tid则是表示我们将要
	发诉哪个用户的同一个优先级别tid的包。说白了便是，ac是硬件发送需要考虑的优先级，而tid是用户本身发包的优先级。]*/
	struct list_head txq_fifo/*[ATH_TXFIFO_DEPTH]*/;
	/*[edma使用-挂着bf_head，bf_head挂着将要被发送bf，如果又来了一个bf_head，那么将存储到下一个txq_fifo上]*/
	u8 txq_headidx;
	/*[edma使用-txq_fifo可以使用的起始位置]*/
	u8 txq_tailidx;
	/*[edma使用-txq_fifo可以使用的终点位置，可与txq_headidx配合形成一个环形缓冲区使用]*/
	int pending_frames;
	struct sk_buff_head complete_q;
};

struct ath_atx_ac {
	struct ath_txq *txq;
	int sched;
	struct list_head list;
	/*[用于挂到txq[ath_txq]->axq_acq上，我发现list变量名表示的通常是挂到别人上的]*/
	struct list_head tid_q;
	/*[专门用于挂着tid[ath_atx_tid],代表的是软件队列]*/
	/*[]*/
	bool clear_ps_filter;
};


struct ath_atx_tid {
	struct list_head list;
	/*[用于挂到ac[ath_atx_ac]->tid_q上，我发现list变量名表示的通常是挂到别人上的]*/
	struct sk_buff_head buf_q;
	/*[如果包放在此队列下，表示放入的软件队列，而非硬件队列]*/
	struct ath_node *an;
	struct ath_atx_ac *ac;
	unsigned long tx_buf[BITS_TO_LONGS(ATH_TID_MAX_BUFS)];
	/*[baw中，每位所对于的发送序列号是多少，这样可以方便重发是查询]*/
	int buf_pending;
	/*[dma映射都设置完毕，等待被发送的包数]*/
	int bar_index;
	u16 seq_start;
	/*[这个tid开始的使用时的序列号]*/
	u16 seq_next;
	/*[下一个可用的序列号]*/
	u16 baw_size;
	/*[有action帧ba决定的可用baw的大小]*/
	int tidno;
	int baw_head;   /* first un-acked tx buffer */
	/*[第一个没有ack的tx buffer]*/
	int baw_tail;   /* next unused tx buffer slot */
	/*[下一个可以使用的tx buffer slot]*/
	int sched;
	int paused;
	u8 state;
};

struct ath_descdma {
	void *dd_desc;
	dma_addr_t dd_desc_paddr;
	u32 dd_desc_len;
	struct ath_buf *dd_bufptr;
};


struct ath_hw {
	......
	struct ath9k_tx_queue_info txq/*[ATH9K_NUM_TX_QUEUES]*/;
	......
};

struct ath9k_tx_queue_info {
	u32 tqi_ver;
	enum ath9k_tx_queue tqi_type;
	/*[此硬件队列类型]*/
	int tqi_subtype;
	/*[此硬件队列子类型，通常用于date队列，数据队列有四种类型vo、vi、be、bk]*/
	enum ath9k_tx_queue_flags tqi_qflags;
	/*[此硬件队列所处于的状态值，可累加状态]*/
	u32 tqi_priority;
	u32 tqi_aifs;
	u32 tqi_cwmin;
	/*[wmm中最小窗口]*/
	u32 tqi_cwmax;
	/*[wmm中最大窗口]*/
	u16 tqi_shretry;
	u16 tqi_lgretry;
	u32 tqi_cbrPeriod;
	u32 tqi_cbrOverflowLimit;
	u32 tqi_burstTime;
	/*[11g的burstTime]*/
	u32 tqi_readyTime;
	u32 tqi_physCompBuf;
	u32 tqi_intFlags;
};
/*[此结构保存着硬件队列802.11q、如何抢占，发送等相关状态信息]*/

enum ath9k_tx_queue {
	ATH9K_TX_QUEUE_INACTIVE = 0,
	ATH9K_TX_QUEUE_DATA,
	ATH9K_TX_QUEUE_BEACON,
	ATH9K_TX_QUEUE_CAB,
	ATH9K_TX_QUEUE_UAPSD,
	ATH9K_TX_QUEUE_PSPOLL
};

enum ath9k_tx_queue_flags {
	TXQ_FLAG_TXOKINT_ENABLE = 0x0001,
	TXQ_FLAG_TXERRINT_ENABLE = 0x0001,
	TXQ_FLAG_TXDESCINT_ENABLE = 0x0002,
	TXQ_FLAG_TXEOLINT_ENABLE = 0x0004,
	TXQ_FLAG_TXURNINT_ENABLE = 0x0008,
	TXQ_FLAG_BACKOFF_DISABLE = 0x0010,
	TXQ_FLAG_COMPRESSION_ENABLE = 0x0020,
	TXQ_FLAG_RDYTIME_EXP_POLICY_ENABLE = 0x0040,
	TXQ_FLAG_FRAG_BURST_BACKOFF_ENABLE = 0x0080,
};