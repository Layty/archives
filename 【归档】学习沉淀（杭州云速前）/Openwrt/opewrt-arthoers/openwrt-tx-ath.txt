static void ath_tx_send_ampdu(struct ath_softc *sc, struct ath_atx_tid *tid,
			      struct sk_buff *skb, struct ath_tx_control *txctl)
{
	struct ath_frame_info *fi = get_frame_info(skb);
	struct list_head bf_head;
	struct ath_buf *bf;

	/*
	 * Do not queue to h/w when any of the following conditions is true:
	 * - there are pending frames in software queue
	 * - the TID is currently paused for ADDBA/BAR request
	 * - seqno is not within block-ack window
	 * - h/w queue depth exceeds low water mark
	 */
	if (!skb_queue_empty(&tid->buf_q) || tid->paused ||
	    !BAW_WITHIN(tid->seq_start, tid->baw_size, tid->seq_next) ||
	    txctl->txq->axq_ampdu_depth >= ATH_AGGR_MIN_QDEPTH) {
		/*[出现下面几种情况之一的话，将帧放入稍后进行调度的软件队列，不再进入硬件队列流程
		1.软件队列中还存在剩余的包
		2.此tid被暂停使用了
		3.包超出了baw的范围
		4.ampdu超出了硬件队列积压包的长度，这个长度通常为2]*/
		/*
		 * Add this frame to software queue for scheduling later
		 * for aggregation.
		 */
		TX_STAT_INC(txctl->txq->axq_qnum, a_queued_sw);
		__skb_queue_tail(&tid->buf_q, skb);
		if (!txctl->an || !txctl->an->sleeping)
			ath_tx_queue_tid(txctl->txq, tid);
		return;
	}

	bf = ath_tx_setup_buffer(sc, txctl->txq, tid, skb);
	/*[得到一个bf，数据的dma也映射完毕]*/
	if (!bf)
		return;

	bf->bf_state.bf_type = BUF_AMPDU;
	INIT_LIST_HEAD(&bf_head);
	list_add(&bf->list, &bf_head);
	/*[得到需要被发送的帧，组成一个链表，放在bf_head中，现在看来，这个bf_head也就只有一个帧]*/

	/* Add sub-frame to BAW */
	ath_tx_addto_baw(sc, tid, bf->bf_state.seqno);
	/*[设置ampdu的baw的范围]*/

	tid->buf_pending++;

	/* Queue to h/w without aggregation */
	TX_STAT_INC(txctl->txq->axq_qnum, a_queued_hw);
	bf->bf_lastbf = bf;
	ath_tx_fill_desc(sc, bf, txctl->txq, fi->framelen);
	/*[设置发包描述符的值]*/
	ath_tx_txqaddbuf(sc, txctl->txq, &bf_head, false);
	/*[发包]*/
}

static void ath_tx_send_normal(struct ath_softc *sc, struct ath_txq *txq,
			       struct ath_atx_tid *tid, struct sk_buff *skb)
{
	struct ath_frame_info *fi = get_frame_info(skb);
	struct list_head bf_head;
	struct ath_buf *bf;

	bf = fi->bf;
	if (!bf)
		bf = ath_tx_setup_buffer(sc, txq, tid, skb);

	if (!bf)
		return;

	INIT_LIST_HEAD(&bf_head);
	list_add_tail(&bf->list, &bf_head);
	bf->bf_state.bf_type = 0;

	bf->bf_lastbf = bf;
	ath_tx_fill_desc(sc, bf, txq, fi->framelen);
	ath_tx_txqaddbuf(sc, txq, &bf_head, false);
	TX_STAT_INC(txq->axq_qnum, queued);
}
/*[发送普通帧是没有进入软件队列这一步判断和操作的！]*/


/***********/
/* TX, DMA */
/***********/
/*
 * Assign a descriptor (and sequence number if necessary,
 * and map buffer for DMA. Frees skb on error
 */
static struct ath_buf *ath_tx_setup_buffer(struct ath_softc *sc,
					   struct ath_txq *txq,
					   struct ath_atx_tid *tid,
					   struct sk_buff *skb)
{
	struct ath_common *common = ath9k_hw_common(sc->sc_ah);
	struct ath_frame_info *fi = get_frame_info(skb);
	struct ieee80211_hdr *hdr = (struct ieee80211_hdr *)skb->data;
	struct ath_buf *bf;
	u16 seqno;

	bf = ath_tx_get_buffer(sc);
	/*[得到一个可用的ath_buf]*/
	if (!bf) {
		ath_dbg(common, XMIT, "TX buffers are full\n");
		goto error;
	}

	ATH_TXBUF_RESET(bf);
	/*[将可用ath_buf中的数据重置]*/

	if (tid) {
		seqno = tid->seq_next;
		hdr->seq_ctrl = cpu_to_le16(tid->seq_next << IEEE80211_SEQ_SEQ_SHIFT);
		INCR(tid->seq_next, IEEE80211_SEQ_MAX);
		bf->bf_state.seqno = seqno;
	}
	/*[将下个可用的序列号放入bf，和skb包的序列号字段中，并把tid->seq_next+1]*/

	bf->bf_mpdu = skb;
	/*[将保存数据的skb存入bf->bf_mpdu]*/

	bf->bf_buf_addr = dma_map_single(sc->dev, skb->data,
					 skb->len, DMA_TO_DEVICE);
	/*[对数据区域建立dma映射，控制器交给设备]*/
	if (unlikely(dma_mapping_error(sc->dev, bf->bf_buf_addr))) {
		bf->bf_mpdu = NULL;
		bf->bf_buf_addr = 0;
		ath_err(ath9k_hw_common(sc->sc_ah),
			"dma_mapping_error() on TX\n");
		ath_tx_return_buffer(sc, bf);
		goto error;
	}

	fi->bf = bf;

	return bf;

error:
	dev_kfree_skb_any(skb);
	return NULL;
}


static struct ath_buf *ath_tx_get_buffer(struct ath_softc *sc)
{
	struct ath_buf *bf = NULL;

	spin_lock_bh(&sc->tx.txbuflock);

	if (unlikely(list_empty(&sc->tx.txbuf))) {
		spin_unlock_bh(&sc->tx.txbuflock);
		return NULL;
	}

	bf = list_first_entry(&sc->tx.txbuf, struct ath_buf, list);
	/*[可用的ath_buf缓存区都存在于sc->tx.txbuf,取出一个可用的ath_buf]*/
	list_del(&bf->list);

	spin_unlock_bh(&sc->tx.txbuflock);

	return bf;
}

static void ath_tx_addto_baw(struct ath_softc *sc, struct ath_atx_tid *tid,
			     u16 seqno)
{
/*[seqno代表此帧的发送序列号]*/
	int index, cindex;

	index  = ATH_BA_INDEX(tid->seq_start, seqno);
	/*[发送序列号seqno减去baw开始的序列号tid->seq_start，得到一个差值]*/
	cindex = (tid->baw_head + index) & (ATH_TID_MAX_BUFS - 1);
	/*[对应tid->baw_head的相对值]*/
	__set_bit(cindex, tid->tx_buf);
	/*[设置baw中所对于cindex位对应发送的序列号]*/

	if (index >= ((tid->baw_tail - tid->baw_head) &
		(ATH_TID_MAX_BUFS - 1))) {
		tid->baw_tail = cindex;
		INCR(tid->baw_tail, ATH_TID_MAX_BUFS);
		/*[如果差值大于tid->baw_tail - tid->baw_head的值，那么tid->baw_tail必须在增加]*/
	}
}
/*[这里的tid->baw_head与tid->baw_tail设置时很巧妙的，可以看出他们对应的是环形数字缓冲区的头和尾，整个环形长度为ATH_TID_MAX_BUFS，tid->baw_head不一定非要从0开始，
这样设计是非常方便简洁的，使用action帧的ba request与ba response循环利用这个环形区的数字]*/

/***********/
/* TX, DMA */
/***********/
/*
 * Insert a chain of ath_buf (descriptors) on a txq and
 * assume the descriptors are already chained together by caller.
 */
static void ath_tx_txqaddbuf(struct ath_softc *sc, struct ath_txq *txq,
			     struct list_head *head, bool internal)
{
/*[head为bf_head,即为将要发送的ath_buf链]*/
	struct ath_hw *ah = sc->sc_ah;
	struct ath_common *common = ath9k_hw_common(ah);
	struct ath_buf *bf, *bf_last;
	bool puttxbuf = false;
	bool edma;

	/*
	 * Insert the frame on the outbound list and
	 * pass it on to the hardware.
	 */

	if (list_empty(head))
		return;

	edma = !!(ah->caps.hw_caps & ATH9K_HW_CAP_EDMA);
	bf = list_first_entry(head, struct ath_buf, list);
	bf_last = list_entry(head->prev, struct ath_buf, list);
	/*[得到head代表的ath_buf链上的第一个ath_buf与最后一个ath_buf，分别存储在bf与bf_last中]*/
	
	ath_dbg(common, QUEUE, "qnum: %d, txq depth: %d\n",
		txq->axq_qnum, txq->axq_depth);

	if (edma && list_empty(&txq->txq_fifo[txq->txq_headidx])) {						 {1}
		/*[如果走edma流程并且8个发送队列txq_fifo[txq->txq_headidx]还有闲置队列]*/
		list_splice_tail_init(head, &txq->txq_fifo/*/*[txq->txq_headidx]*/*/);
		/*[将head送入闲置队列，并将head置为自相连]*/
		INCR(txq->txq_headidx, ATH_TXFIFO_DEPTH);
		puttxbuf = true;
		/*[puttxbuf=true代表已经有包需要被发送]*/
	} else {																		{2}				
		/*[非edma或是edma但txq->txq_fifo无空闲之后，走这个流程]*/
		list_splice_tail_init(head, &txq->axq_q);
		/*[将head送入txq->axq_q之后，并将head置为自相连]*/
		
		if (txq->axq_link) {															{3}
		/*[beacon帧硬件队列，cab硬件队列会走此流程]*/
			ath9k_hw_set_desc_link(ah, txq->axq_link, bf->bf_daddr);
			/*[将bf描述符地址设置到此硬件队列上最后一个描述符的link上（可参考芯片手册），即表示可见将包与包之间的描述符串联到了一起。
			实际上观察，beacon帧和cab队列里的帧都是一个一个的进入此流程发送出去]*/
			ath_dbg(common, XMIT, "link/*/*[%u]*/*/ (%p)=%llx (%p)\n",
				txq->axq_qnum, txq->axq_link,
				ito64(bf->bf_daddr), bf->bf_desc);
		} else if (!edma)																{4}
			puttxbuf = true;

		txq->axq_link = bf_last->bf_desc;
		/*[将head中最后一个包的描述符虚拟地址设置到txq->axq_link中]*/
	}

	if (puttxbuf) {																		{5}
		TX_STAT_INC(txq->axq_qnum, puttxbuf);
		ath9k_hw_puttxbuf(ah, txq->axq_qnum, bf->bf_daddr);
		/*[如果是{2}{3}流程，将不会进入此代码段，猜测可能是因为硬件队列之前还有包，不能将bf->bf_daddr直接设置到发送寄存器中
		如果是其他流程，当有包需要发送，puttxbuf = true的时候，这段代码是两个流程的聚焦
		1.非edma流程，将这个帧的描述符直接设置到硬件队列所标识的发送寄存器中，然后等待调用ath9k_hw_txstart函数将此硬件队列的包发送出去。
		2.edma流程，只会进过{1}{5}，等于是少了{6}的显示的触发，edma会自动搞定；少了{2}{3}{4}对于包的调度，这样edma应该会自动按照txq->txq_fifo发动将包按照顺序
		发送出去]*/
		ath_dbg(common, XMIT, "TXDP/*/*[%u]*/*/ = %llx (%p)\n",
			txq->axq_qnum, ito64(bf->bf_daddr), bf->bf_desc);
	}

	if (!edma) {																			{6}
		TX_STAT_INC(txq->axq_qnum, txstart);
		ath9k_hw_txstart(ah, txq->axq_qnum);
		/*[显示触发txq->axq_qnum硬件队列的发送]*/
	}

	if (!internal) {
		txq->axq_depth++;
		if (bf_is_ampdu_not_probing(bf))
			txq->axq_ampdu_depth++;
	}
}
/*[这个函数是]*/
